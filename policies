{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ecs:*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "iam:PassRole",
        "iam:ListRoles",
        "iam:ListInstanceProfiles"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor1"
    },
    {
      "Action": "ec2:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor2"
    },
    {
      "Action": "ecr:GetAuthorizationToken",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor3"
    },
    {
      "Action": [
        "ecr:Describe*",
        "ecr:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor4"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor5"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor6"
    },
    {
      "Action": "cloudwatch:GetMetricStatistics",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor7"
    },
    {
      "Action": "cloudwatch:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor8"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:UpdateStack"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor9"
    },
    {
      "Action": "cloudformation:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor10"
    },
    {
      "Action": "dynamodb:List*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor11"
    },
    {
      "Action": "elasticache:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
        }
      },
      "Sid": "VisualEditor12"
    },
    {
      "Action": [
        "route53:ListReusableDelegationSets",
        "route53:ListTrafficPolicyInstances",
        "route53:GetTrafficPolicyInstanceCount",
        "route53:CreateHostedZone",
        "route53:CreateReusableDelegationSet",
        "route53:CreateTrafficPolicy",
        "route53:DisassociateVPCFromHostedZone",
        "route53:TestDNSAnswer",
        "route53:ListHostedZones",
        "route53:ListHostedZonesByName",
        "route53:GetAccountLimit",
        "route53:GetCheckerIpRanges",
        "route53:ListHealthChecks",
        "route53:ListTrafficPolicies",
        "ecr:*",
        "route53:GetGeoLocation",
        "route53:ListGeoLocations",
        "route53:GetHostedZoneCount",
        "route53:GetHealthCheckCount"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor13"
    },
    {
      "Action": [
        "route53:*",
        "s3:GetBucketLocation"
      ],
      "Resource": [
        "arn:aws:s3:::*",
        "arn:aws:route53:::hostedzone/Z1YL6X1TY7293G"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor14"
    },
    {
      "Action": "SNS:CreateTopic",
      "Resource": [
        "arn:aws:sns:*:048300154415:dynamodb",
        "arn:aws:s3:::*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor15"
    },
    {
      "Action": "dynamodb:*",
      "Resource": "arn:aws:dynamodb:*:048300154415:table/integrations*",
      "Effect": "Allow",
      "Sid": "VisualEditor16"
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::integrations.s3.dev.clicktripz.com*",
      "Effect": "Allow",
      "Sid": "VisualEditor17"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow",
      "Sid": "VisualEditor18"
    },
    {
      "Action": [
        "iam:Get*",
        "iam:List*"
      ],
      "Resource": [
        "arn:aws:iam::048300154415:policy/integrations_container_scripts",
        "arn:aws:iam::048300154415:group/admin@INTEGRATIONS.DEV",
        "arn:aws:iam::048300154415:policy/admin@INTEGRATIONS.DEV",
        "arn:aws:iam::048300154415:policy/Integration_Developers"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor19"
    }
  ]
}
[
  {
    "Action": "ecs:*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "iam:PassRole",
      "iam:ListRoles",
      "iam:ListInstanceProfiles"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor1"
  },
  {
    "Action": "ec2:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor2"
  },
  {
    "Action": "ecr:GetAuthorizationToken",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor3"
  },
  {
    "Action": [
      "ecr:Describe*",
      "ecr:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor4"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor5"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor6"
  },
  {
    "Action": "cloudwatch:GetMetricStatistics",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor7"
  },
  {
    "Action": "cloudwatch:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor8"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:UpdateStack"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor9"
  },
  {
    "Action": "cloudformation:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor10"
  },
  {
    "Action": "dynamodb:List*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor11"
  },
  {
    "Action": "elasticache:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-9e8f69fa"
      }
    },
    "Sid": "VisualEditor12"
  },
  {
    "Action": [
      "route53:ListReusableDelegationSets",
      "route53:ListTrafficPolicyInstances",
      "route53:GetTrafficPolicyInstanceCount",
      "route53:CreateHostedZone",
      "route53:CreateReusableDelegationSet",
      "route53:CreateTrafficPolicy",
      "route53:DisassociateVPCFromHostedZone",
      "route53:TestDNSAnswer",
      "route53:ListHostedZones",
      "route53:ListHostedZonesByName",
      "route53:GetAccountLimit",
      "route53:GetCheckerIpRanges",
      "route53:ListHealthChecks",
      "route53:ListTrafficPolicies",
      "ecr:*",
      "route53:GetGeoLocation",
      "route53:ListGeoLocations",
      "route53:GetHostedZoneCount",
      "route53:GetHealthCheckCount"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor13"
  },
  {
    "Action": [
      "route53:*",
      "s3:GetBucketLocation"
    ],
    "Resource": [
      "arn:aws:s3:::*",
      "arn:aws:route53:::hostedzone/Z1YL6X1TY7293G"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor14"
  },
  {
    "Action": "SNS:CreateTopic",
    "Resource": [
      "arn:aws:sns:*:048300154415:dynamodb",
      "arn:aws:s3:::*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor15"
  },
  {
    "Action": "dynamodb:*",
    "Resource": "arn:aws:dynamodb:*:048300154415:table/integrations*",
    "Effect": "Allow",
    "Sid": "VisualEditor16"
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::integrations.s3.dev.clicktripz.com*",
    "Effect": "Allow",
    "Sid": "VisualEditor17"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow",
    "Sid": "VisualEditor18"
  },
  {
    "Action": [
      "iam:Get*",
      "iam:List*"
    ],
    "Resource": [
      "arn:aws:iam::048300154415:policy/integrations_container_scripts",
      "arn:aws:iam::048300154415:group/admin@INTEGRATIONS.DEV",
      "arn:aws:iam::048300154415:policy/admin@INTEGRATIONS.DEV",
      "arn:aws:iam::048300154415:policy/Integration_Developers"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor19"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ecs:*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor0"
    },
    {
      "Action": "ec2:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor1"
    },
    {
      "Action": "ecr:GetAuthorizationToken",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "ecr:Describe*",
        "ecr:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor3"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor4"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor5"
    },
    {
      "Action": "cloudwatch:GetMetricStatistics",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor6"
    },
    {
      "Action": "cloudwatch:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor7"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:UpdateStack"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor8"
    },
    {
      "Action": "cloudformation:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor9"
    },
    {
      "Action": "dynamodb:List*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor10"
    },
    {
      "Action": "elasticache:Describe*",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
        }
      },
      "Sid": "VisualEditor11"
    },
    {
      "Action": [
        "iam:PassRole",
        "iam:CreateServiceLinkedRole",
        "ecr:*",
        "iam:ListRoles",
        "iam:ListInstanceProfiles"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor12"
    },
    {
      "Action": [
        "SNS:CreateTopic",
        "s3:GetBucketLocation"
      ],
      "Resource": [
        "arn:aws:s3:::*",
        "arn:aws:sns:*:048300154415:dynamodb"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor13"
    },
    {
      "Action": "dynamodb:*",
      "Resource": "arn:aws:dynamodb:*:048300154415:table/integrations*",
      "Effect": "Allow",
      "Sid": "VisualEditor14"
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::integrations.s3.clicktripz.com*",
      "Effect": "Allow",
      "Sid": "VisualEditor15"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow",
      "Sid": "VisualEditor16"
    },
    {
      "Action": [
        "iam:Get*",
        "iam:List*"
      ],
      "Resource": [
        "arn:aws:iam::048300154415:group/admin@INTEGRATIONS.PROD",
        "arn:aws:iam::048300154415:policy/admin@INTEGRATIONS.PROD",
        "arn:aws:iam::048300154415:policy/Integration_Developers"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor17"
    }
  ]
}
[
  {
    "Action": "ecs:*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor0"
  },
  {
    "Action": "ec2:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor1"
  },
  {
    "Action": "ecr:GetAuthorizationToken",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "ecr:Describe*",
      "ecr:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor3"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor4"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor5"
  },
  {
    "Action": "cloudwatch:GetMetricStatistics",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor6"
  },
  {
    "Action": "cloudwatch:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor7"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:UpdateStack"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor8"
  },
  {
    "Action": "cloudformation:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor9"
  },
  {
    "Action": "dynamodb:List*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor10"
  },
  {
    "Action": "elasticache:Describe*",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "ec2:Vpc": "arn:aws:ec2:us-west-2:048300154415:vpc/vpc-7e8c6a1a"
      }
    },
    "Sid": "VisualEditor11"
  },
  {
    "Action": [
      "iam:PassRole",
      "iam:CreateServiceLinkedRole",
      "ecr:*",
      "iam:ListRoles",
      "iam:ListInstanceProfiles"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor12"
  },
  {
    "Action": [
      "SNS:CreateTopic",
      "s3:GetBucketLocation"
    ],
    "Resource": [
      "arn:aws:s3:::*",
      "arn:aws:sns:*:048300154415:dynamodb"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor13"
  },
  {
    "Action": "dynamodb:*",
    "Resource": "arn:aws:dynamodb:*:048300154415:table/integrations*",
    "Effect": "Allow",
    "Sid": "VisualEditor14"
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::integrations.s3.clicktripz.com*",
    "Effect": "Allow",
    "Sid": "VisualEditor15"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow",
    "Sid": "VisualEditor16"
  },
  {
    "Action": [
      "iam:Get*",
      "iam:List*"
    ],
    "Resource": [
      "arn:aws:iam::048300154415:group/admin@INTEGRATIONS.PROD",
      "arn:aws:iam::048300154415:policy/admin@INTEGRATIONS.PROD",
      "arn:aws:iam::048300154415:policy/Integration_Developers"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor17"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-etl-dev/*",
        "arn:aws:s3:::ct-etl-prod/*",
        "arn:aws:s3:::ct-etl-prod",
        "arn:aws:s3:::ct-etl-dev"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "sqs:DeleteMessage",
        "sqs:DeleteMessageBatch",
        "sqs:SendMessageBatch",
        "sqs:PurgeQueue",
        "sqs:ReceiveMessage",
        "sqs:SendMessage"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-etl-dev/*",
      "arn:aws:s3:::ct-etl-prod/*",
      "arn:aws:s3:::ct-etl-prod",
      "arn:aws:s3:::ct-etl-dev"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "sqs:DeleteMessage",
      "sqs:DeleteMessageBatch",
      "sqs:SendMessageBatch",
      "sqs:PurgeQueue",
      "sqs:ReceiveMessage",
      "sqs:SendMessage"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:PutGroupPolicy",
        "iam:ListAttachedGroupPolicies",
        "iam:GetGroupPolicy",
        "iam:GetGroup",
        "iam:DeleteGroupPolicy"
      ],
      "Resource": "arn:aws:iam::048300154415:group/alexandria_developers",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "iam:*",
      "Resource": "arn:aws:iam::048300154415:user/alexandria-user",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "ecr:*",
      "Resource": "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/alexandria",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:DescribeRepositories"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "iam:GetUser",
      "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::ct-alexandria-terraform-state",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::ct-alexandria-terraform-state/*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "iam:*",
      "Resource": "arn:aws:iam::048300154415:policy/alexandria*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::ct-alexandria*",
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
[
  {
    "Action": [
      "iam:PutGroupPolicy",
      "iam:ListAttachedGroupPolicies",
      "iam:GetGroupPolicy",
      "iam:GetGroup",
      "iam:DeleteGroupPolicy"
    ],
    "Resource": "arn:aws:iam::048300154415:group/alexandria_developers",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "iam:*",
    "Resource": "arn:aws:iam::048300154415:user/alexandria-user",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "ecr:*",
    "Resource": "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/alexandria",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:DescribeRepositories"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "iam:GetUser",
    "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "s3:ListBucket",
    "Resource": "arn:aws:s3:::ct-alexandria-terraform-state",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::ct-alexandria-terraform-state/*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "iam:*",
    "Resource": "arn:aws:iam::048300154415:policy/alexandria*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::ct-alexandria*",
    "Effect": "Allow",
    "Sid": ""
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iam:*",
      "Resource": "arn:aws:iam::048300154415:policy/alexandria*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "sts:AssumeRole",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::ct-alexandria*",
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
[
  {
    "Action": "iam:*",
    "Resource": "arn:aws:iam::048300154415:policy/alexandria*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "sts:AssumeRole",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::ct-alexandria*",
    "Effect": "Allow",
    "Sid": ""
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:*"
      ],
      "Resource": [
        "arn:aws:s3:::ct-public-dmz-ftp/*"
      ],
      "Effect": "Allow",
      "Sid": "Stmt1452102416000"
    }
  ]
}
[
  {
    "Action": [
      "s3:*"
    ],
    "Resource": [
      "arn:aws:s3:::ct-public-dmz-ftp/*"
    ],
    "Effect": "Allow",
    "Sid": "Stmt1452102416000"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "redshift:CancelQuerySession",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "redshift:CancelQuerySession",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListAllMyBuckets",
        "s3:HeadBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::ct-analytics-scratch",
        "arn:aws:s3:::ct-analytics-scratch/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "s3:Get*",
      "Resource": [
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-prod-lake/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListAllMyBuckets",
      "s3:HeadBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::ct-analytics-scratch",
      "arn:aws:s3:::ct-analytics-scratch/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "s3:Get*",
    "Resource": [
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-prod-lake/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetDatabase",
        "glue:GetPartition",
        "glue:GetTables",
        "glue:GetPartitions",
        "glue:BatchGetPartition",
        "athena:*",
        "glue:GetDatabases",
        "glue:GetTable"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucketMultipartUploads",
        "s3:AbortMultipartUpload",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": "arn:aws:s3:::aws-athena-query-results-*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-dev-lake",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-prod-datascience",
        "arn:aws:s3:::ct-prod-datascience/*",
        "arn:aws:s3:::ct-dev-datascience",
        "arn:aws:s3:::ct-dev-datascience/*",
        "arn:aws:s3:::ct-prod-domo-export",
        "arn:aws:s3:::ct-prod-domo-export/*",
        "arn:aws:s3:::ct-dev-domo-export",
        "arn:aws:s3:::ct-dev-domo-export/*",
        "arn:aws:s3:::ct-prod-exploratory",
        "arn:aws:s3:::ct-prod-exploratory/*",
        "arn:aws:s3:::ct-dev-exploratory",
        "arn:aws:s3:::ct-dev-exploratory/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": "arn:aws:s3:::athena-examples*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetDatabase",
      "glue:GetPartition",
      "glue:GetTables",
      "glue:GetPartitions",
      "glue:BatchGetPartition",
      "athena:*",
      "glue:GetDatabases",
      "glue:GetTable"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:ListBucketMultipartUploads",
      "s3:AbortMultipartUpload",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": "arn:aws:s3:::aws-athena-query-results-*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-dev-lake",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-prod-datascience",
      "arn:aws:s3:::ct-prod-datascience/*",
      "arn:aws:s3:::ct-dev-datascience",
      "arn:aws:s3:::ct-dev-datascience/*",
      "arn:aws:s3:::ct-prod-domo-export",
      "arn:aws:s3:::ct-prod-domo-export/*",
      "arn:aws:s3:::ct-dev-domo-export",
      "arn:aws:s3:::ct-dev-domo-export/*",
      "arn:aws:s3:::ct-prod-exploratory",
      "arn:aws:s3:::ct-prod-exploratory/*",
      "arn:aws:s3:::ct-dev-exploratory",
      "arn:aws:s3:::ct-dev-exploratory/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": "arn:aws:s3:::athena-examples*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-dev-datascience/*",
        "arn:aws:s3:::ct-dev-exploratory/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:PutEncryptionConfiguration",
        "s3:DeleteBucketWebsite",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:DeleteObjectTagging",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:DeleteObjectVersionTagging",
        "s3:PutBucketCORS",
        "s3:PutInventoryConfiguration",
        "s3:PutObject",
        "s3:PutBucketNotification",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketLogging",
        "s3:ReplicateDelete"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-dev-datascience/*",
        "arn:aws:s3:::ct-dev-exploratory/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-dev-datascience/*",
      "arn:aws:s3:::ct-dev-exploratory/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:PutEncryptionConfiguration",
      "s3:DeleteBucketWebsite",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:DeleteObjectTagging",
      "s3:PutMetricsConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutBucketCORS",
      "s3:PutInventoryConfiguration",
      "s3:PutObject",
      "s3:PutBucketNotification",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketLogging",
      "s3:ReplicateDelete"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-dev-datascience/*",
      "arn:aws:s3:::ct-dev-exploratory/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-lake/metadata/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-lake/metadata/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-glue-prod*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-glue-prod*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-glue-test*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-glue-test*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::ct-prod-lake/analytics",
        "arn:aws:s3:::ct-prod-lake/analytics/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::ct-prod-lake/analytics",
      "arn:aws:s3:::ct-prod-lake/analytics/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-prod-datascience/*",
        "arn:aws:s3:::ct-prod-exploratory/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:PutEncryptionConfiguration",
        "s3:DeleteBucketWebsite",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:DeleteObjectTagging",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:DeleteObjectVersionTagging",
        "s3:PutBucketCORS",
        "s3:PutInventoryConfiguration",
        "s3:PutObject",
        "s3:PutBucketNotification",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketLogging",
        "s3:ReplicateDelete"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-prod-datascience/*",
        "arn:aws:s3:::ct-prod-exploratory/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-prod-datascience/*",
      "arn:aws:s3:::ct-prod-exploratory/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:PutEncryptionConfiguration",
      "s3:DeleteBucketWebsite",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:DeleteObjectTagging",
      "s3:PutMetricsConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutBucketCORS",
      "s3:PutInventoryConfiguration",
      "s3:PutObject",
      "s3:PutBucketNotification",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketLogging",
      "s3:ReplicateDelete"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-prod-datascience/*",
      "arn:aws:s3:::ct-prod-exploratory/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::ct-prod-lake/metadata/*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::ct-prod-lake/metadata/*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::access-logs.www.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:PutEncryptionConfiguration",
        "s3:DeleteBucketWebsite",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:DeleteObjectTagging",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:DeleteObjectVersionTagging",
        "s3:PutBucketCORS",
        "s3:PutInventoryConfiguration",
        "s3:PutObject",
        "s3:PutBucketNotification",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketLogging",
        "s3:ReplicateDelete"
      ],
      "Resource": [
        "arn:aws:s3:::access-logs.www.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::access-logs.www.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:PutEncryptionConfiguration",
      "s3:DeleteBucketWebsite",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:DeleteObjectTagging",
      "s3:PutMetricsConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutBucketCORS",
      "s3:PutInventoryConfiguration",
      "s3:PutObject",
      "s3:PutBucketNotification",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketLogging",
      "s3:ReplicateDelete"
    ],
    "Resource": [
      "arn:aws:s3:::access-logs.www.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::ct-prod-etl/split/vertical/vacations/*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::ct-prod-etl/split/vertical/vacations/*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-jes-prod-us-west-2-assets"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-jes-prod-us-west-2-assets*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:us-west-2:048300154415:log-group:/aws/sagemaker/*",
        "arn:aws:logs:us-west-2:048300154415:log-group:/aws/sagemaker/*:log-stream:aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "glue:UpdateDevEndpoint",
        "glue:GetDevEndpoint",
        "glue:GetDevEndpoints"
      ],
      "Resource": [
        "arn:aws:glue:us-west-2:048300154415:devEndpoint/test*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-jes-prod-us-west-2-assets"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-jes-prod-us-west-2-assets*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents",
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:us-west-2:048300154415:log-group:/aws/sagemaker/*",
      "arn:aws:logs:us-west-2:048300154415:log-group:/aws/sagemaker/*:log-stream:aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "glue:UpdateDevEndpoint",
      "glue:GetDevEndpoint",
      "glue:GetDevEndpoints"
    ],
    "Resource": [
      "arn:aws:glue:us-west-2:048300154415:devEndpoint/test*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rds:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "redshift:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-beacon-staging",
        "arn:aws:s3:::ct-beacon-production",
        "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion"
      ],
      "Resource": [
        "arn:aws:s3:::ct-beacon-staging/*",
        "arn:aws:s3:::ct-beacon-production/*",
        "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-beacon-staging",
      "arn:aws:s3:::ct-beacon-production",
      "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectVersion"
    ],
    "Resource": [
      "arn:aws:s3:::ct-beacon-staging/*",
      "arn:aws:s3:::ct-beacon-production/*",
      "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:ListFunctions",
        "lambda:InvokeFunction",
        "lambda:ListVersionsByFunction",
        "lambda:GetLayerVersion",
        "lambda:GetEventSourceMapping",
        "lambda:GetFunction",
        "lambda:ListAliases",
        "lambda:GetAccountSettings",
        "lambda:InvokeAsync",
        "lambda:GetFunctionConfiguration",
        "lambda:GetLayerVersionPolicy",
        "lambda:ListTags",
        "lambda:ListEventSourceMappings",
        "lambda:ListLayerVersions",
        "lambda:ListLayers",
        "lambda:GetAlias",
        "lambda:GetPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "lambda:ListFunctions",
      "lambda:InvokeFunction",
      "lambda:ListVersionsByFunction",
      "lambda:GetLayerVersion",
      "lambda:GetEventSourceMapping",
      "lambda:GetFunction",
      "lambda:ListAliases",
      "lambda:GetAccountSettings",
      "lambda:InvokeAsync",
      "lambda:GetFunctionConfiguration",
      "lambda:GetLayerVersionPolicy",
      "lambda:ListTags",
      "lambda:ListEventSourceMappings",
      "lambda:ListLayerVersions",
      "lambda:ListLayers",
      "lambda:GetAlias",
      "lambda:GetPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "glue:GetPartitions",
        "s3:Get*",
        "s3:List*",
        "ec2:DescribeSnapshots",
        "ec2:DescribeHostReservationOfferings",
        "ec2:DescribeVolumeStatus",
        "ec2:DescribeScheduledInstanceAvailability",
        "ec2:DescribeVolumes",
        "ec2:DescribeFpgaImageAttribute",
        "ec2:DescribeExportTasks",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeReservedInstancesListings",
        "swf:Get*",
        "ec2:DescribeSpotFleetRequestHistory",
        "ec2:DescribeVpcClassicLinkDnsSupport",
        "ec2:DescribeSnapshotAttribute",
        "ec2:DescribeIdFormat",
        "ec2:DescribeVolumeAttribute",
        "ec2:DescribeImportSnapshotTasks",
        "glue:GetPartition",
        "ec2:DescribeVpcEndpointServicePermissions",
        "ec2:GetPasswordData",
        "ec2:DescribeScheduledInstances",
        "ec2:DescribeImageAttribute",
        "ec2:DescribeFleets",
        "ec2:DescribeReservedInstancesModifications",
        "ec2:DescribeSubnets",
        "ec2:DescribeMovingAddresses",
        "ec2:DescribeFleetHistory",
        "ec2:DescribePrincipalIdFormat",
        "swf:Count*",
        "ec2:DescribeRegions",
        "ec2:DescribeFlowLogs",
        "ec2:DescribeVpcEndpointServices",
        "swf:List*",
        "ec2:DescribeSpotInstanceRequests",
        "athena:*",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeVpcEndpointConnections",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeHostReservations",
        "ecs:Describe*",
        "glue:BatchGetPartition",
        "ec2:DescribeBundleTasks",
        "ec2:DescribeIdentityIdFormat",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeVpcEndpointConnectionNotifications",
        "ec2:DescribeSecurityGroups",
        "glue:GetTable",
        "glue:GetDatabase",
        "ec2:DescribeFpgaImages",
        "ec2:DescribeVpcs",
        "ec2:DescribeStaleSecurityGroups",
        "ec2:DescribeAggregateIdFormat",
        "ec2:DescribeVolumesModifications",
        "ec2:GetHostReservationPurchasePreview",
        "ec2:DescribePlacementGroups",
        "ec2:GetConsoleScreenshot",
        "ec2:DescribeInternetGateways",
        "ec2:GetLaunchTemplateData",
        "ec2:DescribeSpotDatafeedSubscription",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeReservedInstances",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeRouteTables",
        "ec2:DescribeEgressOnlyInternetGateways",
        "glue:GetTables",
        "ec2:DescribeLaunchTemplates",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeReservedInstancesOfferings",
        "ec2:DescribeFleetInstances",
        "ec2:DescribeVpcEndpointServiceConfigurations",
        "ec2:DescribePrefixLists",
        "ec2:GetReservedInstancesExchangeQuote",
        "swf:Describe*",
        "ec2:DescribeInstanceCreditSpecifications",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeElasticGpus",
        "ec2:DescribeVpnGateways",
        "ec2:DescribeAddresses",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeDhcpOptions",
        "ec2:GetConsoleOutput",
        "ec2:DescribeSpotPriceHistory",
        "ec2:DescribeNetworkInterfaces",
        "ecs:List*",
        "ec2:DescribeIamInstanceProfileAssociations",
        "ec2:DescribeTags",
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:DescribeImportImageTasks",
        "ec2:DescribeNatGateways",
        "glue:GetDatabases",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeSpotFleetRequests",
        "redshift:RebootCluster",
        "ec2:DescribeHosts",
        "ec2:DescribeImages",
        "ec2:DescribeSpotFleetInstances",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeConversionTasks"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:s3:::*campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::ct-public-dmz-ftp/*",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
        "arn:aws:s3:::ct-public-dmz-ftp",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": "arn:aws:s3:::*campaign-route-mappings.clicktripz.com",
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucketMultipartUploads",
        "s3:AbortMultipartUpload",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": "arn:aws:s3:::aws-athena-query-results-*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-prod-lake/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": "arn:aws:s3:::athena-examples*",
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": [
        "arn:aws:s3:::*campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::ct-public-dmz-ftp/*",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
        "arn:aws:s3:::ct-public-dmz-ftp",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
        "arn:aws:s3:::*campaign-route-mappings.clicktripz.com"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    },
    {
      "Action": "swf:*",
      "Resource": [
        "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf_${aws:username}",
        "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf",
        "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor7"
    },
    {
      "Action": "sqs:*",
      "Resource": "arn:aws:sqs:us-west-2:048300154415:dev_*",
      "Effect": "Allow",
      "Sid": "VisualEditor8"
    },
    {
      "Action": "sqs:ListQueues",
      "Resource": "arn:aws:sqs:us-west-2:048300154415:*",
      "Effect": "Allow",
      "Sid": "VisualEditor9"
    },
    {
      "Action": "cloudwatch:Get*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "es:List*",
        "es:Get*",
        "es:Describe*"
      ],
      "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "glue:GetPartitions",
      "s3:Get*",
      "s3:List*",
      "ec2:DescribeSnapshots",
      "ec2:DescribeHostReservationOfferings",
      "ec2:DescribeVolumeStatus",
      "ec2:DescribeScheduledInstanceAvailability",
      "ec2:DescribeVolumes",
      "ec2:DescribeFpgaImageAttribute",
      "ec2:DescribeExportTasks",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeReservedInstancesListings",
      "swf:Get*",
      "ec2:DescribeSpotFleetRequestHistory",
      "ec2:DescribeVpcClassicLinkDnsSupport",
      "ec2:DescribeSnapshotAttribute",
      "ec2:DescribeIdFormat",
      "ec2:DescribeVolumeAttribute",
      "ec2:DescribeImportSnapshotTasks",
      "glue:GetPartition",
      "ec2:DescribeVpcEndpointServicePermissions",
      "ec2:GetPasswordData",
      "ec2:DescribeScheduledInstances",
      "ec2:DescribeImageAttribute",
      "ec2:DescribeFleets",
      "ec2:DescribeReservedInstancesModifications",
      "ec2:DescribeSubnets",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeFleetHistory",
      "ec2:DescribePrincipalIdFormat",
      "swf:Count*",
      "ec2:DescribeRegions",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeVpcEndpointServices",
      "swf:List*",
      "ec2:DescribeSpotInstanceRequests",
      "athena:*",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeVpcEndpointConnections",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeHostReservations",
      "ecs:Describe*",
      "glue:BatchGetPartition",
      "ec2:DescribeBundleTasks",
      "ec2:DescribeIdentityIdFormat",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeVpcEndpointConnectionNotifications",
      "ec2:DescribeSecurityGroups",
      "glue:GetTable",
      "glue:GetDatabase",
      "ec2:DescribeFpgaImages",
      "ec2:DescribeVpcs",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeAggregateIdFormat",
      "ec2:DescribeVolumesModifications",
      "ec2:GetHostReservationPurchasePreview",
      "ec2:DescribePlacementGroups",
      "ec2:GetConsoleScreenshot",
      "ec2:DescribeInternetGateways",
      "ec2:GetLaunchTemplateData",
      "ec2:DescribeSpotDatafeedSubscription",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeReservedInstances",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeRouteTables",
      "ec2:DescribeEgressOnlyInternetGateways",
      "glue:GetTables",
      "ec2:DescribeLaunchTemplates",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeReservedInstancesOfferings",
      "ec2:DescribeFleetInstances",
      "ec2:DescribeVpcEndpointServiceConfigurations",
      "ec2:DescribePrefixLists",
      "ec2:GetReservedInstancesExchangeQuote",
      "swf:Describe*",
      "ec2:DescribeInstanceCreditSpecifications",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeElasticGpus",
      "ec2:DescribeVpnGateways",
      "ec2:DescribeAddresses",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeDhcpOptions",
      "ec2:GetConsoleOutput",
      "ec2:DescribeSpotPriceHistory",
      "ec2:DescribeNetworkInterfaces",
      "ecs:List*",
      "ec2:DescribeIamInstanceProfileAssociations",
      "ec2:DescribeTags",
      "ec2:DescribeLaunchTemplateVersions",
      "ec2:DescribeImportImageTasks",
      "ec2:DescribeNatGateways",
      "glue:GetDatabases",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeSpotFleetRequests",
      "redshift:RebootCluster",
      "ec2:DescribeHosts",
      "ec2:DescribeImages",
      "ec2:DescribeSpotFleetInstances",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeConversionTasks"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:s3:::*campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::ct-public-dmz-ftp/*",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
      "arn:aws:s3:::ct-public-dmz-ftp",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl"
    ],
    "Resource": "arn:aws:s3:::*campaign-route-mappings.clicktripz.com",
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:ListBucketMultipartUploads",
      "s3:AbortMultipartUpload",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": "arn:aws:s3:::aws-athena-query-results-*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-prod-lake/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": "arn:aws:s3:::athena-examples*",
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": [
      "arn:aws:s3:::*campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::ct-public-dmz-ftp/*",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
      "arn:aws:s3:::ct-public-dmz-ftp",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
      "arn:aws:s3:::*campaign-route-mappings.clicktripz.com"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  },
  {
    "Action": "swf:*",
    "Resource": [
      "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf_${aws:username}",
      "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf",
      "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor7"
  },
  {
    "Action": "sqs:*",
    "Resource": "arn:aws:sqs:us-west-2:048300154415:dev_*",
    "Effect": "Allow",
    "Sid": "VisualEditor8"
  },
  {
    "Action": "sqs:ListQueues",
    "Resource": "arn:aws:sqs:us-west-2:048300154415:*",
    "Effect": "Allow",
    "Sid": "VisualEditor9"
  },
  {
    "Action": "cloudwatch:Get*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "es:List*",
      "es:Get*",
      "es:Describe*"
    ],
    "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-portal:ModifyPaymentMethods",
        "aws-portal:ViewAccount",
        "aws-portal:ViewBilling",
        "aws-portal:ViewPaymentMethods",
        "aws-portal:ViewUsage"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "Stmt1434604410000"
    }
  ]
}
[
  {
    "Action": [
      "aws-portal:ModifyPaymentMethods",
      "aws-portal:ViewAccount",
      "aws-portal:ViewBilling",
      "aws-portal:ViewPaymentMethods",
      "aws-portal:ViewUsage"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "Stmt1434604410000"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:DeleteMessage",
        "sqs:ChangeMessageVisibility",
        "firehose:PutRecord",
        "s3:*",
        "sqs:SendMessageBatch",
        "sqs:ReceiveMessage",
        "sqs:SendMessage",
        "athena:*",
        "glue:*",
        "sqs:DeleteMessageBatch",
        "cloudwatch:*",
        "sqs:PurgeQueue",
        "sqs:DeleteQueue",
        "firehose:PutRecordBatch",
        "sqs:ChangeMessageVisibilityBatch"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "sqs:DeleteMessage",
      "sqs:ChangeMessageVisibility",
      "firehose:PutRecord",
      "s3:*",
      "sqs:SendMessageBatch",
      "sqs:ReceiveMessage",
      "sqs:SendMessage",
      "athena:*",
      "glue:*",
      "sqs:DeleteMessageBatch",
      "cloudwatch:*",
      "sqs:PurgeQueue",
      "sqs:DeleteQueue",
      "firehose:PutRecordBatch",
      "sqs:ChangeMessageVisibilityBatch"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:PutMetricData",
        "cloudwatch:SetAlarmState"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:SetAlarmState"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutAccountPublicAccessBlock",
        "s3:GetAccountPublicAccessBlock",
        "s3:ListAllMyBuckets",
        "s3:ListJobs",
        "s3:CreateJob",
        "s3:HeadBucket"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::*/*",
        "arn:aws:s3:*:*:job/*",
        "arn:aws:s3:::ct-staging-datascience"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutAccountPublicAccessBlock",
      "s3:GetAccountPublicAccessBlock",
      "s3:ListAllMyBuckets",
      "s3:ListJobs",
      "s3:CreateJob",
      "s3:HeadBucket"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::*/*",
      "arn:aws:s3:*:*:job/*",
      "arn:aws:s3:::ct-staging-datascience"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:Get*",
        "s3:List*",
        "s3:Head*"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2",
        "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*",
        "arn:aws:s3:::ct-analytics-scratch",
        "arn:aws:s3:::ct-analytics-scratch/*",
        "arn:aws:s3:::ct-dev-exploratory",
        "arn:aws:s3:::ct-dev-exploratory/*",
        "arn:aws:s3:::ct-dev-lake",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-k8s-logs",
        "arn:aws:s3:::ct-k8s-logs/*",
        "arn:aws:s3:::ct-dev-datascience",
        "arn:aws:s3:::ct-dev-datascience/*",
        "arn:aws:s3:::ct-prod-datascience",
        "arn:aws:s3:::ct-prod-datascience/*",
        "arn:aws:s3:::ct-prod-etl",
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-exploratory",
        "arn:aws:s3:::ct-prod-exploratory/*",
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ml-elb-logs",
        "arn:aws:s3:::ml-elb-logs/*",
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "Read"
    },
    {
      "Action": [
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*",
        "arn:aws:s3:::ct-analytics-scratch/*",
        "arn:aws:s3:::ct-dev-exploratory/*",
        "arn:aws:s3:::ct-prod-exploratory/*",
        "arn:aws:s3:::ct-dev-datascience/*",
        "arn:aws:s3:::ct-prod-datascience/*",
        "arn:aws:s3:::ct-dev-lake/analytics/*",
        "arn:aws:s3:::ct-prod-lake/analytics/*",
        "arn:aws:s3:::ml-elb-logs/*",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "Write"
    }
  ]
}
[
  {
    "Action": [
      "s3:Get*",
      "s3:List*",
      "s3:Head*"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2",
      "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*",
      "arn:aws:s3:::ct-analytics-scratch",
      "arn:aws:s3:::ct-analytics-scratch/*",
      "arn:aws:s3:::ct-dev-exploratory",
      "arn:aws:s3:::ct-dev-exploratory/*",
      "arn:aws:s3:::ct-dev-lake",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-k8s-logs",
      "arn:aws:s3:::ct-k8s-logs/*",
      "arn:aws:s3:::ct-dev-datascience",
      "arn:aws:s3:::ct-dev-datascience/*",
      "arn:aws:s3:::ct-prod-datascience",
      "arn:aws:s3:::ct-prod-datascience/*",
      "arn:aws:s3:::ct-prod-etl",
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-exploratory",
      "arn:aws:s3:::ct-prod-exploratory/*",
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ml-elb-logs",
      "arn:aws:s3:::ml-elb-logs/*",
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "Read"
  },
  {
    "Action": [
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-athena-query-results-048300154415-us-west-2/*",
      "arn:aws:s3:::ct-analytics-scratch/*",
      "arn:aws:s3:::ct-dev-exploratory/*",
      "arn:aws:s3:::ct-prod-exploratory/*",
      "arn:aws:s3:::ct-dev-datascience/*",
      "arn:aws:s3:::ct-prod-datascience/*",
      "arn:aws:s3:::ct-dev-lake/analytics/*",
      "arn:aws:s3:::ct-prod-lake/analytics/*",
      "arn:aws:s3:::ml-elb-logs/*",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "Write"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ct-credentials/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-etl",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-dev-lake"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-lake/etl/tables/*",
        "arn:aws:s3:::ct-dev-lake/etl/tables"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:dev_ct_etl_redshift_loader_retries",
        "arn:aws:sqs:us-west-2:048300154415:dev_ct_etl_redshift_loader_DLQ",
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_raw_message_splitter_DLQ",
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_retries",
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_DLQ"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DetachNetworkInterface",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:PutMetricData",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ct-credentials/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-etl",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-dev-lake"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-lake/etl/tables/*",
      "arn:aws:s3:::ct-dev-lake/etl/tables"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:dev_ct_etl_redshift_loader_retries",
      "arn:aws:sqs:us-west-2:048300154415:dev_ct_etl_redshift_loader_DLQ",
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_raw_message_splitter_DLQ",
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_retries",
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_DLQ"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DetachNetworkInterface",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:PutMetricData",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-etl",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ct-credentials"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake/etl/tables/*",
        "arn:aws:s3:::ct-prod-lake/etl/tables"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_redshift_loader_retries",
        "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_redshift_loader_DLQ",
        "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_raw_message_splitter_DLQ"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DetachNetworkInterface",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:PutMetricData",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-etl",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ct-credentials"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake/etl/tables/*",
      "arn:aws:s3:::ct-prod-lake/etl/tables"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_redshift_loader_retries",
      "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_redshift_loader_DLQ",
      "arn:aws:sqs:us-west-2:048300154415:prod_ct_etl_raw_message_splitter_DLQ"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DetachNetworkInterface",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:PutMetricData",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-etl",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ct-credentials"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_raw_message_splitter_DLQ",
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_retries",
        "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_DLQ"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DetachNetworkInterface",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:PutMetricData",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-etl",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ct-credentials"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_raw_message_splitter_DLQ",
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_retries",
      "arn:aws:sqs:us-west-2:048300154415:staging_ct_etl_redshift_loader_DLQ"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DetachNetworkInterface",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:PutMetricData",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetDatabase",
        "glue:GetPartition",
        "glue:GetCrawler",
        "glue:GetCrawlers",
        "glue:GetTables",
        "glue:GetPartitions",
        "glue:StartCrawler",
        "glue:BatchGetPartition",
        "glue:GetDatabases",
        "athena:*",
        "glue:GetTable"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucketMultipartUploads",
        "s3:AbortMultipartUpload",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": "arn:aws:s3:::aws-athena-query-results-*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-prod-lake/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": "arn:aws:s3:::athena-examples*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetDatabase",
      "glue:GetPartition",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetTables",
      "glue:GetPartitions",
      "glue:StartCrawler",
      "glue:BatchGetPartition",
      "glue:GetDatabases",
      "athena:*",
      "glue:GetTable"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:ListBucketMultipartUploads",
      "s3:AbortMultipartUpload",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": "arn:aws:s3:::aws-athena-query-results-*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-prod-lake/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": "arn:aws:s3:::athena-examples*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:RunTask",
        "ecs:ListTasks",
        "ecs:StopTask"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML"
        }
      },
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "lambda:CreateFunction",
        "ec2:DescribeInstances",
        "iam:AttachRolePolicy",
        "ec2:DescribeSnapshots",
        "ecr:ListImages",
        "glue:*",
        "ecs:UpdateService",
        "iam:PassRole",
        "ecs:RegisterTaskDefinition",
        "ecr:DescribeRepositories",
        "cloudwatch:Get*",
        "iam:ListRolePolicies",
        "ecs:List*",
        "ec2:DescribeTags",
        "ecs:Describe*",
        "redshift:ViewQueriesInConsole",
        "iam:ListRoles",
        "ecr:GetAuthorizationToken",
        "ec2:DescribeImages",
        "kms:ListKeys",
        "s3:ListAllMyBuckets",
        "redshift:Describe*",
        "kms:ListAliases",
        "ecr:DescribeImages",
        "s3:GetBucketLocation"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:Delete*",
        "es:Get*",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecr:CompleteLayerUpload",
        "ecr:DescribeRepositories",
        "ecr:UploadLayerPart",
        "ecr:ListImages",
        "ecr:InitiateLayerUpload",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetRepositoryPolicy",
        "ecr:PutImage",
        "ecr:GetAuthorizationToken"
      ],
      "Resource": [
        "arn:aws:es:us-west-2:048300154415:domain/*",
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning",
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning-jupyter",
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/scipy",
        "arn:aws:ecr:us-west-2:048300154415:repository/pagetype_classification_app",
        "arn:aws:ecr:us-west-2:048300154415:repository/advertiser-location-service",
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": "lambda:*",
      "Resource": "arn:aws:lambda:us-west-2:048300154415:function:*_ml_*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "events:*",
      "Resource": "arn:aws:events:us-west-2:048300154415:rule/*_ml_*",
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": [
        "s3:Get*",
        "s3:List*",
        "s3:Put*"
      ],
      "Resource": [
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    },
    {
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
        "arn:aws:s3:::ct-credentials/jwt/campaigns",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor7"
    },
    {
      "Action": [
        "es:List*",
        "es:Describe*"
      ],
      "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
      "Effect": "Allow",
      "Sid": "VisualEditor8"
    },
    {
      "Action": "sqs:*",
      "Resource": "arn:aws:sqs:*:*:ds_*",
      "Effect": "Allow",
      "Sid": "VisualEditor9"
    }
  ]
}
[
  {
    "Action": [
      "ecs:RunTask",
      "ecs:ListTasks",
      "ecs:StopTask"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML"
      }
    },
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "lambda:CreateFunction",
      "ec2:DescribeInstances",
      "iam:AttachRolePolicy",
      "ec2:DescribeSnapshots",
      "ecr:ListImages",
      "glue:*",
      "ecs:UpdateService",
      "iam:PassRole",
      "ecs:RegisterTaskDefinition",
      "ecr:DescribeRepositories",
      "cloudwatch:Get*",
      "iam:ListRolePolicies",
      "ecs:List*",
      "ec2:DescribeTags",
      "ecs:Describe*",
      "redshift:ViewQueriesInConsole",
      "iam:ListRoles",
      "ecr:GetAuthorizationToken",
      "ec2:DescribeImages",
      "kms:ListKeys",
      "s3:ListAllMyBuckets",
      "redshift:Describe*",
      "kms:ListAliases",
      "ecr:DescribeImages",
      "s3:GetBucketLocation"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:Delete*",
      "es:Get*",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecr:CompleteLayerUpload",
      "ecr:DescribeRepositories",
      "ecr:UploadLayerPart",
      "ecr:ListImages",
      "ecr:InitiateLayerUpload",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetRepositoryPolicy",
      "ecr:PutImage",
      "ecr:GetAuthorizationToken"
    ],
    "Resource": [
      "arn:aws:es:us-west-2:048300154415:domain/*",
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning",
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning-jupyter",
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/scipy",
      "arn:aws:ecr:us-west-2:048300154415:repository/pagetype_classification_app",
      "arn:aws:ecr:us-west-2:048300154415:repository/advertiser-location-service",
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": "lambda:*",
    "Resource": "arn:aws:lambda:us-west-2:048300154415:function:*_ml_*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "events:*",
    "Resource": "arn:aws:events:us-west-2:048300154415:rule/*_ml_*",
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": [
      "s3:Get*",
      "s3:List*",
      "s3:Put*"
    ],
    "Resource": [
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  },
  {
    "Action": [
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
      "arn:aws:s3:::ct-credentials/jwt/campaigns",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor7"
  },
  {
    "Action": [
      "es:List*",
      "es:Describe*"
    ],
    "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
    "Effect": "Allow",
    "Sid": "VisualEditor8"
  },
  {
    "Action": "sqs:*",
    "Resource": "arn:aws:sqs:*:*:ds_*",
    "Effect": "Allow",
    "Sid": "VisualEditor9"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeTags",
        "elasticloadbalancing:DeregisterTargets"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "sns:Publish",
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:sns:eu-central-1:048300154415:deregisterSpotInstance",
        "arn:aws:lambda:eu-central-1:048300154415:function:deregisterSpotInstance_main",
        "arn:aws:sns:us-west-2:048300154415:deregisterSpotInstance",
        "arn:aws:lambda:us-west-2:048300154415:function:deregisterSpotInstance_main"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeTags",
      "elasticloadbalancing:DeregisterTargets"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "sns:Publish",
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:sns:eu-central-1:048300154415:deregisterSpotInstance",
      "arn:aws:lambda:eu-central-1:048300154415:function:deregisterSpotInstance_main",
      "arn:aws:sns:us-west-2:048300154415:deregisterSpotInstance",
      "arn:aws:lambda:us-west-2:048300154415:function:deregisterSpotInstance_main"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:dev_manifest_loader",
        "arn:aws:sqs:us-west-2:048300154415:dev_manifest_loader_DLQ"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:PutMetricData",
        "cloudwatch:SetAlarmState"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:dev_manifest_loader",
      "arn:aws:sqs:us-west-2:048300154415:dev_manifest_loader_DLQ"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:SetAlarmState"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:PutRecord",
        "firehose:PutRecordBatch"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ctlabs-dev-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev-*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:DeliveryStreamStatus"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ctlabs-dev-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev-*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "firehose:PutRecord",
      "firehose:PutRecordBatch"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ctlabs-dev-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev-*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:DeliveryStreamStatus"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ctlabs-dev-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev-*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:PutRecord",
        "kinesis:PutRecords",
        "kinesis:GetShardIterator",
        "kinesis:GetRecords",
        "kinesis:DescribeStream",
        "kinesis:ListTagsForStream"
      ],
      "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/dev-experiment-assignment-log-stream",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:PutRecord",
      "kinesis:PutRecords",
      "kinesis:GetShardIterator",
      "kinesis:GetRecords",
      "kinesis:DescribeStream",
      "kinesis:ListTagsForStream"
    ],
    "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/dev-experiment-assignment-log-stream",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:UpdateFunctionCode",
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:us-west-2:048300154415:function:ctlabs_dev_etl_publisher_session_conversion_linker"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:UpdateFunctionCode",
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:us-west-2:048300154415:function:ctlabs_dev_etl_publisher_session_conversion_linker"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sns:Publish",
      "Resource": "arn:aws:sns:us-west-2:048300154415:dev-config-provider",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "sns:Publish",
    "Resource": "arn:aws:sns:us-west-2:048300154415:dev-config-provider",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:RunTask"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:task-definition/shared_swf_worker_medium_priority"
      ],
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-SWF"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ecs:RunTask"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:task-definition/shared_swf_worker_medium_priority"
    ],
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-SWF"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:us-west-2:048300154415:function:ct_prod_etl_sqs_loader"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:us-west-2:048300154415:function:ct_prod_etl_sqs_loader"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-lake/bin/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-lake/bin/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:BatchDeleteImage",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecr:DescribeImages"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "Stmt1476919244000"
    },
    {
      "Action": [
        "ecs:DescribeClusters",
        "ecs:DescribeTaskDefinition",
        "ecs:DescribeTasks",
        "ecs:ListClusters",
        "ecs:ListTaskDefinitions",
        "ecs:ListTasks"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "Stmt1476919353000"
    }
  ]
}
[
  {
    "Action": [
      "ecr:BatchDeleteImage",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:DescribeImages"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "Stmt1476919244000"
  },
  {
    "Action": [
      "ecs:DescribeClusters",
      "ecs:DescribeTaskDefinition",
      "ecs:DescribeTasks",
      "ecs:ListClusters",
      "ecs:ListTaskDefinitions",
      "ecs:ListTasks"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "Stmt1476919353000"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:*",
        "firehose:*",
        "sqs:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:*",
      "firehose:*",
      "sqs:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:DeleteBucketWebsite",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:DeleteObjectTagging",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:DeleteObjectVersionTagging",
        "s3:PutBucketCORS",
        "s3:PutInventoryConfiguration",
        "s3:PutObject",
        "s3:PutIpConfiguration",
        "s3:PutBucketNotification",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketLogging",
        "s3:ReplicateDelete"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl",
        "arn:aws:s3:::*/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "kms:*",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:DeleteBucketWebsite",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:DeleteObjectTagging",
      "s3:PutMetricsConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutBucketCORS",
      "s3:PutInventoryConfiguration",
      "s3:PutObject",
      "s3:PutIpConfiguration",
      "s3:PutBucketNotification",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketLogging",
      "s3:ReplicateDelete"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl",
      "arn:aws:s3:::*/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "kms:*",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:ListGroupPolicies",
        "iam:ListServerCertificates",
        "iam:ListAccountAliases",
        "iam:ListUsers",
        "iam:ListAttachedGroupPolicies",
        "iam:ListGroups",
        "iam:ListMFADevices",
        "iam:GetAccountSummary"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "iam:UpdateLoginProfile",
        "iam:UploadSigningCertificate",
        "iam:DeleteAccessKey",
        "iam:UpdateAccessKey",
        "iam:DeleteSSHPublicKey",
        "iam:UpdateSSHPublicKey",
        "iam:CreateAccessKey",
        "iam:CreateLoginProfile",
        "iam:DeleteSigningCertificate",
        "iam:UploadSSHPublicKey",
        "iam:UpdateSigningCertificate",
        "iam:DeleteLoginProfile",
        "iam:ChangePassword"
      ],
      "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "iam:ListMFADevices",
      "Resource": [
        "arn:aws:iam::048300154415:mfa/*",
        "arn:aws:iam::048300154415:user/${aws:username}"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "iam:EnableMFADevice",
        "iam:ResyncMFADevice",
        "iam:CreateVirtualMFADevice"
      ],
      "Resource": [
        "arn:aws:iam::048300154415:mfa/${aws:username}",
        "arn:aws:iam::048300154415:user/${aws:username}"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": [
        "iam:Get*",
        "iam:List*"
      ],
      "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": "iam:ListVirtualMFADevices",
      "Resource": [
        "arn:aws:iam::048300154415:mfa/*",
        "arn:aws:iam::048300154415:user/${aws:username}"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    },
    {
      "Action": [
        "iam:RequestSmsMfaRegistration",
        "iam:FinalizeSmsMfaRegistration"
      ],
      "Resource": [
        "arn:aws:iam::048300154415:mfa/${aws:username}",
        "arn:aws:iam::048300154415:user/${aws:username}"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    },
    {
      "Action": [
        "iam:UpdateAssumeRolePolicy",
        "iam:DeactivateMFADevice",
        "iam:CreateServiceSpecificCredential",
        "iam:DeleteAccessKey",
        "iam:DeleteGroup",
        "iam:UpdateOpenIDConnectProviderThumbprint",
        "iam:RemoveRoleFromInstanceProfile",
        "iam:UpdateGroup",
        "iam:CreateRole",
        "iam:AttachRolePolicy",
        "iam:PutRolePolicy",
        "iam:AddRoleToInstanceProfile",
        "iam:CreateLoginProfile",
        "iam:DetachRolePolicy",
        "iam:CreateAccountAlias",
        "iam:DeleteServerCertificate",
        "iam:UploadSSHPublicKey",
        "iam:DetachGroupPolicy",
        "iam:DetachUserPolicy",
        "iam:DeleteOpenIDConnectProvider",
        "iam:ChangePassword",
        "iam:PutGroupPolicy",
        "iam:UpdateLoginProfile",
        "iam:UpdateServiceSpecificCredential",
        "iam:CreateGroup",
        "iam:RemoveClientIDFromOpenIDConnectProvider",
        "iam:UpdateUser",
        "iam:DeleteUserPolicy",
        "iam:AttachUserPolicy",
        "iam:DeleteRole",
        "iam:UpdateRoleDescription",
        "iam:UpdateAccessKey",
        "iam:UpdateSSHPublicKey",
        "iam:UpdateServerCertificate",
        "iam:DeleteSigningCertificate",
        "iam:UpdateAccountPasswordPolicy",
        "iam:DeleteServiceLinkedRole",
        "iam:CreateInstanceProfile",
        "iam:ResetServiceSpecificCredential",
        "iam:DeletePolicy",
        "iam:DeleteSSHPublicKey",
        "iam:CreateVirtualMFADevice",
        "iam:CreateSAMLProvider",
        "iam:CreateUser",
        "iam:CreateAccessKey",
        "iam:PassRole",
        "iam:AddUserToGroup",
        "iam:RemoveUserFromGroup",
        "iam:DeleteRolePolicy",
        "iam:ResyncMFADevice",
        "iam:DeleteAccountAlias",
        "iam:CreatePolicyVersion",
        "iam:UpdateSAMLProvider",
        "iam:DeleteLoginProfile",
        "iam:DeleteInstanceProfile",
        "iam:UploadSigningCertificate",
        "iam:DeleteAccountPasswordPolicy",
        "iam:DeleteUser",
        "iam:CreateOpenIDConnectProvider",
        "iam:UploadServerCertificate",
        "iam:CreatePolicy",
        "iam:CreateServiceLinkedRole",
        "iam:DeleteVirtualMFADevice",
        "iam:AttachGroupPolicy",
        "iam:PutUserPolicy",
        "iam:UpdateSigningCertificate",
        "iam:DeleteGroupPolicy",
        "iam:AddClientIDToOpenIDConnectProvider",
        "iam:DeleteServiceSpecificCredential",
        "iam:DeletePolicyVersion",
        "iam:SetDefaultPolicyVersion",
        "iam:DeleteSAMLProvider"
      ],
      "Resource": "*",
      "Effect": "Deny",
      "Condition": {
        "BoolIfExists": {
          "aws:MultiFactorAuthPresent": "false"
        }
      },
      "Sid": "VisualEditor7"
    }
  ]
}
[
  {
    "Action": [
      "iam:ListGroupPolicies",
      "iam:ListServerCertificates",
      "iam:ListAccountAliases",
      "iam:ListUsers",
      "iam:ListAttachedGroupPolicies",
      "iam:ListGroups",
      "iam:ListMFADevices",
      "iam:GetAccountSummary"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "iam:UpdateLoginProfile",
      "iam:UploadSigningCertificate",
      "iam:DeleteAccessKey",
      "iam:UpdateAccessKey",
      "iam:DeleteSSHPublicKey",
      "iam:UpdateSSHPublicKey",
      "iam:CreateAccessKey",
      "iam:CreateLoginProfile",
      "iam:DeleteSigningCertificate",
      "iam:UploadSSHPublicKey",
      "iam:UpdateSigningCertificate",
      "iam:DeleteLoginProfile",
      "iam:ChangePassword"
    ],
    "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "iam:ListMFADevices",
    "Resource": [
      "arn:aws:iam::048300154415:mfa/*",
      "arn:aws:iam::048300154415:user/${aws:username}"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "iam:EnableMFADevice",
      "iam:ResyncMFADevice",
      "iam:CreateVirtualMFADevice"
    ],
    "Resource": [
      "arn:aws:iam::048300154415:mfa/${aws:username}",
      "arn:aws:iam::048300154415:user/${aws:username}"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": [
      "iam:Get*",
      "iam:List*"
    ],
    "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": "iam:ListVirtualMFADevices",
    "Resource": [
      "arn:aws:iam::048300154415:mfa/*",
      "arn:aws:iam::048300154415:user/${aws:username}"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  },
  {
    "Action": [
      "iam:RequestSmsMfaRegistration",
      "iam:FinalizeSmsMfaRegistration"
    ],
    "Resource": [
      "arn:aws:iam::048300154415:mfa/${aws:username}",
      "arn:aws:iam::048300154415:user/${aws:username}"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  },
  {
    "Action": [
      "iam:UpdateAssumeRolePolicy",
      "iam:DeactivateMFADevice",
      "iam:CreateServiceSpecificCredential",
      "iam:DeleteAccessKey",
      "iam:DeleteGroup",
      "iam:UpdateOpenIDConnectProviderThumbprint",
      "iam:RemoveRoleFromInstanceProfile",
      "iam:UpdateGroup",
      "iam:CreateRole",
      "iam:AttachRolePolicy",
      "iam:PutRolePolicy",
      "iam:AddRoleToInstanceProfile",
      "iam:CreateLoginProfile",
      "iam:DetachRolePolicy",
      "iam:CreateAccountAlias",
      "iam:DeleteServerCertificate",
      "iam:UploadSSHPublicKey",
      "iam:DetachGroupPolicy",
      "iam:DetachUserPolicy",
      "iam:DeleteOpenIDConnectProvider",
      "iam:ChangePassword",
      "iam:PutGroupPolicy",
      "iam:UpdateLoginProfile",
      "iam:UpdateServiceSpecificCredential",
      "iam:CreateGroup",
      "iam:RemoveClientIDFromOpenIDConnectProvider",
      "iam:UpdateUser",
      "iam:DeleteUserPolicy",
      "iam:AttachUserPolicy",
      "iam:DeleteRole",
      "iam:UpdateRoleDescription",
      "iam:UpdateAccessKey",
      "iam:UpdateSSHPublicKey",
      "iam:UpdateServerCertificate",
      "iam:DeleteSigningCertificate",
      "iam:UpdateAccountPasswordPolicy",
      "iam:DeleteServiceLinkedRole",
      "iam:CreateInstanceProfile",
      "iam:ResetServiceSpecificCredential",
      "iam:DeletePolicy",
      "iam:DeleteSSHPublicKey",
      "iam:CreateVirtualMFADevice",
      "iam:CreateSAMLProvider",
      "iam:CreateUser",
      "iam:CreateAccessKey",
      "iam:PassRole",
      "iam:AddUserToGroup",
      "iam:RemoveUserFromGroup",
      "iam:DeleteRolePolicy",
      "iam:ResyncMFADevice",
      "iam:DeleteAccountAlias",
      "iam:CreatePolicyVersion",
      "iam:UpdateSAMLProvider",
      "iam:DeleteLoginProfile",
      "iam:DeleteInstanceProfile",
      "iam:UploadSigningCertificate",
      "iam:DeleteAccountPasswordPolicy",
      "iam:DeleteUser",
      "iam:CreateOpenIDConnectProvider",
      "iam:UploadServerCertificate",
      "iam:CreatePolicy",
      "iam:CreateServiceLinkedRole",
      "iam:DeleteVirtualMFADevice",
      "iam:AttachGroupPolicy",
      "iam:PutUserPolicy",
      "iam:UpdateSigningCertificate",
      "iam:DeleteGroupPolicy",
      "iam:AddClientIDToOpenIDConnectProvider",
      "iam:DeleteServiceSpecificCredential",
      "iam:DeletePolicyVersion",
      "iam:SetDefaultPolicyVersion",
      "iam:DeleteSAMLProvider"
    ],
    "Resource": "*",
    "Effect": "Deny",
    "Condition": {
      "BoolIfExists": {
        "aws:MultiFactorAuthPresent": "false"
      }
    },
    "Sid": "VisualEditor7"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "redshift:GetClusterCredentials",
      "Resource": [
        "arn:aws:redshift:us-west-2:048300154415:dbname:*/analytics",
        "arn:aws:redshift:*:*:dbgroup:*/*",
        "arn:aws:redshift:us-west-2:048300154415:dbuser:*/clicktripz"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": "redshift:GetClusterCredentials",
    "Resource": [
      "arn:aws:redshift:us-west-2:048300154415:dbname:*/analytics",
      "arn:aws:redshift:*:*:dbgroup:*/*",
      "arn:aws:redshift:us-west-2:048300154415:dbuser:*/clicktripz"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket",
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "swf:*"
      ],
      "Resource": [
        "arn:aws:swf:*:048300154415:/domain/prod_swf"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket",
      "s3:ListAllMyBuckets"
    ],
    "Resource": [
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "swf:*"
    ],
    "Resource": [
      "arn:aws:swf:*:048300154415:/domain/prod_swf"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket",
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "swf:*"
      ],
      "Resource": [
        "arn:aws:swf:*:048300154415:/domain/dev_swf"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket",
      "s3:ListAllMyBuckets"
    ],
    "Resource": [
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "swf:*"
    ],
    "Resource": [
      "arn:aws:swf:*:048300154415:/domain/dev_swf"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ec2:DescribeAccountAttributes",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "iam:PutGroupPolicy",
        "iam:ListAttachedGroupPolicies",
        "iam:GetGroupPolicy",
        "iam:GetGroup",
        "iam:DeleteGroupPolicy"
      ],
      "Resource": "arn:aws:iam::048300154415:group/iad_developers",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "iam:GetUser",
      "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::ct-iad-terraform-state",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::ct-iad-terraform-state/*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "lambda:GetEventSourceMapping",
        "lambda:DeleteEventSourceMapping",
        "lambda:CreateEventSourceMapping"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "logs:DescribeLogGroups",
      "Resource": "arn:aws:logs:us-west-2:048300154415:log-group::log-stream:",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": [
        "kinesisanalytics:ListApplications",
        "kinesisanalytics:DiscoverInputSchema"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "cloudwatch:*",
      "Resource": [
        "arn:aws:cloudwatch:us-west-2:048300154415:alarm:iad*",
        "arn:aws:cloudwatch:us-west-2:048300154415:alarm:048300154415/iad*"
      ],
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "iam:*",
      "Resource": [
        "arn:aws:iam::048300154415:role/iad_*",
        "arn:aws:iam::048300154415:policy/iad_*"
      ],
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "kinesisanalytics:*",
      "Resource": "arn:aws:kinesisanalytics:us-west-2:048300154415:application/iad*",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "kinesis:*",
      "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/iad_*_notification_stream",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "lambda:*",
      "Resource": [
        "arn:aws:lambda:us-west-2:048300154415:function:iad_notifier*",
        "arn:aws:lambda:us-west-2:048300154415:function:iad_logentries_relay*"
      ],
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "logs:*",
      "Resource": [
        "arn:aws:logs:us-west-2:048300154415:log-group:iad*:log-stream:*",
        "arn:aws:logs:us-west-2:048300154415:log-group:iad*:log-stream:"
      ],
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "SNS:*",
      "Resource": "arn:aws:sns:us-west-2:048300154415:iad-*-cloudwatch-notifications",
      "Effect": "Allow",
      "Sid": ""
    },
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::iad-*",
        "arn:aws:s3:::ct-iad-*"
      ],
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
[
  {
    "Action": "ec2:DescribeAccountAttributes",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "iam:PutGroupPolicy",
      "iam:ListAttachedGroupPolicies",
      "iam:GetGroupPolicy",
      "iam:GetGroup",
      "iam:DeleteGroupPolicy"
    ],
    "Resource": "arn:aws:iam::048300154415:group/iad_developers",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "iam:GetUser",
    "Resource": "arn:aws:iam::048300154415:user/${aws:username}",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "s3:ListBucket",
    "Resource": "arn:aws:s3:::ct-iad-terraform-state",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::ct-iad-terraform-state/*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "lambda:GetEventSourceMapping",
      "lambda:DeleteEventSourceMapping",
      "lambda:CreateEventSourceMapping"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "logs:DescribeLogGroups",
    "Resource": "arn:aws:logs:us-west-2:048300154415:log-group::log-stream:",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": [
      "kinesisanalytics:ListApplications",
      "kinesisanalytics:DiscoverInputSchema"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "cloudwatch:*",
    "Resource": [
      "arn:aws:cloudwatch:us-west-2:048300154415:alarm:iad*",
      "arn:aws:cloudwatch:us-west-2:048300154415:alarm:048300154415/iad*"
    ],
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "iam:*",
    "Resource": [
      "arn:aws:iam::048300154415:role/iad_*",
      "arn:aws:iam::048300154415:policy/iad_*"
    ],
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "kinesisanalytics:*",
    "Resource": "arn:aws:kinesisanalytics:us-west-2:048300154415:application/iad*",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "kinesis:*",
    "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/iad_*_notification_stream",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "lambda:*",
    "Resource": [
      "arn:aws:lambda:us-west-2:048300154415:function:iad_notifier*",
      "arn:aws:lambda:us-west-2:048300154415:function:iad_logentries_relay*"
    ],
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "logs:*",
    "Resource": [
      "arn:aws:logs:us-west-2:048300154415:log-group:iad*:log-stream:*",
      "arn:aws:logs:us-west-2:048300154415:log-group:iad*:log-stream:"
    ],
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "SNS:*",
    "Resource": "arn:aws:sns:us-west-2:048300154415:iad-*-cloudwatch-notifications",
    "Effect": "Allow",
    "Sid": ""
  },
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::iad-*",
      "arn:aws:s3:::ct-iad-*"
    ],
    "Effect": "Allow",
    "Sid": ""
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:DescribeStream",
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": [
        "arn:aws:kinesis:us-west-2:048300154415:stream/iad_production_notification_stream"
      ],
      "Effect": "Allow",
      "Sid": "WriteOutputKinesis"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:Get*"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/beacon_s3_firehose-production"
      ],
      "Effect": "Allow",
      "Sid": "ReadInputFirehose"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:DescribeStream",
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": [
      "arn:aws:kinesis:us-west-2:048300154415:stream/iad_production_notification_stream"
    ],
    "Effect": "Allow",
    "Sid": "WriteOutputKinesis"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:Get*"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/beacon_s3_firehose-production"
    ],
    "Effect": "Allow",
    "Sid": "ReadInputFirehose"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:DescribeStream",
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": [
        "arn:aws:kinesis:us-west-2:048300154415:stream/iad_staging_notification_stream"
      ],
      "Effect": "Allow",
      "Sid": "WriteOutputKinesis"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:Get*"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/beacon_s3_firehose-staging"
      ],
      "Effect": "Allow",
      "Sid": "ReadInputFirehose"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:DescribeStream",
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": [
      "arn:aws:kinesis:us-west-2:048300154415:stream/iad_staging_notification_stream"
    ],
    "Effect": "Allow",
    "Sid": "WriteOutputKinesis"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:Get*"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/beacon_s3_firehose-staging"
    ],
    "Effect": "Allow",
    "Sid": "ReadInputFirehose"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:UpdateEventSourceMapping",
        "lambda:ListFunctions",
        "lambda:ListVersionsByFunction",
        "lambda:GetEventSourceMapping",
        "lambda:GetFunction",
        "logs:DescribeLogStreams",
        "lambda:ListAliases",
        "lambda:UpdateFunctionConfiguration",
        "lambda:GetAccountSettings",
        "lambda:GetFunctionConfiguration",
        "lambda:CreateEventSourceMapping",
        "logs:CreateLogGroup",
        "logs:PutLogEvents",
        "logs:CreateLogStream",
        "iam:CreateServiceLinkedRole",
        "lambda:ListTags",
        "lambda:ListEventSourceMappings",
        "lambda:DeleteEventSourceMapping",
        "lambda:GetAlias",
        "lambda:GetPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "s3:GetObject",
      "Resource": [
        "arn:aws:s3:::cs.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*",
        "arn:aws:s3:::integrations.s3.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::cs.clicktripz.com",
        "arn:aws:s3:::cs.clicktripz.com/*",
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*",
        "arn:aws:s3:::integrations.s3.clicktripz.com",
        "arn:aws:s3:::integrations.s3.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": "lambda:*",
      "Resource": "arn:aws:lambda:us-west-2::function:*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "lambda:InvokeFunction",
      "Resource": "arn:aws:lambda:us-west-2::function:cti_*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:UpdateEventSourceMapping",
      "lambda:ListFunctions",
      "lambda:ListVersionsByFunction",
      "lambda:GetEventSourceMapping",
      "lambda:GetFunction",
      "logs:DescribeLogStreams",
      "lambda:ListAliases",
      "lambda:UpdateFunctionConfiguration",
      "lambda:GetAccountSettings",
      "lambda:GetFunctionConfiguration",
      "lambda:CreateEventSourceMapping",
      "logs:CreateLogGroup",
      "logs:PutLogEvents",
      "logs:CreateLogStream",
      "iam:CreateServiceLinkedRole",
      "lambda:ListTags",
      "lambda:ListEventSourceMappings",
      "lambda:DeleteEventSourceMapping",
      "lambda:GetAlias",
      "lambda:GetPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "s3:GetObject",
    "Resource": [
      "arn:aws:s3:::cs.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*",
      "arn:aws:s3:::integrations.s3.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::cs.clicktripz.com",
      "arn:aws:s3:::cs.clicktripz.com/*",
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*",
      "arn:aws:s3:::integrations.s3.clicktripz.com",
      "arn:aws:s3:::integrations.s3.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": "lambda:*",
    "Resource": "arn:aws:lambda:us-west-2::function:*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "lambda:InvokeFunction",
    "Resource": "arn:aws:lambda:us-west-2::function:cti_*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudfront:CreateInvalidation",
        "cloudfront:Get*",
        "cloudfront:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "CloudfrontAllowInvalidation"
    },
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:List*",
        "s3:Get*",
        "s3:Put*"
      ],
      "Resource": [
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com*",
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
        "arn:aws:s3:::integrations.s3.clicktripz.com*",
        "arn:aws:s3:::integrations.s3.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:Get*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "es:List*",
        "es:Get*",
        "es:Describe*"
      ],
      "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:*"
      ],
      "Resource": [
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/ipo-client",
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/ipo-server"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudfront:CreateInvalidation",
      "cloudfront:Get*",
      "cloudfront:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "CloudfrontAllowInvalidation"
  },
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:List*",
      "s3:Get*",
      "s3:Put*"
    ],
    "Resource": [
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com*",
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
      "arn:aws:s3:::integrations.s3.clicktripz.com*",
      "arn:aws:s3:::integrations.s3.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:Get*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "es:List*",
      "es:Get*",
      "es:Describe*"
    ],
    "Resource": "arn:aws:es:us-west-2:048300154415:domain/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:*"
    ],
    "Resource": [
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/ipo-client",
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/ipo-server"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws:iam::048300154415:role/k8s-iam-*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": "sts:AssumeRole",
    "Resource": "arn:aws:iam::048300154415:role/k8s-iam-*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "kms:Decrypt",
      "Resource": "arn:aws:kms:*:*:key/*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": "kms:Decrypt",
    "Resource": "arn:aws:kms:*:*:key/*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:GetFunctionConfiguration",
        "lambda:UpdateFunctionConfiguration"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:GetFunctionConfiguration",
      "lambda:UpdateFunctionConfiguration"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ecs:RunTask",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "ecs:RunTask",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:TagResource",
        "lambda:ListVersionsByFunction",
        "lambda:GetLayerVersion",
        "lambda:PublishLayerVersion",
        "lambda:InvokeAsync",
        "lambda:GetAccountSettings",
        "lambda:GetFunctionConfiguration",
        "lambda:CreateEventSourceMapping",
        "lambda:GetLayerVersionPolicy",
        "lambda:UntagResource",
        "lambda:PutFunctionConcurrency",
        "lambda:ListTags",
        "lambda:DeleteLayerVersion",
        "lambda:ListLayerVersions",
        "lambda:ListLayers",
        "lambda:DeleteFunction",
        "lambda:GetAlias",
        "lambda:UpdateEventSourceMapping",
        "lambda:ListFunctions",
        "lambda:GetEventSourceMapping",
        "lambda:InvokeFunction",
        "lambda:GetFunction",
        "lambda:ListAliases",
        "lambda:UpdateFunctionConfiguration",
        "lambda:UpdateAlias",
        "lambda:UpdateFunctionCode",
        "lambda:ListEventSourceMappings",
        "lambda:DeleteAlias",
        "lambda:PublishVersion",
        "lambda:DeleteFunctionConcurrency",
        "lambda:DeleteEventSourceMapping",
        "lambda:GetPolicy",
        "lambda:CreateAlias"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:TagResource",
      "lambda:ListVersionsByFunction",
      "lambda:GetLayerVersion",
      "lambda:PublishLayerVersion",
      "lambda:InvokeAsync",
      "lambda:GetAccountSettings",
      "lambda:GetFunctionConfiguration",
      "lambda:CreateEventSourceMapping",
      "lambda:GetLayerVersionPolicy",
      "lambda:UntagResource",
      "lambda:PutFunctionConcurrency",
      "lambda:ListTags",
      "lambda:DeleteLayerVersion",
      "lambda:ListLayerVersions",
      "lambda:ListLayers",
      "lambda:DeleteFunction",
      "lambda:GetAlias",
      "lambda:UpdateEventSourceMapping",
      "lambda:ListFunctions",
      "lambda:GetEventSourceMapping",
      "lambda:InvokeFunction",
      "lambda:GetFunction",
      "lambda:ListAliases",
      "lambda:UpdateFunctionConfiguration",
      "lambda:UpdateAlias",
      "lambda:UpdateFunctionCode",
      "lambda:ListEventSourceMappings",
      "lambda:DeleteAlias",
      "lambda:PublishVersion",
      "lambda:DeleteFunctionConcurrency",
      "lambda:DeleteEventSourceMapping",
      "lambda:GetPolicy",
      "lambda:CreateAlias"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetJobs",
        "glue:StartJobRun",
        "glue:GetJobRun",
        "glue:GetJobRuns",
        "glue:GetJob",
        "glue:StartTrigger"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetJobs",
      "glue:StartJobRun",
      "glue:GetJobRun",
      "glue:GetJobRuns",
      "glue:GetJob",
      "glue:StartTrigger"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListAllMyBuckets",
        "s3:HeadBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::ct-logstash-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListAllMyBuckets",
      "s3:HeadBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::ct-logstash-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-model-repo/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint",
        "ecs:UpdateService",
        "iam:PassRole",
        "ecs:Describe*",
        "ecs:RegisterTaskDefinition",
        "ecs:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:s3:::ct-analytics-scratch",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ct-analytics-scratch/*",
        "arn:aws:s3:::ml-scratch/*",
        "arn:aws:s3:::ml-model-repo/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
        "arn:aws:s3:::ct-credentials/jwt/campaigns",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only",
        "arn:aws:s3:::ct-credentials/prod_google/*",
        "arn:aws:s3:::ct-credentials/prod_google"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": [
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-model-repo/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-model-repo/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint",
      "ecs:UpdateService",
      "iam:PassRole",
      "ecs:Describe*",
      "ecs:RegisterTaskDefinition",
      "ecs:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:s3:::ct-analytics-scratch",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ct-analytics-scratch/*",
      "arn:aws:s3:::ml-scratch/*",
      "arn:aws:s3:::ml-model-repo/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
      "arn:aws:s3:::ct-credentials/jwt/campaigns",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only",
      "arn:aws:s3:::ct-credentials/prod_google/*",
      "arn:aws:s3:::ct-credentials/prod_google"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": [
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-model-repo/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint",
        "ecs:UpdateService",
        "iam:PassRole",
        "ecs:Describe*",
        "ecs:RegisterTaskDefinition",
        "ecs:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:s3:::ct-analytics-scratch",
        "arn:aws:s3:::ct-analytics-scratch/*",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-scratch/*",
        "arn:aws:s3:::ml-model-repo/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
        "arn:aws:s3:::ct-credentials/jwt/campaigns",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
        "arn:aws:s3:::ct-credentials/prod_postgres_read_only",
        "arn:aws:s3:::ct-credentials/prod_google/*",
        "arn:aws:s3:::ct-credentials/prod_google"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    }
  ]
}
[
  {
    "Action": [
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint",
      "ecs:UpdateService",
      "iam:PassRole",
      "ecs:Describe*",
      "ecs:RegisterTaskDefinition",
      "ecs:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:s3:::ct-analytics-scratch",
      "arn:aws:s3:::ct-analytics-scratch/*",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-scratch/*",
      "arn:aws:s3:::ml-model-repo/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
      "arn:aws:s3:::ct-credentials/jwt/campaigns",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only/*",
      "arn:aws:s3:::ct-credentials/prod_postgres_read_only",
      "arn:aws:s3:::ct-credentials/prod_google/*",
      "arn:aws:s3:::ct-credentials/prod_google"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:GetRole",
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::048300154415:role/ml-container@SHARED.STAGING.ML",
        "arn:aws:iam::048300154415:role/ml-container@SHARED.PROD.ML"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "iam:GetRole",
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::048300154415:role/ml-container@SHARED.STAGING.ML",
      "arn:aws:iam::048300154415:role/ml-container@SHARED.PROD.ML"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "kms:ListKeys",
        "kms:GenerateRandom",
        "s3:ListAllMyBuckets",
        "kms:ListAliases",
        "firehose:CreateDeliveryStream",
        "kms:CreateKey",
        "firehose:ListDeliveryStreams",
        "s3:HeadBucket",
        "athena:*",
        "glue:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "kms:*",
      "Resource": [
        "arn:aws:kms:*:*:alias/*",
        "arn:aws:kms:*:*:key/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::*/*",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "firehose:*",
      "Resource": "arn:aws:firehose:*:*:deliverystream/ct-prod-etl-s3",
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": "sqs:*",
      "Resource": "arn:aws:sqs:*:*:*ddu_clicks.fifo",
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    }
  ]
}
[
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "kms:ListKeys",
      "kms:GenerateRandom",
      "s3:ListAllMyBuckets",
      "kms:ListAliases",
      "firehose:CreateDeliveryStream",
      "kms:CreateKey",
      "firehose:ListDeliveryStreams",
      "s3:HeadBucket",
      "athena:*",
      "glue:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "kms:*",
    "Resource": [
      "arn:aws:kms:*:*:alias/*",
      "arn:aws:kms:*:*:key/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": "s3:*",
    "Resource": "arn:aws:s3:::*/*",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "firehose:*",
    "Resource": "arn:aws:firehose:*:*:deliverystream/ct-prod-etl-s3",
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": "sqs:*",
    "Resource": "arn:aws:sqs:*:*:*ddu_clicks.fifo",
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:prod_manifest_loader*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:PutMetricData",
        "cloudwatch:SetAlarmState"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:prod_manifest_loader*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:SetAlarmState"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:prod_etl_raw_metrics"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy",
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:prod_etl_raw_metrics"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::ct-prod-redshift-metadata/*",
        "arn:aws:s3:::ct-prod-redshift-metadata"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::ct-prod-redshift-metadata/*",
      "arn:aws:s3:::ct-prod-redshift-metadata"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:DeliveryStreamStatus",
        "firehose:PutRecordBatch",
        "firehose:PutRecord"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-visits-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-pageviews-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-city-sessions-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-user-events-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod-user-integration-event-s3"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:PutRecords",
        "kinesis:PutRecord"
      ],
      "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:DeliveryStreamStatus",
      "firehose:PutRecordBatch",
      "firehose:PutRecord"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-visits-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-pageviews-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-city-sessions-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-user-events-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod-user-integration-event-s3"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:PutRecords",
      "kinesis:PutRecord"
    ],
    "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:PutRecord",
        "kinesis:PutRecords",
        "kinesis:GetShardIterator",
        "kinesis:GetRecords",
        "kinesis:DescribeStream",
        "kinesis:ListTagsForStream"
      ],
      "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/prod-experiment-assignment-log-stream",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:PutRecord",
      "kinesis:PutRecords",
      "kinesis:GetShardIterator",
      "kinesis:GetRecords",
      "kinesis:DescribeStream",
      "kinesis:ListTagsForStream"
    ],
    "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/prod-experiment-assignment-log-stream",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "swf:*"
      ],
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "swf:*"
    ],
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sns:Publish",
      "Resource": "arn:aws:sns:us-west-2:048300154415:prod-config-provider",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "sns:Publish",
    "Resource": "arn:aws:sns:us-west-2:048300154415:prod-config-provider",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:RunTask"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:task-definition/shared_swf_worker_medium_priority"
      ],
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-SWF"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ecs:RunTask"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:task-definition/shared_swf_worker_medium_priority"
    ],
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-SWF"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:us-west-2:048300154415:function:ct_prod_etl_sqs_loader"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:us-west-2:048300154415:function:ct_prod_etl_sqs_loader"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:DescribeClusters"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "redshift:DescribeClusters"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ],
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow"
    },
    {
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::ct-credentials",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/prod_redshift_read_only",
        "arn:aws:s3:::ct-credentials/prod_redshift_read_only/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListAllMyBuckets",
      "s3:GetBucketLocation"
    ],
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow"
  },
  {
    "Action": "s3:ListBucket",
    "Resource": "arn:aws:s3:::ct-credentials",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/prod_redshift_read_only",
      "arn:aws:s3:::ct-credentials/prod_redshift_read_only/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::*.audit.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::*.audit.clicktripz.com/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::*.audit.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::*.audit.clicktripz.com/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:UpdateTimeToLive",
        "dynamodb:PutItem",
        "dynamodb:DeleteItem",
        "dynamodb:RestoreTableToPointInTime",
        "dynamodb:Scan",
        "dynamodb:Query",
        "dynamodb:UpdateItem",
        "dynamodb:CreateBackup",
        "dynamodb:UpdateContinuousBackups",
        "dynamodb:CreateTable",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:UpdateTable"
      ],
      "Resource": [
        "arn:aws:dynamodb:us-west-2:048300154415:table/prod_rte_advertiserUserProfile",
        "arn:aws:dynamodb:us-west-2:048300154415:table/prod_rte_publisherGroupUserProfile",
        "arn:aws:dynamodb:eu-central-1:048300154415:table/prod_*",
        "arn:aws:dynamodb:us-west-2:048300154415:table/prod_*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "dynamodb:DescribeReservedCapacityOfferings",
        "dynamodb:ListGlobalTables",
        "dynamodb:ListTables",
        "dynamodb:DescribeReservedCapacity",
        "dynamodb:ListBackups",
        "dynamodb:ListTagsOfResource",
        "dynamodb:DescribeTimeToLive",
        "dynamodb:DescribeLimits"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:BatchGetItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:UpdateTimeToLive",
      "dynamodb:PutItem",
      "dynamodb:DeleteItem",
      "dynamodb:RestoreTableToPointInTime",
      "dynamodb:Scan",
      "dynamodb:Query",
      "dynamodb:UpdateItem",
      "dynamodb:CreateBackup",
      "dynamodb:UpdateContinuousBackups",
      "dynamodb:CreateTable",
      "dynamodb:DescribeTable",
      "dynamodb:GetItem",
      "dynamodb:DescribeContinuousBackups",
      "dynamodb:UpdateTable"
    ],
    "Resource": [
      "arn:aws:dynamodb:us-west-2:048300154415:table/prod_rte_advertiserUserProfile",
      "arn:aws:dynamodb:us-west-2:048300154415:table/prod_rte_publisherGroupUserProfile",
      "arn:aws:dynamodb:eu-central-1:048300154415:table/prod_*",
      "arn:aws:dynamodb:us-west-2:048300154415:table/prod_*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "dynamodb:DescribeReservedCapacityOfferings",
      "dynamodb:ListGlobalTables",
      "dynamodb:ListTables",
      "dynamodb:DescribeReservedCapacity",
      "dynamodb:ListBackups",
      "dynamodb:ListTagsOfResource",
      "dynamodb:DescribeTimeToLive",
      "dynamodb:DescribeLimits"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake/bin/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake/bin/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:DeleteMessage",
        "s3:ListBucketByTags",
        "s3:GetLifecycleConfiguration",
        "s3:GetBucketTagging",
        "s3:GetInventoryConfiguration",
        "s3:GetObjectVersionTagging",
        "s3:ListBucketVersions",
        "s3:GetBucketLogging",
        "sqs:ReceiveMessage",
        "s3:ListBucket",
        "s3:GetAccelerateConfiguration",
        "sqs:ListQueueTags",
        "s3:GetBucketPolicy",
        "s3:GetObjectVersionTorrent",
        "s3:GetObjectAcl",
        "s3:GetEncryptionConfiguration",
        "s3:GetBucketRequestPayment",
        "sqs:DeleteMessageBatch",
        "s3:GetObjectVersionAcl",
        "s3:GetObjectTagging",
        "s3:GetMetricsConfiguration",
        "s3:GetIpConfiguration",
        "s3:ListBucketMultipartUploads",
        "sqs:GetQueueUrl",
        "s3:GetBucketWebsite",
        "sqs:GetQueueAttributes",
        "s3:GetBucketVersioning",
        "s3:GetBucketAcl",
        "s3:GetBucketNotification",
        "s3:GetReplicationConfiguration",
        "s3:ListMultipartUploadParts",
        "s3:GetObject",
        "s3:GetObjectTorrent",
        "sqs:ListDeadLetterSourceQueues",
        "s3:GetBucketCORS",
        "s3:GetAnalyticsConfiguration",
        "s3:GetObjectVersionForReplication",
        "s3:GetBucketLocation",
        "s3:GetObjectVersion"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-prod-etl",
        "arn:aws:s3:::ct-dev-etl",
        "arn:aws:s3:::ct-dev-lake",
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:sqs:us-west-2:048300154415:dev_raw_message_transformer",
        "arn:aws:sqs:us-west-2:048300154415:prod_raw_message_transformer",
        "arn:aws:sqs:us-west-2:048300154415:prod_raw_message_transformer_backfill"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "s3:ListAllMyBuckets",
        "s3:HeadBucket"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:PutEncryptionConfiguration",
        "s3:DeleteBucketWebsite",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:DeleteObjectTagging",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:DeleteObjectVersionTagging",
        "s3:PutBucketCORS",
        "s3:PutInventoryConfiguration",
        "s3:PutObject",
        "s3:PutIpConfiguration",
        "s3:PutBucketNotification",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketLogging",
        "s3:ReplicateDelete"
      ],
      "Resource": [
        "arn:aws:s3:::ct-prod-lake/*",
        "arn:aws:s3:::ct-dev-lake/*",
        "arn:aws:s3:::ct-prod-lake",
        "arn:aws:s3:::ct-dev-lake"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    }
  ]
}
[
  {
    "Action": [
      "sqs:DeleteMessage",
      "s3:ListBucketByTags",
      "s3:GetLifecycleConfiguration",
      "s3:GetBucketTagging",
      "s3:GetInventoryConfiguration",
      "s3:GetObjectVersionTagging",
      "s3:ListBucketVersions",
      "s3:GetBucketLogging",
      "sqs:ReceiveMessage",
      "s3:ListBucket",
      "s3:GetAccelerateConfiguration",
      "sqs:ListQueueTags",
      "s3:GetBucketPolicy",
      "s3:GetObjectVersionTorrent",
      "s3:GetObjectAcl",
      "s3:GetEncryptionConfiguration",
      "s3:GetBucketRequestPayment",
      "sqs:DeleteMessageBatch",
      "s3:GetObjectVersionAcl",
      "s3:GetObjectTagging",
      "s3:GetMetricsConfiguration",
      "s3:GetIpConfiguration",
      "s3:ListBucketMultipartUploads",
      "sqs:GetQueueUrl",
      "s3:GetBucketWebsite",
      "sqs:GetQueueAttributes",
      "s3:GetBucketVersioning",
      "s3:GetBucketAcl",
      "s3:GetBucketNotification",
      "s3:GetReplicationConfiguration",
      "s3:ListMultipartUploadParts",
      "s3:GetObject",
      "s3:GetObjectTorrent",
      "sqs:ListDeadLetterSourceQueues",
      "s3:GetBucketCORS",
      "s3:GetAnalyticsConfiguration",
      "s3:GetObjectVersionForReplication",
      "s3:GetBucketLocation",
      "s3:GetObjectVersion"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-prod-etl",
      "arn:aws:s3:::ct-dev-etl",
      "arn:aws:s3:::ct-dev-lake",
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:sqs:us-west-2:048300154415:dev_raw_message_transformer",
      "arn:aws:sqs:us-west-2:048300154415:prod_raw_message_transformer",
      "arn:aws:sqs:us-west-2:048300154415:prod_raw_message_transformer_backfill"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "s3:ListAllMyBuckets",
      "s3:HeadBucket"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:PutEncryptionConfiguration",
      "s3:DeleteBucketWebsite",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:DeleteObjectTagging",
      "s3:PutMetricsConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutBucketCORS",
      "s3:PutInventoryConfiguration",
      "s3:PutObject",
      "s3:PutIpConfiguration",
      "s3:PutBucketNotification",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketLogging",
      "s3:ReplicateDelete"
    ],
    "Resource": [
      "arn:aws:s3:::ct-prod-lake/*",
      "arn:aws:s3:::ct-dev-lake/*",
      "arn:aws:s3:::ct-prod-lake",
      "arn:aws:s3:::ct-dev-lake"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "redshift:GetClusterCredentials",
      "Resource": "arn:aws:redshift:us-west-2:048300154415:dbuser:dev-redshift/*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "redshift:GetClusterCredentials",
      "Resource": [
        "arn:aws:redshift:us-west-2:048300154415:dbuser:staging-redshift/clicktripz-read-only",
        "arn:aws:redshift:us-west-2:048300154415:dbuser:prod-redshift/clicktripz-read-only"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "redshift:DescribeClusters",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    }
  ]
}
[
  {
    "Action": "redshift:GetClusterCredentials",
    "Resource": "arn:aws:redshift:us-west-2:048300154415:dbuser:dev-redshift/*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "redshift:GetClusterCredentials",
    "Resource": [
      "arn:aws:redshift:us-west-2:048300154415:dbuser:staging-redshift/clicktripz-read-only",
      "arn:aws:redshift:us-west-2:048300154415:dbuser:prod-redshift/clicktripz-read-only"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "redshift:DescribeClusters",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetConnections",
        "glue:GetCrawler",
        "glue:GetCrawlers",
        "glue:GetClassifiers",
        "glue:GetTableVersions",
        "glue:GetPartitions",
        "glue:GetDevEndpoint",
        "glue:GetCatalogImportStatus",
        "glue:GetConnection",
        "glue:GetTrigger",
        "glue:GetUserDefinedFunction",
        "glue:GetJobRun",
        "glue:GetUserDefinedFunctions",
        "glue:GetClassifier",
        "glue:CreateTable",
        "glue:GetJobs",
        "glue:GetTables",
        "glue:GetTriggers",
        "glue:BatchGetPartition",
        "glue:GetDatabases",
        "glue:GetTable",
        "glue:GetDatabase",
        "glue:GetPartition",
        "glue:GetDevEndpoints",
        "glue:GetDataflowGraph",
        "glue:CreateDatabase",
        "glue:GetPlan",
        "glue:GetCrawlerMetrics",
        "glue:GetJob",
        "glue:GetJobRuns"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetConnections",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetClassifiers",
      "glue:GetTableVersions",
      "glue:GetPartitions",
      "glue:GetDevEndpoint",
      "glue:GetCatalogImportStatus",
      "glue:GetConnection",
      "glue:GetTrigger",
      "glue:GetUserDefinedFunction",
      "glue:GetJobRun",
      "glue:GetUserDefinedFunctions",
      "glue:GetClassifier",
      "glue:CreateTable",
      "glue:GetJobs",
      "glue:GetTables",
      "glue:GetTriggers",
      "glue:BatchGetPartition",
      "glue:GetDatabases",
      "glue:GetTable",
      "glue:GetDatabase",
      "glue:GetPartition",
      "glue:GetDevEndpoints",
      "glue:GetDataflowGraph",
      "glue:CreateDatabase",
      "glue:GetPlan",
      "glue:GetCrawlerMetrics",
      "glue:GetJob",
      "glue:GetJobRuns"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetConnections",
        "glue:GetCrawler",
        "glue:GetCrawlers",
        "glue:GetClassifiers",
        "glue:GetTableVersions",
        "glue:GetPartitions",
        "glue:GetDevEndpoint",
        "glue:GetCatalogImportStatus",
        "glue:GetConnection",
        "glue:GetTrigger",
        "glue:GetUserDefinedFunction",
        "glue:GetJobRun",
        "glue:GetUserDefinedFunctions",
        "glue:GetClassifier",
        "glue:CreateTable",
        "glue:GetJobs",
        "glue:GetTables",
        "glue:GetTriggers",
        "glue:BatchGetPartition",
        "glue:GetDatabases",
        "glue:GetTable",
        "glue:GetDatabase",
        "glue:GetPartition",
        "glue:GetDevEndpoints",
        "glue:GetDataflowGraph",
        "glue:CreateDatabase",
        "glue:GetPlan",
        "glue:GetCrawlerMetrics",
        "glue:GetJob",
        "glue:GetJobRuns"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetConnections",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetClassifiers",
      "glue:GetTableVersions",
      "glue:GetPartitions",
      "glue:GetDevEndpoint",
      "glue:GetCatalogImportStatus",
      "glue:GetConnection",
      "glue:GetTrigger",
      "glue:GetUserDefinedFunction",
      "glue:GetJobRun",
      "glue:GetUserDefinedFunctions",
      "glue:GetClassifier",
      "glue:CreateTable",
      "glue:GetJobs",
      "glue:GetTables",
      "glue:GetTriggers",
      "glue:BatchGetPartition",
      "glue:GetDatabases",
      "glue:GetTable",
      "glue:GetDatabase",
      "glue:GetPartition",
      "glue:GetDevEndpoints",
      "glue:GetDataflowGraph",
      "glue:CreateDatabase",
      "glue:GetPlan",
      "glue:GetCrawlerMetrics",
      "glue:GetJob",
      "glue:GetJobRuns"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetConnections",
        "glue:GetCrawler",
        "glue:GetCrawlers",
        "glue:GetClassifiers",
        "glue:GetTableVersions",
        "glue:GetPartitions",
        "glue:GetDevEndpoint",
        "glue:GetCatalogImportStatus",
        "glue:GetConnection",
        "glue:GetTrigger",
        "glue:GetUserDefinedFunction",
        "glue:GetJobRun",
        "glue:GetUserDefinedFunctions",
        "glue:GetClassifier",
        "glue:CreateTable",
        "glue:GetJobs",
        "glue:GetTables",
        "glue:GetTriggers",
        "glue:BatchGetPartition",
        "glue:GetDatabases",
        "glue:GetTable",
        "glue:GetDatabase",
        "glue:GetPartition",
        "glue:GetDevEndpoints",
        "glue:GetDataflowGraph",
        "glue:CreateDatabase",
        "glue:GetPlan",
        "glue:GetCrawlerMetrics",
        "glue:GetJob",
        "glue:GetJobRuns"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetConnections",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetClassifiers",
      "glue:GetTableVersions",
      "glue:GetPartitions",
      "glue:GetDevEndpoint",
      "glue:GetCatalogImportStatus",
      "glue:GetConnection",
      "glue:GetTrigger",
      "glue:GetUserDefinedFunction",
      "glue:GetJobRun",
      "glue:GetUserDefinedFunctions",
      "glue:GetClassifier",
      "glue:CreateTable",
      "glue:GetJobs",
      "glue:GetTables",
      "glue:GetTriggers",
      "glue:BatchGetPartition",
      "glue:GetDatabases",
      "glue:GetTable",
      "glue:GetDatabase",
      "glue:GetPartition",
      "glue:GetDevEndpoints",
      "glue:GetDataflowGraph",
      "glue:CreateDatabase",
      "glue:GetPlan",
      "glue:GetCrawlerMetrics",
      "glue:GetJob",
      "glue:GetJobRuns"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-public-dmz-ftp/*"
      ],
      "Effect": "Allow",
      "Sid": "ReadWriteS3Buckets"
    }
  ]
}
[
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-public-dmz-ftp/*"
    ],
    "Effect": "Allow",
    "Sid": "ReadWriteS3Buckets"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": [
        "arn:aws:s3:::ct-public-dmz-ftp",
        "arn:aws:s3:::ct-public-dmz-ftp/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": [
      "arn:aws:s3:::ct-public-dmz-ftp",
      "arn:aws:s3:::ct-public-dmz-ftp/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:*"
      ],
      "Resource": [
        "arn:aws:s3:::database.clicktripz.com/dev/*"
      ],
      "Effect": "Allow",
      "Sid": "Stmt1498660276000"
    }
  ]
}
[
  {
    "Action": [
      "s3:*"
    ],
    "Resource": [
      "arn:aws:s3:::database.clicktripz.com/dev/*"
    ],
    "Effect": "Allow",
    "Sid": "Stmt1498660276000"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:Describe*",
        "autoscaling:Describe*",
        "cloudwatch:DeleteAlarms",
        "elasticloadbalancing:Describe*",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*",
        "cloudwatch:ListMetrics",
        "elasticache:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "firehose:PutRecordBatch",
        "s3:ListBucket",
        "s3:DeleteObject",
        "s3:PutObjectAcl",
        "s3:HeadObject"
      ],
      "Resource": [
        "arn:aws:s3:::images.clicktripz.com",
        "arn:aws:s3:::ct-dev-unit-archive",
        "arn:aws:s3:::reports.clicktripz.com",
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
        "arn:aws:s3:::ct-dev-redshift-metadata",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
        "arn:aws:s3:::ct-dev-etl-s3",
        "arn:aws:s3:::data.clicktripz.com",
        "arn:aws:s3:::files.clicktripz.com",
        "arn:aws:s3:::files.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-unit-archive/*",
        "arn:aws:s3:::reports.clicktripz.com/*",
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-redshift-metadata/*",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-etl-s3/*",
        "arn:aws:s3:::data.clicktripz.com/*",
        "arn:aws:s3:::access-logs.www.clicktripz.com/dev/*",
        "arn:aws:s3:::access-logs.www.clicktripz.com/dev/",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev_auction_metrics_stream",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev_pub_targeting_stream",
        "arn:aws:s3:::ct-admin-page-job-logs/staging/",
        "arn:aws:s3:::ct-admin-page-job-logs/staging/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket",
        "s3:HeadObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ct-dev-archive/*",
        "arn:aws:s3:::us-west-2.elasticmapreduce/*",
        "arn:aws:s3:::ct-db-master-backup/*",
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ct-dev-archive",
        "arn:aws:s3:::us-west-2.elasticmapreduce",
        "arn:aws:s3:::ct-db-master-backup"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
        "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": [
        "arn:aws:s3:::files.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-unit-archive/*",
        "arn:aws:s3:::reports.clicktripz.com/*",
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-redshift-metadata/*",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
        "arn:aws:s3:::ct-dev-etl-s3/*",
        "arn:aws:s3:::images.clicktripz.com",
        "arn:aws:s3:::ct-dev-unit-archive",
        "arn:aws:s3:::reports.clicktripz.com",
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
        "arn:aws:s3:::ct-dev-redshift-metadata",
        "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
        "arn:aws:s3:::ct-dev-etl-s3"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": "s3:ListAllMyBuckets",
      "Resource": [
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ct-dev-archive/*",
        "arn:aws:s3:::us-west-2.elasticmapreduce/*",
        "arn:aws:s3:::ct-db-master-backup/*",
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ct-dev-archive",
        "arn:aws:s3:::us-west-2.elasticmapreduce",
        "arn:aws:s3:::ct-db-master-backup"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    },
    {
      "Action": "swf:*",
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev*",
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:ListMultipartUploads"
      ],
      "Resource": [
        "arn:aws:s3:::access-logs.www.clicktripz.com",
        "arn:aws:s3:::ct-admin-page-job-logs"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor7"
    }
  ]
}
[
  {
    "Action": [
      "ec2:Describe*",
      "autoscaling:Describe*",
      "cloudwatch:DeleteAlarms",
      "elasticloadbalancing:Describe*",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:Describe*",
      "cloudwatch:ListMetrics",
      "elasticache:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "firehose:PutRecordBatch",
      "s3:ListBucket",
      "s3:DeleteObject",
      "s3:PutObjectAcl",
      "s3:HeadObject"
    ],
    "Resource": [
      "arn:aws:s3:::images.clicktripz.com",
      "arn:aws:s3:::ct-dev-unit-archive",
      "arn:aws:s3:::reports.clicktripz.com",
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
      "arn:aws:s3:::ct-dev-redshift-metadata",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
      "arn:aws:s3:::ct-dev-etl-s3",
      "arn:aws:s3:::data.clicktripz.com",
      "arn:aws:s3:::files.clicktripz.com",
      "arn:aws:s3:::files.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-unit-archive/*",
      "arn:aws:s3:::reports.clicktripz.com/*",
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-redshift-metadata/*",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-etl-s3/*",
      "arn:aws:s3:::data.clicktripz.com/*",
      "arn:aws:s3:::access-logs.www.clicktripz.com/dev/*",
      "arn:aws:s3:::access-logs.www.clicktripz.com/dev/",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-dev-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev_auction_metrics_stream",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/dev_pub_targeting_stream",
      "arn:aws:s3:::ct-admin-page-job-logs/staging/",
      "arn:aws:s3:::ct-admin-page-job-logs/staging/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket",
      "s3:HeadObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ct-dev-archive/*",
      "arn:aws:s3:::us-west-2.elasticmapreduce/*",
      "arn:aws:s3:::ct-db-master-backup/*",
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ct-dev-archive",
      "arn:aws:s3:::us-west-2.elasticmapreduce",
      "arn:aws:s3:::ct-db-master-backup"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com",
      "arn:aws:s3:::integrations.s3.dev.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": [
      "arn:aws:s3:::files.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-unit-archive/*",
      "arn:aws:s3:::reports.clicktripz.com/*",
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-redshift-metadata/*",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com/*",
      "arn:aws:s3:::ct-dev-etl-s3/*",
      "arn:aws:s3:::images.clicktripz.com",
      "arn:aws:s3:::ct-dev-unit-archive",
      "arn:aws:s3:::reports.clicktripz.com",
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
      "arn:aws:s3:::ct-dev-redshift-metadata",
      "arn:aws:s3:::dev-admin-file-uploads.clicktripz.com",
      "arn:aws:s3:::ct-dev-etl-s3"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": "s3:ListAllMyBuckets",
    "Resource": [
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ct-dev-archive/*",
      "arn:aws:s3:::us-west-2.elasticmapreduce/*",
      "arn:aws:s3:::ct-db-master-backup/*",
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ct-dev-archive",
      "arn:aws:s3:::us-west-2.elasticmapreduce",
      "arn:aws:s3:::ct-db-master-backup"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  },
  {
    "Action": "swf:*",
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev*",
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:ListMultipartUploads"
    ],
    "Resource": [
      "arn:aws:s3:::access-logs.www.clicktripz.com",
      "arn:aws:s3:::ct-admin-page-job-logs"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor7"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:PutRecord",
        "firehose:PutRecord",
        "kinesis:PutRecords",
        "ecs:RegisterContainerInstance",
        "firehose:PutRecordBatch",
        "ecs:Submit*",
        "ecs:DeregisterContainerInstance"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:cluster/COMPARISON-PROD",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/*",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-*",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod_auction_metrics_stream",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod-pub-targeting-stream",
        "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "ecs:DiscoverPollEndpoint",
        "cloudwatch:PutMetricData",
        "cloudwatch:DeleteAlarms",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetAuthorizationToken",
        "ecr:ListImages",
        "ecs:Poll",
        "cloudwatch:PutMetricAlarm",
        "autoscaling:CompleteLifecycleAction",
        "ses:*",
        "ecr:BatchGetImage",
        "ecr:DescribeImages",
        "ecr:DescribeRepositories",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetRepositoryPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "ecs:StartTelemetrySession",
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "ecs:Describe*",
        "ecs:List*"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/COMPARISON-PROD",
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "sqs:*",
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:gravedigger*",
        "arn:aws:sqs:us-west-2:048300154415:prod_*",
        "arn:aws:sqs:eu-central-1:048300154415:gravedigger*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::integrations.s3.clicktripz.com/*",
        "arn:aws:s3:::ct-prod-redshift-metadata/*",
        "arn:aws:s3:::files.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::reports.clicktripz.com/*",
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::ct-prod-archive/*",
        "arn:aws:s3:::us-west-2.elasticmapreduce/*",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::data.clicktripz.com/*",
        "arn:aws:s3:::integrations.s3.clicktripz.com",
        "arn:aws:s3:::ct-prod-redshift-metadata",
        "arn:aws:s3:::files.clicktripz.com",
        "arn:aws:s3:::images.clicktripz.com",
        "arn:aws:s3:::reports.clicktripz.com",
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com",
        "arn:aws:s3:::ct-prod-archive",
        "arn:aws:s3:::us-west-2.elasticmapreduce",
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::data.clicktripz.com",
        "arn:aws:s3:::access-logs.www.clicktripz.com/prod/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    },
    {
      "Action": "swf:*",
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:DeliveryStreamStatus"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/*",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-*",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod_auction_metrics_stream"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor7"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:ListMultipartUploads"
      ],
      "Resource": "arn:aws:s3:::access-logs.www.clicktripz.com",
      "Effect": "Allow",
      "Sid": "VisualEditor8"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:PutRecord",
      "firehose:PutRecord",
      "kinesis:PutRecords",
      "ecs:RegisterContainerInstance",
      "firehose:PutRecordBatch",
      "ecs:Submit*",
      "ecs:DeregisterContainerInstance"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:cluster/COMPARISON-PROD",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/*",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-*",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod_auction_metrics_stream",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod-pub-targeting-stream",
      "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "ecs:DiscoverPollEndpoint",
      "cloudwatch:PutMetricData",
      "cloudwatch:DeleteAlarms",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetAuthorizationToken",
      "ecr:ListImages",
      "ecs:Poll",
      "cloudwatch:PutMetricAlarm",
      "autoscaling:CompleteLifecycleAction",
      "ses:*",
      "ecr:BatchGetImage",
      "ecr:DescribeImages",
      "ecr:DescribeRepositories",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetRepositoryPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "ecs:StartTelemetrySession",
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "ecs:Describe*",
      "ecs:List*"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/COMPARISON-PROD",
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "sqs:*",
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:gravedigger*",
      "arn:aws:sqs:us-west-2:048300154415:prod_*",
      "arn:aws:sqs:eu-central-1:048300154415:gravedigger*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::integrations.s3.clicktripz.com/*",
      "arn:aws:s3:::ct-prod-redshift-metadata/*",
      "arn:aws:s3:::files.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::reports.clicktripz.com/*",
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::ct-prod-archive/*",
      "arn:aws:s3:::us-west-2.elasticmapreduce/*",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::data.clicktripz.com/*",
      "arn:aws:s3:::integrations.s3.clicktripz.com",
      "arn:aws:s3:::ct-prod-redshift-metadata",
      "arn:aws:s3:::files.clicktripz.com",
      "arn:aws:s3:::images.clicktripz.com",
      "arn:aws:s3:::reports.clicktripz.com",
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com",
      "arn:aws:s3:::ct-prod-archive",
      "arn:aws:s3:::us-west-2.elasticmapreduce",
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::data.clicktripz.com",
      "arn:aws:s3:::access-logs.www.clicktripz.com/prod/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  },
  {
    "Action": "swf:*",
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:DeliveryStreamStatus"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/*",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-*",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/unstructured-location-log-data-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/prod_auction_metrics_stream"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor7"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:ListMultipartUploads"
    ],
    "Resource": "arn:aws:s3:::access-logs.www.clicktripz.com",
    "Effect": "Allow",
    "Sid": "VisualEditor8"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-db-master-backup",
        "arn:aws:s3:::ct-db-master-backup/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-db-master-backup",
      "arn:aws:s3:::ct-db-master-backup/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:Describe*",
        "ecs:List*",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/default",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecs:StartTelemetrySession"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint",
        "ecr:GetRepositoryPolicy",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecr:DescribeImages"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DeregisterContainerInstance",
      "ecs:Describe*",
      "ecs:List*",
      "ecs:RegisterContainerInstance",
      "ecs:Submit*"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/default",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecs:StartTelemetrySession"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint",
      "ecr:GetRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:DescribeImages"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:CreateRepository",
        "sagemaker:*",
        "ecr:GetAuthorizationToken"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "s3:PutAnalyticsConfiguration",
        "s3:GetObjectVersionTagging",
        "s3:CreateBucket",
        "s3:ReplicateObject",
        "s3:GetObjectAcl",
        "s3:DeleteBucketWebsite",
        "s3:PutLifecycleConfiguration",
        "s3:GetObjectVersionAcl",
        "s3:PutObjectTagging",
        "s3:DeleteObject",
        "s3:DeleteObjectTagging",
        "s3:GetBucketWebsite",
        "s3:PutReplicationConfiguration",
        "s3:DeleteObjectVersionTagging",
        "s3:GetBucketNotification",
        "s3:PutBucketCORS",
        "s3:GetReplicationConfiguration",
        "s3:ListMultipartUploadParts",
        "s3:PutObject",
        "s3:GetObject",
        "s3:PutBucketNotification",
        "s3:PutBucketLogging",
        "s3:GetAnalyticsConfiguration",
        "s3:GetObjectVersionForReplication",
        "s3:GetLifecycleConfiguration",
        "s3:ListBucketByTags",
        "s3:GetInventoryConfiguration",
        "s3:GetBucketTagging",
        "s3:PutAccelerateConfiguration",
        "s3:DeleteObjectVersion",
        "s3:GetBucketLogging",
        "s3:ListBucketVersions",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:ListBucket",
        "s3:GetAccelerateConfiguration",
        "s3:GetBucketPolicy",
        "s3:GetObjectVersionTorrent",
        "s3:AbortMultipartUpload",
        "s3:PutBucketTagging",
        "s3:GetBucketRequestPayment",
        "s3:GetObjectTagging",
        "s3:GetMetricsConfiguration",
        "s3:DeleteBucket",
        "s3:PutBucketVersioning",
        "s3:ListBucketMultipartUploads",
        "s3:PutMetricsConfiguration",
        "s3:PutObjectVersionTagging",
        "s3:GetBucketVersioning",
        "s3:GetBucketAcl",
        "s3:PutInventoryConfiguration",
        "s3:GetObjectTorrent",
        "s3:PutBucketWebsite",
        "s3:PutBucketRequestPayment",
        "s3:GetBucketCORS",
        "s3:GetBucketLocation",
        "s3:ReplicateDelete",
        "s3:GetObjectVersion"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "ecr:*",
      "Resource": [
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning-jupyter",
        "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/jupyterhub"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:PutIpConfiguration",
        "s3:ListAllMyBuckets",
        "s3:HeadBucket",
        "s3:ListObjects",
        "s3:GetIpConfiguration"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ct-credentials/*",
        "arn:aws:s3:::ml-scratch/*"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    }
  ]
}
[
  {
    "Action": [
      "ecr:CreateRepository",
      "sagemaker:*",
      "ecr:GetAuthorizationToken"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "s3:PutAnalyticsConfiguration",
      "s3:GetObjectVersionTagging",
      "s3:CreateBucket",
      "s3:ReplicateObject",
      "s3:GetObjectAcl",
      "s3:DeleteBucketWebsite",
      "s3:PutLifecycleConfiguration",
      "s3:GetObjectVersionAcl",
      "s3:PutObjectTagging",
      "s3:DeleteObject",
      "s3:DeleteObjectTagging",
      "s3:GetBucketWebsite",
      "s3:PutReplicationConfiguration",
      "s3:DeleteObjectVersionTagging",
      "s3:GetBucketNotification",
      "s3:PutBucketCORS",
      "s3:GetReplicationConfiguration",
      "s3:ListMultipartUploadParts",
      "s3:PutObject",
      "s3:GetObject",
      "s3:PutBucketNotification",
      "s3:PutBucketLogging",
      "s3:GetAnalyticsConfiguration",
      "s3:GetObjectVersionForReplication",
      "s3:GetLifecycleConfiguration",
      "s3:ListBucketByTags",
      "s3:GetInventoryConfiguration",
      "s3:GetBucketTagging",
      "s3:PutAccelerateConfiguration",
      "s3:DeleteObjectVersion",
      "s3:GetBucketLogging",
      "s3:ListBucketVersions",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:ListBucket",
      "s3:GetAccelerateConfiguration",
      "s3:GetBucketPolicy",
      "s3:GetObjectVersionTorrent",
      "s3:AbortMultipartUpload",
      "s3:PutBucketTagging",
      "s3:GetBucketRequestPayment",
      "s3:GetObjectTagging",
      "s3:GetMetricsConfiguration",
      "s3:DeleteBucket",
      "s3:PutBucketVersioning",
      "s3:ListBucketMultipartUploads",
      "s3:PutMetricsConfiguration",
      "s3:PutObjectVersionTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketAcl",
      "s3:PutInventoryConfiguration",
      "s3:GetObjectTorrent",
      "s3:PutBucketWebsite",
      "s3:PutBucketRequestPayment",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:ReplicateDelete",
      "s3:GetObjectVersion"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "ecr:*",
    "Resource": [
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/machine-learning-jupyter",
      "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/jupyterhub"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:PutIpConfiguration",
      "s3:ListAllMyBuckets",
      "s3:HeadBucket",
      "s3:ListObjects",
      "s3:GetIpConfiguration"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ct-credentials/*",
      "arn:aws:s3:::ml-scratch/*"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:Describe*",
        "ecs:List*",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-HOTEL-MAPPER",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecs:StartTelemetrySession"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::data.clicktripz.com/*",
        "arn:aws:s3:::data.clicktripz.com"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DeregisterContainerInstance",
      "ecs:Describe*",
      "ecs:List*",
      "ecs:RegisterContainerInstance",
      "ecs:Submit*"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-HOTEL-MAPPER",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecs:StartTelemetrySession"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::data.clicktripz.com/*",
      "arn:aws:s3:::data.clicktripz.com"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:PutRecords",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*",
        "ecs:DeregisterContainerInstance"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB",
        "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecr:BatchCheckLayerAvailability"
      ],
      "Resource": [
        "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-model-repo"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": "cloudwatch:PutMetricData",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "ecs:Describe*",
        "ecs:List*"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "ecs:StartTelemetrySession",
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    },
    {
      "Action": [
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint"
      ],
      "Resource": [
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-model-repo"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor5"
    },
    {
      "Action": "ecr:GetAuthorizationToken",
      "Resource": [
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ml-model-repo"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor6"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:PutRecords",
      "ecs:RegisterContainerInstance",
      "ecs:Submit*",
      "ecs:DeregisterContainerInstance"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB",
      "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecr:BatchCheckLayerAvailability"
    ],
    "Resource": [
      "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-model-repo"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": "cloudwatch:PutMetricData",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "ecs:Describe*",
      "ecs:List*"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-ML-ALB"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "ecs:StartTelemetrySession",
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  },
  {
    "Action": [
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint"
    ],
    "Resource": [
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-model-repo"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor5"
  },
  {
    "Action": "ecr:GetAuthorizationToken",
    "Resource": [
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ml-model-repo"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor6"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:Describe*",
        "ecs:List*",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-SWF",
        "arn:aws:ecs:us-west-2:048300154415:cluster/TEST-SWF-RESTART"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecs:StartTelemetrySession"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::campaign-route-mappings.clicktripz.com",
        "arn:aws:s3:::ct-prod-redshift-metadata/*",
        "arn:aws:s3:::ct-prod-redshift-metadata",
        "arn:aws:s3:::reports.clicktripz.com/*",
        "arn:aws:s3:::reports.clicktripz.com",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com",
        "arn:aws:s3:::domo-unload/*",
        "arn:aws:s3:::domo-unload",
        "arn:aws:s3:::ct-prod-etl/*",
        "arn:aws:s3:::ct-prod-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-public-dmz-ftp/*",
        "arn:aws:s3:::ct-public-dmz-ftp",
        "arn:aws:s3:::data.clicktripz.com/*",
        "arn:aws:s3:::data.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "swf:*"
      ],
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
      "Effect": "Allow"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:DeliveryStreamStatus",
        "firehose:PutRecordBatch",
        "firehose:PutRecord"
      ],
      "Resource": [
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-visits-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-pageviews-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-city-sessions-s3",
        "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-user-events-s3"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:PutRecords",
        "kinesis:PutRecord"
      ],
      "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DeregisterContainerInstance",
      "ecs:Describe*",
      "ecs:List*",
      "ecs:RegisterContainerInstance",
      "ecs:Submit*"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-PROD-SWF",
      "arn:aws:ecs:us-west-2:048300154415:cluster/TEST-SWF-RESTART"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecs:StartTelemetrySession"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::campaign-route-mappings.clicktripz.com",
      "arn:aws:s3:::ct-prod-redshift-metadata/*",
      "arn:aws:s3:::ct-prod-redshift-metadata",
      "arn:aws:s3:::reports.clicktripz.com/*",
      "arn:aws:s3:::reports.clicktripz.com",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com",
      "arn:aws:s3:::domo-unload/*",
      "arn:aws:s3:::domo-unload",
      "arn:aws:s3:::ct-prod-etl/*",
      "arn:aws:s3:::ct-prod-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-public-dmz-ftp/*",
      "arn:aws:s3:::ct-public-dmz-ftp",
      "arn:aws:s3:::data.clicktripz.com/*",
      "arn:aws:s3:::data.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "swf:*"
    ],
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/prod_swf",
    "Effect": "Allow"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:DeliveryStreamStatus",
      "firehose:PutRecordBatch",
      "firehose:PutRecord"
    ],
    "Resource": [
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-visits-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-citywide-pageviews-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-hotel-city-sessions-s3",
      "arn:aws:firehose:us-west-2:048300154415:deliverystream/ct-prod-etl-user-events-s3"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:PutRecords",
      "kinesis:PutRecord"
    ],
    "Resource": "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_production_ingress_stream",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ecs:StopTask",
      "Resource": "arn:aws:ecs:us-west-2:048300154415:task/*",
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML"
        }
      },
      "Sid": "VisualEditor0"
    },
    {
      "Action": [
        "ecs:DiscoverPollEndpoint",
        "cloudwatch:PutMetricData",
        "ecs:Describe*",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetAuthorizationToken",
        "ecs:Poll",
        "ecs:UpdateService",
        "iam:PassRole",
        "ecs:RegisterTaskDefinition",
        "ecr:BatchGetImage",
        "elasticmapreduce:*",
        "ecs:List*",
        "ecr:BatchCheckLayerAvailability"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor1"
    },
    {
      "Action": [
        "kinesis:PutRecords",
        "ecs:RegisterContainerInstance",
        "s3:ListBucket",
        "ecs:Submit*",
        "kinesis:PutRecord",
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:PutObjectVersionAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "ecs:DeregisterContainerInstance",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_staging_ingress_stream",
        "arn:aws:s3:::ml-scratch",
        "arn:aws:s3:::ml-model-repo",
        "arn:aws:s3:::ml-scratch/*",
        "arn:aws:s3:::ml-model-repo/*",
        "arn:aws:s3:::ct-analytics-scratch/*",
        "arn:aws:s3:::ct-analytics-scratch",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML-ALB"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor2"
    },
    {
      "Action": [
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
        "arn:aws:s3:::ct-credentials/jwt/campaigns",
        "arn:aws:s3:::ct-credentials/prod_google/*",
        "arn:aws:s3:::ct-credentials/prod_google"
      ],
      "Effect": "Allow",
      "Sid": "VisualEditor3"
    },
    {
      "Action": "ecs:StartTelemetrySession",
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow",
      "Sid": "VisualEditor4"
    }
  ]
}
[
  {
    "Action": "ecs:StopTask",
    "Resource": "arn:aws:ecs:us-west-2:048300154415:task/*",
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "ecs:cluster": "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML"
      }
    },
    "Sid": "VisualEditor0"
  },
  {
    "Action": [
      "ecs:DiscoverPollEndpoint",
      "cloudwatch:PutMetricData",
      "ecs:Describe*",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetAuthorizationToken",
      "ecs:Poll",
      "ecs:UpdateService",
      "iam:PassRole",
      "ecs:RegisterTaskDefinition",
      "ecr:BatchGetImage",
      "elasticmapreduce:*",
      "ecs:List*",
      "ecr:BatchCheckLayerAvailability"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor1"
  },
  {
    "Action": [
      "kinesis:PutRecords",
      "ecs:RegisterContainerInstance",
      "s3:ListBucket",
      "ecs:Submit*",
      "kinesis:PutRecord",
      "s3:PutObject",
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:PutObjectVersionAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "ecs:DeregisterContainerInstance",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:kinesis:us-west-2:048300154415:stream/beacon_staging_ingress_stream",
      "arn:aws:s3:::ml-scratch",
      "arn:aws:s3:::ml-model-repo",
      "arn:aws:s3:::ml-scratch/*",
      "arn:aws:s3:::ml-model-repo/*",
      "arn:aws:s3:::ct-analytics-scratch/*",
      "arn:aws:s3:::ct-analytics-scratch",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-ML-ALB"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor2"
  },
  {
    "Action": [
      "s3:GetObjectAcl",
      "s3:GetObject",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::ct-credentials/jwt/campaigns/*",
      "arn:aws:s3:::ct-credentials/jwt/campaigns",
      "arn:aws:s3:::ct-credentials/prod_google/*",
      "arn:aws:s3:::ct-credentials/prod_google"
    ],
    "Effect": "Allow",
    "Sid": "VisualEditor3"
  },
  {
    "Action": "ecs:StartTelemetrySession",
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow",
    "Sid": "VisualEditor4"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:Describe*",
        "ecs:List*",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
      ],
      "Resource": [
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-SWF",
        "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-HOTEL-MAPPER"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecs:StartTelemetrySession"
      ],
      "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecs:Poll",
        "ecs:DiscoverPollEndpoint"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:DeleteObject",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
        "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
        "arn:aws:s3:::dev-hotel-mappings.clicktripz.com/*",
        "arn:aws:s3:::dev-hotel-mappings.clicktripz.com",
        "arn:aws:s3:::ct-dev-redshift-metadata/*",
        "arn:aws:s3:::ct-dev-redshift-metadata",
        "arn:aws:s3:::ct-dev-etl-s3/*",
        "arn:aws:s3:::ct-dev-etl-s3",
        "arn:aws:s3:::images.clicktripz.com/*",
        "arn:aws:s3:::images.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::data.clicktripz.com/*",
        "arn:aws:s3:::data.clicktripz.com"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "swf:*"
      ],
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DeregisterContainerInstance",
      "ecs:Describe*",
      "ecs:List*",
      "ecs:RegisterContainerInstance",
      "ecs:Submit*"
    ],
    "Resource": [
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-SWF",
      "arn:aws:ecs:us-west-2:048300154415:cluster/SHARED-STAGING-HOTEL-MAPPER"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecs:StartTelemetrySession"
    ],
    "Resource": "arn:aws:ecs:us-west-2:048300154415:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ecs:Poll",
      "ecs:DiscoverPollEndpoint"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:DeleteObject",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com/*",
      "arn:aws:s3:::dev-hotel-inventory-downloads.clicktripz.com",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*",
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com",
      "arn:aws:s3:::dev-hotel-mappings.clicktripz.com/*",
      "arn:aws:s3:::dev-hotel-mappings.clicktripz.com",
      "arn:aws:s3:::ct-dev-redshift-metadata/*",
      "arn:aws:s3:::ct-dev-redshift-metadata",
      "arn:aws:s3:::ct-dev-etl-s3/*",
      "arn:aws:s3:::ct-dev-etl-s3",
      "arn:aws:s3:::images.clicktripz.com/*",
      "arn:aws:s3:::images.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::data.clicktripz.com/*",
      "arn:aws:s3:::data.clicktripz.com"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "swf:*"
    ],
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:staging_manifest_loader*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:PutMetricData",
        "cloudwatch:SetAlarmState"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:staging_manifest_loader*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:SetAlarmState"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketPolicy",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-dev-etl/*",
        "arn:aws:s3:::ct-dev-etl"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        "arn:aws:sqs:us-west-2:048300154415:staging_etl_raw_metrics"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketPolicy",
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-dev-etl/*",
      "arn:aws:s3:::ct-dev-etl"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": [
      "arn:aws:sqs:us-west-2:048300154415:staging_etl_raw_metrics"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "dynamodb:*",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": "dynamodb:*",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::ct-staging-lake/bin/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::ct-staging-lake/bin/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "swf:*",
      "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf",
      "Effect": "Allow",
      "Sid": "AllPrivDevSWF"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*"
      ],
      "Effect": "Allow",
      "Sid": "ReadWriteS3Buckets"
    },
    {
      "Action": "ecr:GetAuthorizationToken",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ECRLogin"
    },
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetRepositoryPolicy",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecr:BatchGetImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload",
        "ecr:PutImage"
      ],
      "Resource": "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/web",
      "Effect": "Allow",
      "Sid": "ClicktripzWebReadOnly"
    }
  ]
}
[
  {
    "Action": "swf:*",
    "Resource": "arn:aws:swf:us-west-2:048300154415:/domain/dev_swf",
    "Effect": "Allow",
    "Sid": "AllPrivDevSWF"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:GetObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::dev-campaign-route-mappings.clicktripz.com/*"
    ],
    "Effect": "Allow",
    "Sid": "ReadWriteS3Buckets"
  },
  {
    "Action": "ecr:GetAuthorizationToken",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ECRLogin"
  },
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:BatchGetImage",
      "ecr:InitiateLayerUpload",
      "ecr:UploadLayerPart",
      "ecr:CompleteLayerUpload",
      "ecr:PutImage"
    ],
    "Resource": "arn:aws:ecr:us-west-2:048300154415:repository/clicktripz/web",
    "Effect": "Allow",
    "Sid": "ClicktripzWebReadOnly"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "directconnect:Describe*",
        "ec2:DescribeVpnGateways",
        "ec2:DescribeTransitGateways"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "directconnect:Describe*",
      "ec2:DescribeVpnGateways",
      "ec2:DescribeTransitGateways"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glacier:DescribeJob",
        "glacier:DescribeVault",
        "glacier:GetDataRetrievalPolicy",
        "glacier:GetJobOutput",
        "glacier:GetVaultAccessPolicy",
        "glacier:GetVaultLock",
        "glacier:GetVaultNotifications",
        "glacier:ListJobs",
        "glacier:ListMultipartUploads",
        "glacier:ListParts",
        "glacier:ListTagsForVault",
        "glacier:ListVaults"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "glacier:DescribeJob",
      "glacier:DescribeVault",
      "glacier:GetDataRetrievalPolicy",
      "glacier:GetJobOutput",
      "glacier:GetVaultAccessPolicy",
      "glacier:GetVaultLock",
      "glacier:GetVaultNotifications",
      "glacier:ListJobs",
      "glacier:ListMultipartUploads",
      "glacier:ListParts",
      "glacier:ListTagsForVault",
      "glacier:ListVaults"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:*",
        "cloudformation:CreateStack",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:List*",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeImages",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcs",
        "ec2:RunInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CopyImage",
        "ec2:DeregisterImage",
        "ec2:DescribeSnapshots",
        "ec2:DeleteSnapshot",
        "ec2:CreateImage",
        "ec2:DescribeInstanceStatus",
        "ssm:GetAutomationExecution",
        "ssm:UpdateDocumentDefaultVersion",
        "ssm:CreateDocument",
        "ssm:StartAutomationExecution",
        "ssm:ListDocuments",
        "ssm:UpdateDocument",
        "ssm:DescribeDocument",
        "sns:ListTopics",
        "sns:GetTopicAttributes",
        "sns:CreateTopic",
        "iam:GetRole",
        "iam:GetInstanceProfile",
        "iam:ListRoles",
        "iam:ListInstanceProfiles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::*image-build*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish",
        "sns:setTopicAttributes"
      ],
      "Resource": "arn:aws:sns:*:*:*image-build*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ssm.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:*",
      "cloudformation:CreateStack",
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:List*",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateSecurityGroup",
      "ec2:CreateTags",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeImages",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcs",
      "ec2:RunInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CopyImage",
      "ec2:DeregisterImage",
      "ec2:DescribeSnapshots",
      "ec2:DeleteSnapshot",
      "ec2:CreateImage",
      "ec2:DescribeInstanceStatus",
      "ssm:GetAutomationExecution",
      "ssm:UpdateDocumentDefaultVersion",
      "ssm:CreateDocument",
      "ssm:StartAutomationExecution",
      "ssm:ListDocuments",
      "ssm:UpdateDocument",
      "ssm:DescribeDocument",
      "sns:ListTopics",
      "sns:GetTopicAttributes",
      "sns:CreateTopic",
      "iam:GetRole",
      "iam:GetInstanceProfile",
      "iam:ListRoles",
      "iam:ListInstanceProfiles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::*image-build*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish",
      "sns:setTopicAttributes"
    ],
    "Resource": "arn:aws:sns:*:*:*image-build*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ssm.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeInternetGateways",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeAccountAttributes",
        "ds:AuthorizeApplication",
        "ds:DescribeDirectories",
        "ds:GetDirectoryLimits",
        "ds:ListAuthorizedApplications",
        "ds:UnauthorizeApplication",
        "logs:DescribeLogStreams",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "acm:GetCertificate",
        "acm:DescribeCertificate"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeInternetGateways",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeAccountAttributes",
      "ds:AuthorizeApplication",
      "ds:DescribeDirectories",
      "ds:GetDirectoryLimits",
      "ds:ListAuthorizedApplications",
      "ds:UnauthorizeApplication",
      "logs:DescribeLogStreams",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogGroups",
      "acm:GetCertificate",
      "acm:DescribeCertificate"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sso-directory:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AWSSSODirectoryAdministrator"
    }
  ]
}
[
  {
    "Action": [
      "sso-directory:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AWSSSODirectoryAdministrator"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot1click:Describe*",
        "iot1click:Get*",
        "iot1click:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot1click:Describe*",
      "iot1click:Get*",
      "iot1click:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSubnets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "autoscaling:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:ListSubscriptions",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSubnets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:ListMetrics",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "autoscaling:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:ListSubscriptions",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:CreateBucket",
        "s3:ListBucket",
        "s3:DeleteBucket",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:GetObjectVersion",
        "s3:GetBucketPolicy",
        "s3:PutBucketPolicy",
        "s3:GetBucketAcl",
        "s3:PutBucketVersioning",
        "s3:GetBucketVersioning",
        "s3:PutLifecycleConfiguration",
        "s3:GetLifecycleConfiguration",
        "s3:DeleteBucketPolicy"
      ],
      "Resource": "arn:aws:s3:::dms-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:DeleteBucket",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject",
      "s3:GetObjectVersion",
      "s3:GetBucketPolicy",
      "s3:PutBucketPolicy",
      "s3:GetBucketAcl",
      "s3:PutBucketVersioning",
      "s3:GetBucketVersioning",
      "s3:PutLifecycleConfiguration",
      "s3:GetLifecycleConfiguration",
      "s3:DeleteBucketPolicy"
    ],
    "Resource": "arn:aws:s3:::dms-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "health:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "health:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "a4b:Send*",
        "a4b:Get*"
      ],
      "Resource": "arn:aws:a4b:*:*:gateway/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage"
      ],
      "Resource": [
        "arn:aws:sqs:*:*:dd-*",
        "arn:aws:sqs:*:*:sd-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "a4b:List*",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "a4b:Send*",
      "a4b:Get*"
    ],
    "Resource": "arn:aws:a4b:*:*:gateway/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sqs:ReceiveMessage",
      "sqs:DeleteMessage"
    ],
    "Resource": [
      "arn:aws:sqs:*:*:dd-*",
      "arn:aws:sqs:*:*:sd-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "a4b:List*",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogGroups",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elastictranscoder:Read*",
        "elastictranscoder:List*",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "iam:ListRoles",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elastictranscoder:Read*",
      "elastictranscoder:List*",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "iam:ListRoles",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:*",
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:RegisterScalableTarget",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DeleteAlarms",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "sns:Publish",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "pi:*",
      "Resource": "arn:aws:pi:*:*:metrics/rds/*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "rds.amazonaws.com",
            "rds.application-autoscaling.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:*",
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:RegisterScalableTarget",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DeleteAlarms",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "sns:Publish",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "pi:*",
    "Resource": "arn:aws:pi:*:*:metrics/rds/*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "rds.amazonaws.com",
          "rds.application-autoscaling.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "support:*",
        "acm:DescribeCertificate",
        "acm:GetCertificate",
        "acm:List*",
        "apigateway:GET",
        "appstream:Get*",
        "autoscaling:Describe*",
        "aws-marketplace:ViewSubscriptions",
        "cloudformation:Describe*",
        "cloudformation:Get*",
        "cloudformation:List*",
        "cloudformation:EstimateTemplateCost",
        "cloudfront:Get*",
        "cloudfront:List*",
        "cloudsearch:Describe*",
        "cloudsearch:List*",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:LookupEvents",
        "cloudtrail:ListTags",
        "cloudtrail:ListPublicKeys",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "codecommit:BatchGetRepositories",
        "codecommit:Get*",
        "codecommit:List*",
        "codedeploy:Batch*",
        "codedeploy:Get*",
        "codedeploy:List*",
        "codepipeline:AcknowledgeJob",
        "codepipeline:AcknowledgeThirdPartyJob",
        "codepipeline:ListActionTypes",
        "codepipeline:ListPipelines",
        "codepipeline:PollForJobs",
        "codepipeline:PollForThirdPartyJobs",
        "codepipeline:GetPipelineState",
        "codepipeline:GetPipeline",
        "cognito-identity:List*",
        "cognito-identity:LookupDeveloperIdentity",
        "cognito-identity:Describe*",
        "cognito-idp:Describe*",
        "cognito-sync:Describe*",
        "cognito-sync:GetBulkPublishDetails",
        "cognito-sync:GetCognitoEvents",
        "cognito-sync:GetIdentityPoolConfiguration",
        "cognito-sync:List*",
        "config:DescribeConfigurationRecorders",
        "config:DescribeConfigurationRecorderStatus",
        "config:DescribeConfigRuleEvaluationStatus",
        "config:DescribeConfigRules",
        "config:DescribeDeliveryChannels",
        "config:DescribeDeliveryChannelStatus",
        "config:GetResourceConfigHistory",
        "config:ListDiscoveredResources",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:ListPipelines",
        "datapipeline:QueryObjects",
        "datapipeline:ReportTaskProgress",
        "datapipeline:ReportTaskRunnerHeartbeat",
        "devicefarm:List*",
        "devicefarm:Get*",
        "directconnect:Describe*",
        "discovery:Describe*",
        "discovery:ListConfigurations",
        "dms:Describe*",
        "dms:List*",
        "ds:DescribeDirectories",
        "ds:DescribeSnapshots",
        "ds:GetDirectoryLimits",
        "ds:GetSnapshotLimits",
        "ds:ListAuthorizedApplications",
        "dynamodb:DescribeLimits",
        "dynamodb:DescribeTable",
        "dynamodb:ListTables",
        "ec2:Describe*",
        "ec2:DescribeHosts",
        "ec2:describeIdentityIdFormat",
        "ec2:DescribeIdFormat",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeNatGateways",
        "ec2:DescribeReservedInstancesModifications",
        "ec2:DescribeTags",
        "ec2:GetFlowLogsCount",
        "ecr:GetRepositoryPolicy",
        "ecr:BatchCheckLayerAvailability",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecs:Describe*",
        "ecs:List*",
        "elasticache:Describe*",
        "elasticache:List*",
        "elasticbeanstalk:Check*",
        "elasticbeanstalk:Describe*",
        "elasticbeanstalk:List*",
        "elasticbeanstalk:RequestEnvironmentInfo",
        "elasticbeanstalk:RetrieveEnvironmentInfo",
        "elasticbeanstalk:ValidateConfigurationSettings",
        "elasticfilesystem:Describe*",
        "elasticloadbalancing:Describe*",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:List*",
        "elastictranscoder:List*",
        "elastictranscoder:ReadJob",
        "elasticfilesystem:DescribeFileSystems",
        "es:Describe*",
        "es:List*",
        "es:ESHttpGet",
        "es:ESHttpHead",
        "events:DescribeRule",
        "events:List*",
        "events:TestEventPattern",
        "firehose:Describe*",
        "firehose:List*",
        "gamelift:List*",
        "gamelift:Describe*",
        "glacier:ListVaults",
        "glacier:DescribeVault",
        "glacier:DescribeJob",
        "glacier:Get*",
        "glacier:List*",
        "iam:GenerateCredentialReport",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:Get*",
        "iam:List*",
        "importexport:GetStatus",
        "importexport:ListJobs",
        "importexport:GetJobDetail",
        "inspector:Describe*",
        "inspector:List*",
        "inspector:GetAssessmentTelemetry",
        "inspector:LocalizeText",
        "iot:Describe*",
        "iot:Get*",
        "iot:List*",
        "kinesisanalytics:DescribeApplication",
        "kinesisanalytics:DiscoverInputSchema",
        "kinesisanalytics:GetApplicationState",
        "kinesisanalytics:ListApplications",
        "kinesis:Describe*",
        "kinesis:Get*",
        "kinesis:List*",
        "kms:Describe*",
        "kms:Get*",
        "kms:List*",
        "lambda:List*",
        "lambda:Get*",
        "logs:Describe*",
        "logs:TestMetricFilter",
        "machinelearning:Describe*",
        "machinelearning:Get*",
        "mobilehub:GetProject",
        "mobilehub:List*",
        "mobilehub:ValidateProject",
        "mobilehub:VerifyServiceRole",
        "opsworks:Describe*",
        "rds:Describe*",
        "rds:ListTagsForResource",
        "redshift:Describe*",
        "route53:Get*",
        "route53:List*",
        "route53domains:CheckDomainAvailability",
        "route53domains:GetDomainDetail",
        "route53domains:GetOperationDetail",
        "route53domains:List*",
        "s3:List*",
        "sdb:GetAttributes",
        "sdb:List*",
        "sdb:Select*",
        "servicecatalog:SearchProducts",
        "servicecatalog:DescribeProduct",
        "servicecatalog:DescribeProductView",
        "servicecatalog:ListLaunchPaths",
        "servicecatalog:DescribeProvisioningParameters",
        "servicecatalog:ListRecordHistory",
        "servicecatalog:DescribeRecord",
        "servicecatalog:ScanProvisionedProducts",
        "ses:Get*",
        "ses:List*",
        "sns:Get*",
        "sns:List*",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ListQueues",
        "sqs:ReceiveMessage",
        "ssm:List*",
        "ssm:Describe*",
        "storagegateway:Describe*",
        "storagegateway:List*",
        "swf:Count*",
        "swf:Describe*",
        "swf:Get*",
        "swf:List*",
        "waf:Get*",
        "waf:List*",
        "workspaces:Describe*",
        "workdocs:Describe*",
        "workmail:Describe*",
        "workmail:Get*",
        "workspaces:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "support:*",
      "acm:DescribeCertificate",
      "acm:GetCertificate",
      "acm:List*",
      "apigateway:GET",
      "appstream:Get*",
      "autoscaling:Describe*",
      "aws-marketplace:ViewSubscriptions",
      "cloudformation:Describe*",
      "cloudformation:Get*",
      "cloudformation:List*",
      "cloudformation:EstimateTemplateCost",
      "cloudfront:Get*",
      "cloudfront:List*",
      "cloudsearch:Describe*",
      "cloudsearch:List*",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:LookupEvents",
      "cloudtrail:ListTags",
      "cloudtrail:ListPublicKeys",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "codecommit:BatchGetRepositories",
      "codecommit:Get*",
      "codecommit:List*",
      "codedeploy:Batch*",
      "codedeploy:Get*",
      "codedeploy:List*",
      "codepipeline:AcknowledgeJob",
      "codepipeline:AcknowledgeThirdPartyJob",
      "codepipeline:ListActionTypes",
      "codepipeline:ListPipelines",
      "codepipeline:PollForJobs",
      "codepipeline:PollForThirdPartyJobs",
      "codepipeline:GetPipelineState",
      "codepipeline:GetPipeline",
      "cognito-identity:List*",
      "cognito-identity:LookupDeveloperIdentity",
      "cognito-identity:Describe*",
      "cognito-idp:Describe*",
      "cognito-sync:Describe*",
      "cognito-sync:GetBulkPublishDetails",
      "cognito-sync:GetCognitoEvents",
      "cognito-sync:GetIdentityPoolConfiguration",
      "cognito-sync:List*",
      "config:DescribeConfigurationRecorders",
      "config:DescribeConfigurationRecorderStatus",
      "config:DescribeConfigRuleEvaluationStatus",
      "config:DescribeConfigRules",
      "config:DescribeDeliveryChannels",
      "config:DescribeDeliveryChannelStatus",
      "config:GetResourceConfigHistory",
      "config:ListDiscoveredResources",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:QueryObjects",
      "datapipeline:ReportTaskProgress",
      "datapipeline:ReportTaskRunnerHeartbeat",
      "devicefarm:List*",
      "devicefarm:Get*",
      "directconnect:Describe*",
      "discovery:Describe*",
      "discovery:ListConfigurations",
      "dms:Describe*",
      "dms:List*",
      "ds:DescribeDirectories",
      "ds:DescribeSnapshots",
      "ds:GetDirectoryLimits",
      "ds:GetSnapshotLimits",
      "ds:ListAuthorizedApplications",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeTable",
      "dynamodb:ListTables",
      "ec2:Describe*",
      "ec2:DescribeHosts",
      "ec2:describeIdentityIdFormat",
      "ec2:DescribeIdFormat",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeNatGateways",
      "ec2:DescribeReservedInstancesModifications",
      "ec2:DescribeTags",
      "ec2:GetFlowLogsCount",
      "ecr:GetRepositoryPolicy",
      "ecr:BatchCheckLayerAvailability",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecs:Describe*",
      "ecs:List*",
      "elasticache:Describe*",
      "elasticache:List*",
      "elasticbeanstalk:Check*",
      "elasticbeanstalk:Describe*",
      "elasticbeanstalk:List*",
      "elasticbeanstalk:RequestEnvironmentInfo",
      "elasticbeanstalk:RetrieveEnvironmentInfo",
      "elasticbeanstalk:ValidateConfigurationSettings",
      "elasticfilesystem:Describe*",
      "elasticloadbalancing:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:List*",
      "elastictranscoder:List*",
      "elastictranscoder:ReadJob",
      "elasticfilesystem:DescribeFileSystems",
      "es:Describe*",
      "es:List*",
      "es:ESHttpGet",
      "es:ESHttpHead",
      "events:DescribeRule",
      "events:List*",
      "events:TestEventPattern",
      "firehose:Describe*",
      "firehose:List*",
      "gamelift:List*",
      "gamelift:Describe*",
      "glacier:ListVaults",
      "glacier:DescribeVault",
      "glacier:DescribeJob",
      "glacier:Get*",
      "glacier:List*",
      "iam:GenerateCredentialReport",
      "iam:GenerateServiceLastAccessedDetails",
      "iam:Get*",
      "iam:List*",
      "importexport:GetStatus",
      "importexport:ListJobs",
      "importexport:GetJobDetail",
      "inspector:Describe*",
      "inspector:List*",
      "inspector:GetAssessmentTelemetry",
      "inspector:LocalizeText",
      "iot:Describe*",
      "iot:Get*",
      "iot:List*",
      "kinesisanalytics:DescribeApplication",
      "kinesisanalytics:DiscoverInputSchema",
      "kinesisanalytics:GetApplicationState",
      "kinesisanalytics:ListApplications",
      "kinesis:Describe*",
      "kinesis:Get*",
      "kinesis:List*",
      "kms:Describe*",
      "kms:Get*",
      "kms:List*",
      "lambda:List*",
      "lambda:Get*",
      "logs:Describe*",
      "logs:TestMetricFilter",
      "machinelearning:Describe*",
      "machinelearning:Get*",
      "mobilehub:GetProject",
      "mobilehub:List*",
      "mobilehub:ValidateProject",
      "mobilehub:VerifyServiceRole",
      "opsworks:Describe*",
      "rds:Describe*",
      "rds:ListTagsForResource",
      "redshift:Describe*",
      "route53:Get*",
      "route53:List*",
      "route53domains:CheckDomainAvailability",
      "route53domains:GetDomainDetail",
      "route53domains:GetOperationDetail",
      "route53domains:List*",
      "s3:List*",
      "sdb:GetAttributes",
      "sdb:List*",
      "sdb:Select*",
      "servicecatalog:SearchProducts",
      "servicecatalog:DescribeProduct",
      "servicecatalog:DescribeProductView",
      "servicecatalog:ListLaunchPaths",
      "servicecatalog:DescribeProvisioningParameters",
      "servicecatalog:ListRecordHistory",
      "servicecatalog:DescribeRecord",
      "servicecatalog:ScanProvisionedProducts",
      "ses:Get*",
      "ses:List*",
      "sns:Get*",
      "sns:List*",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "sqs:ListQueues",
      "sqs:ReceiveMessage",
      "ssm:List*",
      "ssm:Describe*",
      "storagegateway:Describe*",
      "storagegateway:List*",
      "swf:Count*",
      "swf:Describe*",
      "swf:Get*",
      "swf:List*",
      "waf:Get*",
      "waf:List*",
      "workspaces:Describe*",
      "workdocs:Describe*",
      "workmail:Describe*",
      "workmail:Get*",
      "workspaces:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ec2:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "autoscaling:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "autoscaling.amazonaws.com",
            "ec2scheduled.amazonaws.com",
            "elasticloadbalancing.amazonaws.com",
            "spot.amazonaws.com",
            "spotfleet.amazonaws.com",
            "transitgateway.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": "ec2:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "autoscaling:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "autoscaling.amazonaws.com",
          "ec2scheduled.amazonaws.com",
          "elasticloadbalancing.amazonaws.com",
          "spot.amazonaws.com",
          "spotfleet.amazonaws.com",
          "transitgateway.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:*",
        "cloudformation:CreateChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStacks",
        "cloudformation:ExecuteChangeSet",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "kms:DescribeKey",
        "kms:ListAliases",
        "kms:ListKeys",
        "lambda:ListFunctions",
        "rds:DescribeDBClusters",
        "rds:DescribeDBInstances",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:AddPermission",
        "lambda:CreateFunction",
        "lambda:GetFunction",
        "lambda:InvokeFunction",
        "lambda:UpdateFunctionConfiguration"
      ],
      "Resource": "arn:aws:lambda:*:*:function:SecretsManager*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "serverlessrepo:CreateCloudFormationChangeSet"
      ],
      "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "secretsmanager:*",
      "cloudformation:CreateChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStacks",
      "cloudformation:ExecuteChangeSet",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "kms:DescribeKey",
      "kms:ListAliases",
      "kms:ListKeys",
      "lambda:ListFunctions",
      "rds:DescribeDBClusters",
      "rds:DescribeDBInstances",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:AddPermission",
      "lambda:CreateFunction",
      "lambda:GetFunction",
      "lambda:InvokeFunction",
      "lambda:UpdateFunctionConfiguration"
    ],
    "Resource": "arn:aws:lambda:*:*:function:SecretsManager*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "serverlessrepo:CreateCloudFormationChangeSet"
    ],
    "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:AddThingToThingGroup",
        "iot:AttachPrincipalPolicy",
        "iot:AttachThingPrincipal",
        "iot:CreateCertificateFromCsr",
        "iot:CreatePolicy",
        "iot:CreateThing",
        "iot:DescribeCertificate",
        "iot:DescribeThing",
        "iot:DescribeThingGroup",
        "iot:DescribeThingType",
        "iot:DetachThingPrincipal",
        "iot:GetPolicy",
        "iot:ListPolicyPrincipals",
        "iot:ListPrincipalPolicies",
        "iot:ListPrincipalThings",
        "iot:ListThingGroupsForThing",
        "iot:ListThingPrincipals",
        "iot:RegisterCertificate",
        "iot:RegisterThing",
        "iot:RemoveThingFromThingGroup",
        "iot:UpdateCertificate",
        "iot:UpdateThing",
        "iot:UpdateThingGroupsForThing"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:AddThingToThingGroup",
      "iot:AttachPrincipalPolicy",
      "iot:AttachThingPrincipal",
      "iot:CreateCertificateFromCsr",
      "iot:CreatePolicy",
      "iot:CreateThing",
      "iot:DescribeCertificate",
      "iot:DescribeThing",
      "iot:DescribeThingGroup",
      "iot:DescribeThingType",
      "iot:DetachThingPrincipal",
      "iot:GetPolicy",
      "iot:ListPolicyPrincipals",
      "iot:ListPrincipalPolicies",
      "iot:ListPrincipalThings",
      "iot:ListThingGroupsForThing",
      "iot:ListThingPrincipals",
      "iot:RegisterCertificate",
      "iot:RegisterThing",
      "iot:RemoveThingFromThingGroup",
      "iot:UpdateCertificate",
      "iot:UpdateThing",
      "iot:UpdateThingGroupsForThing"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DownloadDBLogFilePortion",
        "rds:ListTagsForResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kms:ListKeys",
        "kms:ListRetirableGrants",
        "kms:ListAliases",
        "kms:ListKeyPolicies"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
        "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DownloadDBLogFilePortion",
      "rds:ListTagsForResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kms:ListKeys",
      "kms:ListRetirableGrants",
      "kms:ListAliases",
      "kms:ListKeyPolicies"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
      "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticbeanstalk:Check*",
        "elasticbeanstalk:Describe*",
        "elasticbeanstalk:List*",
        "elasticbeanstalk:RequestEnvironmentInfo",
        "elasticbeanstalk:RetrieveEnvironmentInfo",
        "ec2:Describe*",
        "elasticloadbalancing:Describe*",
        "autoscaling:Describe*",
        "cloudwatch:Describe*",
        "cloudwatch:List*",
        "cloudwatch:Get*",
        "s3:Get*",
        "s3:List*",
        "sns:Get*",
        "sns:List*",
        "cloudformation:Describe*",
        "cloudformation:Get*",
        "cloudformation:List*",
        "cloudformation:Validate*",
        "cloudformation:Estimate*",
        "rds:Describe*",
        "sqs:Get*",
        "sqs:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticbeanstalk:Check*",
      "elasticbeanstalk:Describe*",
      "elasticbeanstalk:List*",
      "elasticbeanstalk:RequestEnvironmentInfo",
      "elasticbeanstalk:RetrieveEnvironmentInfo",
      "ec2:Describe*",
      "elasticloadbalancing:Describe*",
      "autoscaling:Describe*",
      "cloudwatch:Describe*",
      "cloudwatch:List*",
      "cloudwatch:Get*",
      "s3:Get*",
      "s3:List*",
      "sns:Get*",
      "sns:List*",
      "cloudformation:Describe*",
      "cloudformation:Get*",
      "cloudformation:List*",
      "cloudformation:Validate*",
      "cloudformation:Estimate*",
      "rds:Describe*",
      "sqs:Get*",
      "sqs:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mq:*",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DetachNetworkInterface",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mq:*",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DetachNetworkInterface",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mediastore:Get*",
        "mediastore:List*",
        "mediastore:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Bool": {
          "aws:SecureTransport": "true"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "mediastore:Get*",
      "mediastore:List*",
      "mediastore:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Bool": {
        "aws:SecureTransport": "true"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "acm:DescribeCertificate",
      "acm:ListCertificates",
      "acm:GetCertificate",
      "acm:ListTagsForCertificate"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": [
    "acm:DescribeCertificate",
    "acm:ListCertificates",
    "acm:GetCertificate",
    "acm:ListTagsForCertificate"
  ],
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "athena:BatchGetQueryExecution",
        "athena:CancelQueryExecution",
        "athena:GetCatalogs",
        "athena:GetExecutionEngine",
        "athena:GetExecutionEngines",
        "athena:GetNamespace",
        "athena:GetNamespaces",
        "athena:GetQueryExecution",
        "athena:GetQueryExecutions",
        "athena:GetQueryResults",
        "athena:GetQueryResultsStream",
        "athena:GetTable",
        "athena:GetTables",
        "athena:ListQueryExecutions",
        "athena:RunQuery",
        "athena:StartQueryExecution",
        "athena:StopQueryExecution"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "glue:CreateDatabase",
        "glue:DeleteDatabase",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:UpdateDatabase",
        "glue:CreateTable",
        "glue:DeleteTable",
        "glue:BatchDeleteTable",
        "glue:UpdateTable",
        "glue:GetTable",
        "glue:GetTables",
        "glue:BatchCreatePartition",
        "glue:CreatePartition",
        "glue:DeletePartition",
        "glue:BatchDeletePartition",
        "glue:UpdatePartition",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:BatchGetPartition"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:AbortMultipartUpload",
        "s3:CreateBucket",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-athena-query-results-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lakeformation:GetDataAccess"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "athena:BatchGetQueryExecution",
      "athena:CancelQueryExecution",
      "athena:GetCatalogs",
      "athena:GetExecutionEngine",
      "athena:GetExecutionEngines",
      "athena:GetNamespace",
      "athena:GetNamespaces",
      "athena:GetQueryExecution",
      "athena:GetQueryExecutions",
      "athena:GetQueryResults",
      "athena:GetQueryResultsStream",
      "athena:GetTable",
      "athena:GetTables",
      "athena:ListQueryExecutions",
      "athena:RunQuery",
      "athena:StartQueryExecution",
      "athena:StopQueryExecution"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "glue:CreateDatabase",
      "glue:DeleteDatabase",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:UpdateDatabase",
      "glue:CreateTable",
      "glue:DeleteTable",
      "glue:BatchDeleteTable",
      "glue:UpdateTable",
      "glue:GetTable",
      "glue:GetTables",
      "glue:BatchCreatePartition",
      "glue:CreatePartition",
      "glue:DeletePartition",
      "glue:BatchDeletePartition",
      "glue:UpdatePartition",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:BatchGetPartition"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts",
      "s3:AbortMultipartUpload",
      "s3:CreateBucket",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-athena-query-results-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lakeformation:GetDataAccess"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:GetHostedZone",
        "route53:ListHostedZonesByName",
        "route53:ChangeResourceRecordSets",
        "route53:CreateHealthCheck",
        "route53:GetHealthCheck",
        "route53:DeleteHealthCheck",
        "route53:UpdateHealthCheck",
        "servicediscovery:Get*",
        "servicediscovery:List*",
        "servicediscovery:RegisterInstance",
        "servicediscovery:DeregisterInstance",
        "servicediscovery:DiscoverInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:GetHostedZone",
      "route53:ListHostedZonesByName",
      "route53:ChangeResourceRecordSets",
      "route53:CreateHealthCheck",
      "route53:GetHealthCheck",
      "route53:DeleteHealthCheck",
      "route53:UpdateHealthCheck",
      "servicediscovery:Get*",
      "servicediscovery:List*",
      "servicediscovery:RegisterInstance",
      "servicediscovery:DeregisterInstance",
      "servicediscovery:DiscoverInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:ListBuilds",
        "aws-marketplace:StartBuild",
        "aws-marketplace:DescribeBuilds"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "ec2:TerminateInstances",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/marketplace-image-build:build-id": "*"
        }
      }
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/*Automation*",
        "arn:aws:iam::*:role/*Instance*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ssm.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "ssm:GetAutomationExecution",
        "ssm:CreateDocument",
        "ssm:StartAutomationExecution",
        "ssm:ListDocuments",
        "ssm:UpdateDocument",
        "ssm:UpdateDocumentDefaultVersion",
        "ssm:DescribeDocument",
        "ec2:DeregisterImage",
        "ec2:CopyImage",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeImages",
        "ec2:DescribeSubnets",
        "ec2:DeleteSnapshot",
        "ec2:CreateImage",
        "ec2:RunInstances",
        "ec2:DescribeInstanceStatus",
        "sns:GetTopicAttributes",
        "iam:GetRole",
        "iam:GetInstanceProfile"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::*image-build*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*::image/*",
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": [
        "arn:aws:sns:*:*:*image-build*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:ListBuilds",
      "aws-marketplace:StartBuild",
      "aws-marketplace:DescribeBuilds"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "ec2:TerminateInstances",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/marketplace-image-build:build-id": "*"
      }
    }
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/*Automation*",
      "arn:aws:iam::*:role/*Instance*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ssm.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "ssm:GetAutomationExecution",
      "ssm:CreateDocument",
      "ssm:StartAutomationExecution",
      "ssm:ListDocuments",
      "ssm:UpdateDocument",
      "ssm:UpdateDocumentDefaultVersion",
      "ssm:DescribeDocument",
      "ec2:DeregisterImage",
      "ec2:CopyImage",
      "ec2:DescribeSnapshots",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeImages",
      "ec2:DescribeSubnets",
      "ec2:DeleteSnapshot",
      "ec2:CreateImage",
      "ec2:RunInstances",
      "ec2:DescribeInstanceStatus",
      "sns:GetTopicAttributes",
      "iam:GetRole",
      "iam:GetInstanceProfile"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::*image-build*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*::image/*",
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": [
      "arn:aws:sns:*:*:*image-build*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codecommit:BatchGet*",
        "codecommit:BatchDescribe*",
        "codecommit:Get*",
        "codecommit:List*",
        "codecommit:Create*",
        "codecommit:DeleteBranch",
        "codecommit:DeleteFile",
        "codecommit:Describe*",
        "codecommit:Put*",
        "codecommit:Post*",
        "codecommit:Merge*",
        "codecommit:TagResource",
        "codecommit:Test*",
        "codecommit:UntagResource",
        "codecommit:Update*",
        "codecommit:GitPull",
        "codecommit:GitPush"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "events:DeleteRule",
        "events:DescribeRule",
        "events:DisableRule",
        "events:EnableRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "events:ListTargetsByRule"
      ],
      "Resource": "arn:aws:events:*:*:rule/codecommit*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsCodeCommitRulesAccess"
    },
    {
      "Action": [
        "sns:Subscribe",
        "sns:Unsubscribe"
      ],
      "Resource": "arn:aws:sns:*:*:codecommit*",
      "Effect": "Allow",
      "Sid": "SNSTopicAndSubscriptionAccess"
    },
    {
      "Action": [
        "sns:ListTopics",
        "sns:ListSubscriptionsByTopic",
        "sns:GetTopicAttributes"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "SNSTopicAndSubscriptionReadAccess"
    },
    {
      "Action": [
        "lambda:ListFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "LambdaReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListUsers"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListAccessKeys",
        "iam:ListSSHPublicKeys",
        "iam:ListServiceSpecificCredentials"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyConsoleAccess"
    },
    {
      "Action": [
        "iam:DeleteSSHPublicKey",
        "iam:GetSSHPublicKey",
        "iam:ListSSHPublicKeys",
        "iam:UpdateSSHPublicKey",
        "iam:UploadSSHPublicKey"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMUserSSHKeys"
    },
    {
      "Action": [
        "iam:CreateServiceSpecificCredential",
        "iam:UpdateServiceSpecificCredential",
        "iam:DeleteServiceSpecificCredential",
        "iam:ResetServiceSpecificCredential"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMSelfManageServiceSpecificCredentials"
    }
  ]
}
[
  {
    "Action": [
      "codecommit:BatchGet*",
      "codecommit:BatchDescribe*",
      "codecommit:Get*",
      "codecommit:List*",
      "codecommit:Create*",
      "codecommit:DeleteBranch",
      "codecommit:DeleteFile",
      "codecommit:Describe*",
      "codecommit:Put*",
      "codecommit:Post*",
      "codecommit:Merge*",
      "codecommit:TagResource",
      "codecommit:Test*",
      "codecommit:UntagResource",
      "codecommit:Update*",
      "codecommit:GitPull",
      "codecommit:GitPush"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "events:DeleteRule",
      "events:DescribeRule",
      "events:DisableRule",
      "events:EnableRule",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "events:ListTargetsByRule"
    ],
    "Resource": "arn:aws:events:*:*:rule/codecommit*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsCodeCommitRulesAccess"
  },
  {
    "Action": [
      "sns:Subscribe",
      "sns:Unsubscribe"
    ],
    "Resource": "arn:aws:sns:*:*:codecommit*",
    "Effect": "Allow",
    "Sid": "SNSTopicAndSubscriptionAccess"
  },
  {
    "Action": [
      "sns:ListTopics",
      "sns:ListSubscriptionsByTopic",
      "sns:GetTopicAttributes"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "SNSTopicAndSubscriptionReadAccess"
  },
  {
    "Action": [
      "lambda:ListFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "LambdaReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListUsers"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListAccessKeys",
      "iam:ListSSHPublicKeys",
      "iam:ListServiceSpecificCredentials"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyConsoleAccess"
  },
  {
    "Action": [
      "iam:DeleteSSHPublicKey",
      "iam:GetSSHPublicKey",
      "iam:ListSSHPublicKeys",
      "iam:UpdateSSHPublicKey",
      "iam:UploadSSHPublicKey"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMUserSSHKeys"
  },
  {
    "Action": [
      "iam:CreateServiceSpecificCredential",
      "iam:UpdateServiceSpecificCredential",
      "iam:DeleteServiceSpecificCredential",
      "iam:ResetServiceSpecificCredential"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMSelfManageServiceSpecificCredentials"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codecommit:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "events:DeleteRule",
        "events:DescribeRule",
        "events:DisableRule",
        "events:EnableRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "events:ListTargetsByRule"
      ],
      "Resource": "arn:aws:events:*:*:rule/codecommit*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsCodeCommitRulesAccess"
    },
    {
      "Action": [
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sns:SetTopicAttributes"
      ],
      "Resource": "arn:aws:sns:*:*:codecommit*",
      "Effect": "Allow",
      "Sid": "SNSTopicAndSubscriptionAccess"
    },
    {
      "Action": [
        "sns:ListTopics",
        "sns:ListSubscriptionsByTopic",
        "sns:GetTopicAttributes"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "SNSTopicAndSubscriptionReadAccess"
    },
    {
      "Action": [
        "lambda:ListFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "LambdaReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListUsers"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListAccessKeys",
        "iam:ListSSHPublicKeys",
        "iam:ListServiceSpecificCredentials"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyConsoleAccess"
    },
    {
      "Action": [
        "iam:DeleteSSHPublicKey",
        "iam:GetSSHPublicKey",
        "iam:ListSSHPublicKeys",
        "iam:UpdateSSHPublicKey",
        "iam:UploadSSHPublicKey"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMUserSSHKeys"
    },
    {
      "Action": [
        "iam:CreateServiceSpecificCredential",
        "iam:UpdateServiceSpecificCredential",
        "iam:DeleteServiceSpecificCredential",
        "iam:ResetServiceSpecificCredential"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMSelfManageServiceSpecificCredentials"
    }
  ]
}
[
  {
    "Action": [
      "codecommit:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "events:DeleteRule",
      "events:DescribeRule",
      "events:DisableRule",
      "events:EnableRule",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "events:ListTargetsByRule"
    ],
    "Resource": "arn:aws:events:*:*:rule/codecommit*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsCodeCommitRulesAccess"
  },
  {
    "Action": [
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:Subscribe",
      "sns:Unsubscribe",
      "sns:SetTopicAttributes"
    ],
    "Resource": "arn:aws:sns:*:*:codecommit*",
    "Effect": "Allow",
    "Sid": "SNSTopicAndSubscriptionAccess"
  },
  {
    "Action": [
      "sns:ListTopics",
      "sns:ListSubscriptionsByTopic",
      "sns:GetTopicAttributes"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "SNSTopicAndSubscriptionReadAccess"
  },
  {
    "Action": [
      "lambda:ListFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "LambdaReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListUsers"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListAccessKeys",
      "iam:ListSSHPublicKeys",
      "iam:ListServiceSpecificCredentials"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyConsoleAccess"
  },
  {
    "Action": [
      "iam:DeleteSSHPublicKey",
      "iam:GetSSHPublicKey",
      "iam:ListSSHPublicKeys",
      "iam:UpdateSSHPublicKey",
      "iam:UploadSSHPublicKey"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMUserSSHKeys"
  },
  {
    "Action": [
      "iam:CreateServiceSpecificCredential",
      "iam:UpdateServiceSpecificCredential",
      "iam:DeleteServiceSpecificCredential",
      "iam:ResetServiceSpecificCredential"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMSelfManageServiceSpecificCredentials"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:CreateServiceSpecificCredential",
        "iam:ListServiceSpecificCredentials",
        "iam:UpdateServiceSpecificCredential",
        "iam:DeleteServiceSpecificCredential",
        "iam:ResetServiceSpecificCredential"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:CreateServiceSpecificCredential",
      "iam:ListServiceSpecificCredentials",
      "iam:UpdateServiceSpecificCredential",
      "iam:DeleteServiceSpecificCredential",
      "iam:ResetServiceSpecificCredential"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:ModifyInstanceAttribute",
        "ec2:TerminateInstances",
        "ec2:CancelSpotInstanceRequests",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeVolumeStatus",
        "ec2:DescribeVolumes",
        "ec2:DetachVolume",
        "ec2:DeleteVolume"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:ModifyInstanceAttribute",
      "ec2:TerminateInstances",
      "ec2:CancelSpotInstanceRequests",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeVolumeStatus",
      "ec2:DescribeVolumes",
      "ec2:DetachVolume",
      "ec2:DeleteVolume"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloud9:GetUserSettings",
        "cloud9:UpdateUserSettings",
        "iam:GetUser",
        "iam:ListUsers"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloud9:DescribeEnvironmentMemberships"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "Null": {
          "cloud9:EnvironmentId": "true",
          "cloud9:UserArn": "true"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloud9:GetUserSettings",
      "cloud9:UpdateUserSettings",
      "iam:GetUser",
      "iam:ListUsers"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloud9:DescribeEnvironmentMemberships"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "Null": {
        "cloud9:EnvironmentId": "true",
        "cloud9:UserArn": "true"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sagemaker:DescribeEndpoint",
        "sagemaker:DescribeEndpointConfig",
        "sagemaker:UpdateEndpointWeightsAndCapacities",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sagemaker:DescribeEndpoint",
      "sagemaker:DescribeEndpointConfig",
      "sagemaker:UpdateEndpointWeightsAndCapacities",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "waf:UpdateWebACL",
        "waf:DeleteWebACL",
        "waf:GetWebACL",
        "waf:GetRuleGroup",
        "waf:ListSubscribedRuleGroups",
        "waf-regional:UpdateWebACL",
        "waf-regional:DeleteWebACL",
        "waf-regional:GetWebACL",
        "waf-regional:GetRuleGroup",
        "waf-regional:ListSubscribedRuleGroups",
        "waf-regional:ListResourcesForWebACL",
        "waf-regional:AssociateWebACL",
        "waf-regional:DisassociateWebACL",
        "elasticloadbalancing:SetWebACL",
        "apigateway:SetWebACL"
      ],
      "Resource": [
        "arn:aws:waf:*:*:webacl/*",
        "arn:aws:waf-regional:*:*:webacl/*",
        "arn:aws:waf:*:*:rulegroup/*",
        "arn:aws:waf-regional:*:*:rulegroup/*",
        "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*",
        "arn:aws:apigateway:*::/restapis/*/stages/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "waf:CreateWebACL",
        "waf-regional:CreateWebACL",
        "waf:GetChangeToken",
        "waf-regional:GetChangeToken"
      ],
      "Resource": [
        "arn:aws:waf:*",
        "arn:aws:waf-regional:*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "waf:PutPermissionPolicy",
        "waf:GetPermissionPolicy",
        "waf:DeletePermissionPolicy",
        "waf-regional:PutPermissionPolicy",
        "waf-regional:GetPermissionPolicy",
        "waf-regional:DeletePermissionPolicy"
      ],
      "Resource": [
        "arn:aws:waf:*:*:webacl/*",
        "arn:aws:waf:*:*:rulegroup/*",
        "arn:aws:waf-regional:*:*:webacl/*",
        "arn:aws:waf-regional:*:*:rulegroup/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudfront:GetDistribution",
        "cloudfront:UpdateDistribution",
        "cloudfront:ListDistributionsByWebACLId"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "config:DeleteConfigRule",
        "config:DescribeComplianceByConfigRule",
        "config:DescribeConfigRuleEvaluationStatus",
        "config:DescribeConfigRules",
        "config:GetComplianceDetailsByConfigRule",
        "config:PutConfigRule",
        "config:StartConfigRulesEvaluation"
      ],
      "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/fms.amazonaws.com/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "config:DescribeConfigurationRecorders",
        "config:DescribeConfigurationRecorderStatus",
        "config:PutConfigurationRecorder",
        "config:StartConfigurationRecorder",
        "config:PutDeliveryChannel",
        "config:DescribeDeliveryChannels",
        "config:DescribeDeliveryChannelStatus",
        "config:GetComplianceSummaryByConfigRule",
        "config:GetDiscoveredResourceCounts",
        "config:PutEvaluations",
        "config:SelectResourceConfig"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAccounts"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "shield:CreateProtection",
        "shield:DeleteProtection",
        "shield:DescribeProtection",
        "shield:ListProtections",
        "shield:ListAttacks",
        "shield:CreateSubscription",
        "shield:DescribeSubscription",
        "shield:GetSubscriptionState",
        "shield:DescribeDRTAccess",
        "shield:DescribeEmergencyContactSettings",
        "shield:UpdateEmergencyContactSettings",
        "elasticloadbalancing:DescribeLoadBalancers",
        "ec2:DescribeAddresses"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:DeleteSecurityGroup",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
        "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
        "ec2:DescribeNetworkInterfaceAttribute"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:security-group/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:security-group/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateSecurityGroup",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeStaleSecurityGroups",
        "ec2:DescribeNetworkInterfaces",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DescribeVpcs"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "waf:UpdateWebACL",
      "waf:DeleteWebACL",
      "waf:GetWebACL",
      "waf:GetRuleGroup",
      "waf:ListSubscribedRuleGroups",
      "waf-regional:UpdateWebACL",
      "waf-regional:DeleteWebACL",
      "waf-regional:GetWebACL",
      "waf-regional:GetRuleGroup",
      "waf-regional:ListSubscribedRuleGroups",
      "waf-regional:ListResourcesForWebACL",
      "waf-regional:AssociateWebACL",
      "waf-regional:DisassociateWebACL",
      "elasticloadbalancing:SetWebACL",
      "apigateway:SetWebACL"
    ],
    "Resource": [
      "arn:aws:waf:*:*:webacl/*",
      "arn:aws:waf-regional:*:*:webacl/*",
      "arn:aws:waf:*:*:rulegroup/*",
      "arn:aws:waf-regional:*:*:rulegroup/*",
      "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*",
      "arn:aws:apigateway:*::/restapis/*/stages/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "waf:CreateWebACL",
      "waf-regional:CreateWebACL",
      "waf:GetChangeToken",
      "waf-regional:GetChangeToken"
    ],
    "Resource": [
      "arn:aws:waf:*",
      "arn:aws:waf-regional:*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "waf:PutPermissionPolicy",
      "waf:GetPermissionPolicy",
      "waf:DeletePermissionPolicy",
      "waf-regional:PutPermissionPolicy",
      "waf-regional:GetPermissionPolicy",
      "waf-regional:DeletePermissionPolicy"
    ],
    "Resource": [
      "arn:aws:waf:*:*:webacl/*",
      "arn:aws:waf:*:*:rulegroup/*",
      "arn:aws:waf-regional:*:*:webacl/*",
      "arn:aws:waf-regional:*:*:rulegroup/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudfront:GetDistribution",
      "cloudfront:UpdateDistribution",
      "cloudfront:ListDistributionsByWebACLId"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "config:DeleteConfigRule",
      "config:DescribeComplianceByConfigRule",
      "config:DescribeConfigRuleEvaluationStatus",
      "config:DescribeConfigRules",
      "config:GetComplianceDetailsByConfigRule",
      "config:PutConfigRule",
      "config:StartConfigRulesEvaluation"
    ],
    "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/fms.amazonaws.com/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "config:DescribeConfigurationRecorders",
      "config:DescribeConfigurationRecorderStatus",
      "config:PutConfigurationRecorder",
      "config:StartConfigurationRecorder",
      "config:PutDeliveryChannel",
      "config:DescribeDeliveryChannels",
      "config:DescribeDeliveryChannelStatus",
      "config:GetComplianceSummaryByConfigRule",
      "config:GetDiscoveredResourceCounts",
      "config:PutEvaluations",
      "config:SelectResourceConfig"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAccounts"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "shield:CreateProtection",
      "shield:DeleteProtection",
      "shield:DescribeProtection",
      "shield:ListProtections",
      "shield:ListAttacks",
      "shield:CreateSubscription",
      "shield:DescribeSubscription",
      "shield:GetSubscriptionState",
      "shield:DescribeDRTAccess",
      "shield:DescribeEmergencyContactSettings",
      "shield:UpdateEmergencyContactSettings",
      "elasticloadbalancing:DescribeLoadBalancers",
      "ec2:DescribeAddresses"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:DeleteSecurityGroup",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "ec2:DescribeNetworkInterfaceAttribute"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:security-group/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:security-group/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateSecurityGroup",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeNetworkInterfaces",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DescribeVpcs"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sqs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "a4b:Get*",
        "a4b:List*",
        "a4b:Describe*",
        "a4b:Search*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "a4b:Get*",
      "a4b:List*",
      "a4b:Describe*",
      "a4b:Search*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplate",
        "cloudformation:ListStackResources",
        "cloudwatch:*",
        "cognito-identity:ListIdentityPools",
        "cognito-sync:GetCognitoEvents",
        "cognito-sync:SetCognitoEvents",
        "dynamodb:*",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "events:*",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "iam:ListRolePolicies",
        "iam:ListRoles",
        "iam:PassRole",
        "iot:AttachPrincipalPolicy",
        "iot:AttachThingPrincipal",
        "iot:CreateKeysAndCertificate",
        "iot:CreatePolicy",
        "iot:CreateThing",
        "iot:CreateTopicRule",
        "iot:DescribeEndpoint",
        "iot:GetTopicRule",
        "iot:ListPolicies",
        "iot:ListThings",
        "iot:ListTopicRules",
        "iot:ReplaceTopicRule",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kinesis:PutRecord",
        "kms:ListAliases",
        "lambda:*",
        "logs:*",
        "s3:*",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sns:Publish",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sqs:ListQueues",
        "sqs:SendMessage",
        "tag:GetResources",
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:GetTemplate",
      "cloudformation:ListStackResources",
      "cloudwatch:*",
      "cognito-identity:ListIdentityPools",
      "cognito-sync:GetCognitoEvents",
      "cognito-sync:SetCognitoEvents",
      "dynamodb:*",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "events:*",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListAttachedRolePolicies",
      "iam:ListRolePolicies",
      "iam:ListRoles",
      "iam:PassRole",
      "iot:AttachPrincipalPolicy",
      "iot:AttachThingPrincipal",
      "iot:CreateKeysAndCertificate",
      "iot:CreatePolicy",
      "iot:CreateThing",
      "iot:CreateTopicRule",
      "iot:DescribeEndpoint",
      "iot:GetTopicRule",
      "iot:ListPolicies",
      "iot:ListThings",
      "iot:ListTopicRules",
      "iot:ReplaceTopicRule",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "kinesis:PutRecord",
      "kms:ListAliases",
      "lambda:*",
      "logs:*",
      "s3:*",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sns:Publish",
      "sns:Subscribe",
      "sns:Unsubscribe",
      "sqs:ListQueues",
      "sqs:SendMessage",
      "tag:GetResources",
      "xray:PutTelemetryRecords",
      "xray:PutTraceSegments"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:PutMetricFilter",
        "logs:PutRetentionPolicy",
        "logs:GetLogEvents",
        "logs:DeleteLogStream"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:PutMetricFilter",
      "logs:PutRetentionPolicy",
      "logs:GetLogEvents",
      "logs:DeleteLogStream"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:DescribeAssociation",
        "ssm:GetDeployablePatchSnapshotForInstance",
        "ssm:GetDocument",
        "ssm:DescribeDocument",
        "ssm:GetManifest",
        "ssm:GetParameters",
        "ssm:ListAssociations",
        "ssm:ListInstanceAssociations",
        "ssm:PutInventory",
        "ssm:PutComplianceItems",
        "ssm:PutConfigurePackageResult",
        "ssm:UpdateAssociationStatus",
        "ssm:UpdateInstanceAssociationStatus",
        "ssm:UpdateInstanceInformation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssmmessages:CreateControlChannel",
        "ssmmessages:CreateDataChannel",
        "ssmmessages:OpenControlChannel",
        "ssmmessages:OpenDataChannel"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2messages:AcknowledgeMessage",
        "ec2messages:DeleteMessage",
        "ec2messages:FailMessage",
        "ec2messages:GetEndpoint",
        "ec2messages:GetMessages",
        "ec2messages:SendReply"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricData"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstanceStatus"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ds:CreateComputer",
        "ds:DescribeDirectories"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:PutObject",
        "s3:GetObject",
        "s3:GetEncryptionConfiguration",
        "s3:AbortMultipartUpload",
        "s3:ListMultipartUploadParts",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ssm:DescribeAssociation",
      "ssm:GetDeployablePatchSnapshotForInstance",
      "ssm:GetDocument",
      "ssm:DescribeDocument",
      "ssm:GetManifest",
      "ssm:GetParameters",
      "ssm:ListAssociations",
      "ssm:ListInstanceAssociations",
      "ssm:PutInventory",
      "ssm:PutComplianceItems",
      "ssm:PutConfigurePackageResult",
      "ssm:UpdateAssociationStatus",
      "ssm:UpdateInstanceAssociationStatus",
      "ssm:UpdateInstanceInformation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssmmessages:CreateControlChannel",
      "ssmmessages:CreateDataChannel",
      "ssmmessages:OpenControlChannel",
      "ssmmessages:OpenDataChannel"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2messages:AcknowledgeMessage",
      "ec2messages:DeleteMessage",
      "ec2messages:FailMessage",
      "ec2messages:GetEndpoint",
      "ec2messages:GetMessages",
      "ec2messages:SendReply"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricData"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstanceStatus"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ds:CreateComputer",
      "ds:DescribeDirectories"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:PutObject",
      "s3:GetObject",
      "s3:GetEncryptionConfiguration",
      "s3:AbortMultipartUpload",
      "s3:ListMultipartUploadParts",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm-pca:GetCertificate",
        "acm-pca:IssueCertificate",
        "acm-pca:RevokeCertificate"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "aws:ResourceTag/a4b": "enabled"
        }
      },
      "Sid": "A4bPcaTagAccess"
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
      "Effect": "Allow",
      "Sid": "A4bNetworkProfileAccess"
    }
  ]
}
[
  {
    "Action": [
      "acm-pca:GetCertificate",
      "acm-pca:IssueCertificate",
      "acm-pca:RevokeCertificate"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "aws:ResourceTag/a4b": "enabled"
      }
    },
    "Sid": "A4bPcaTagAccess"
  },
  {
    "Action": [
      "secretsmanager:GetSecretValue"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
    "Effect": "Allow",
    "Sid": "A4bNetworkProfileAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:CreateTags",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DetachNetworkInterface"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:CreateTags",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DetachNetworkInterface"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeSecurityGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:*",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:DescribeOrganizationalUnit",
        "organizations:DescribePolicy",
        "organizations:ListChildren",
        "organizations:ListParents",
        "organizations:ListPoliciesForTarget",
        "organizations:ListRoots",
        "organizations:ListPolicies",
        "organizations:ListTargetsForPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:*",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:DescribeOrganizationalUnit",
      "organizations:DescribePolicy",
      "organizations:ListChildren",
      "organizations:ListParents",
      "organizations:ListPoliciesForTarget",
      "organizations:ListRoots",
      "organizations:ListPolicies",
      "organizations:ListTargetsForPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "inspector:*",
        "ec2:DescribeInstances",
        "ec2:DescribeTags",
        "sns:ListTopics",
        "events:DescribeRule",
        "events:ListRuleNamesByTarget"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "inspector.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "inspector.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "inspector:*",
      "ec2:DescribeInstances",
      "ec2:DescribeTags",
      "sns:ListTopics",
      "events:DescribeRule",
      "events:ListRuleNamesByTarget"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "inspector.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "inspector.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "elasticache:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "elasticache.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "elasticache:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "elasticache.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "awsconnector:RegisterConnector",
        "awsconnector:GetConnectorHealth"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:GetUser",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::connector-platform-upgrade-info/*",
        "arn:aws:s3:::connector-platform-upgrade-info",
        "arn:aws:s3:::connector-platform-upgrade-bundles/*",
        "arn:aws:s3:::connector-platform-upgrade-bundles",
        "arn:aws:s3:::connector-platform-release-notes/*",
        "arn:aws:s3:::connector-platform-release-notes",
        "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*",
        "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:PutObjectAcl"
      ],
      "Resource": [
        "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "SNS:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "Discovery:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "Discovery"
    },
    {
      "Action": [
        "arsenal:RegisterOnPremisesAgent"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "arsenal"
    }
  ]
}
[
  {
    "Action": [
      "awsconnector:RegisterConnector",
      "awsconnector:GetConnectorHealth"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:GetUser",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::connector-platform-upgrade-info/*",
      "arn:aws:s3:::connector-platform-upgrade-info",
      "arn:aws:s3:::connector-platform-upgrade-bundles/*",
      "arn:aws:s3:::connector-platform-upgrade-bundles",
      "arn:aws:s3:::connector-platform-release-notes/*",
      "arn:aws:s3:::connector-platform-release-notes",
      "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*",
      "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:PutObjectAcl"
    ],
    "Resource": [
      "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "SNS:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "Discovery:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "Discovery"
  },
  {
    "Action": [
      "arsenal:RegisterOnPremisesAgent"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "arsenal"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets",
        "xray:GetSamplingStatisticSummaries"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "xray:PutTraceSegments",
      "xray:PutTelemetryRecords",
      "xray:GetSamplingRules",
      "xray:GetSamplingTargets",
      "xray:GetSamplingStatisticSummaries"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "pricing:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "pricing:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudhsm:Describe*",
        "ec2:CreateNetworkInterface",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeSecurityGroups",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:DeleteSecurityGroup"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudhsm:Describe*",
      "ec2:CreateNetworkInterface",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeSecurityGroups",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:DeleteSecurityGroup"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "autoscaling:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "autoscaling:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "forecast:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "forecast.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "forecast:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "forecast.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "worklink:Describe*",
        "worklink:List*",
        "worklink:Search*"
      ],
      "Resource": "arn:aws:worklink:*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "worklink:Describe*",
      "worklink:List*",
      "worklink:Search*"
    ],
    "Resource": "arn:aws:worklink:*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "translate:*",
        "comprehend:DetectDominantLanguage",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "translate:*",
      "comprehend:DetectDominantLanguage",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "autoscaling:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudwatch:PutMetricAlarm",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeImages",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:DescribePlacementGroups",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcClassicLink"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "autoscaling.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "autoscaling:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudwatch:PutMetricAlarm",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeImages",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeLaunchTemplateVersions",
      "ec2:DescribePlacementGroups",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcClassicLink"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "autoscaling.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:ListBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectVersion",
      "s3:ListBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "fms:GetAdminAccount",
        "waf:Get*",
        "waf:List*",
        "waf-regional:Get*",
        "waf-regional:List*",
        "organizations:DescribeOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "fms:GetAdminAccount",
      "waf:Get*",
      "waf:List*",
      "waf-regional:Get*",
      "waf-regional:List*",
      "organizations:DescribeOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeSecurityGroups",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DescribeNetworkInterfaces",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DescribeTags",
        "ec2:DescribeInstances",
        "ec2:DescribeSubnets",
        "elasticmapreduce:ListInstances",
        "elasticmapreduce:DescribeCluster"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "ec2:CreateTags",
      "Resource": "arn:aws:ec2:*:*:network-interface/*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "aws:elasticmapreduce:editor-id",
            "aws:elasticmapreduce:job-flow-id"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeSecurityGroups",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DescribeNetworkInterfaces",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DescribeTags",
      "ec2:DescribeInstances",
      "ec2:DescribeSubnets",
      "elasticmapreduce:ListInstances",
      "elasticmapreduce:DescribeCluster"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "ec2:CreateTags",
    "Resource": "arn:aws:ec2:*:*:network-interface/*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringEquals": {
        "aws:TagKeys": [
          "aws:elasticmapreduce:editor-id",
          "aws:elasticmapreduce:job-flow-id"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:UpdateAutoScalingGroup",
        "ec2:AttachVolume",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateRoute",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:DeleteRoute",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteVolume",
        "ec2:DescribeInstances",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVolumes",
        "ec2:DescribeVolumesModifications",
        "ec2:DescribeVpcs",
        "ec2:DescribeDhcpOptions",
        "ec2:DetachVolume",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifyVolume",
        "ec2:RevokeSecurityGroupIngress",
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
        "elasticloadbalancing:AttachLoadBalancerToSubnets",
        "elasticloadbalancing:ConfigureHealthCheck",
        "elasticloadbalancing:CreateListener",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:CreateLoadBalancerListeners",
        "elasticloadbalancing:CreateLoadBalancerPolicy",
        "elasticloadbalancing:CreateTargetGroup",
        "elasticloadbalancing:DeleteListener",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancerListeners",
        "elasticloadbalancing:DeleteTargetGroup",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DeregisterTargets",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeLoadBalancerPolicies",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetGroupAttributes",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:DetachLoadBalancerFromSubnets",
        "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:ModifyTargetGroup",
        "elasticloadbalancing:ModifyTargetGroupAttributes",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:RegisterTargets",
        "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
        "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:UpdateAutoScalingGroup",
      "ec2:AttachVolume",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateRoute",
      "ec2:CreateSecurityGroup",
      "ec2:CreateTags",
      "ec2:CreateVolume",
      "ec2:DeleteRoute",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteVolume",
      "ec2:DescribeInstances",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVolumes",
      "ec2:DescribeVolumesModifications",
      "ec2:DescribeVpcs",
      "ec2:DescribeDhcpOptions",
      "ec2:DetachVolume",
      "ec2:ModifyInstanceAttribute",
      "ec2:ModifyVolume",
      "ec2:RevokeSecurityGroupIngress",
      "elasticloadbalancing:AddTags",
      "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
      "elasticloadbalancing:AttachLoadBalancerToSubnets",
      "elasticloadbalancing:ConfigureHealthCheck",
      "elasticloadbalancing:CreateListener",
      "elasticloadbalancing:CreateLoadBalancer",
      "elasticloadbalancing:CreateLoadBalancerListeners",
      "elasticloadbalancing:CreateLoadBalancerPolicy",
      "elasticloadbalancing:CreateTargetGroup",
      "elasticloadbalancing:DeleteListener",
      "elasticloadbalancing:DeleteLoadBalancer",
      "elasticloadbalancing:DeleteLoadBalancerListeners",
      "elasticloadbalancing:DeleteTargetGroup",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DeregisterTargets",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetGroupAttributes",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticloadbalancing:DetachLoadBalancerFromSubnets",
      "elasticloadbalancing:ModifyListener",
      "elasticloadbalancing:ModifyLoadBalancerAttributes",
      "elasticloadbalancing:ModifyTargetGroup",
      "elasticloadbalancing:ModifyTargetGroupAttributes",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:RegisterTargets",
      "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
      "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVolumes",
        "ec2:DescribeVolumesModifications",
        "ec2:DescribeVpcs",
        "eks:DescribeCluster"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVolumes",
      "ec2:DescribeVolumesModifications",
      "ec2:DescribeVpcs",
      "eks:DescribeCluster"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:DescribeTable",
        "iam:ListSAMLProviders",
        "lambda:ListFunctions",
        "sns:ListTopics",
        "lex:GetIntent",
        "lex:GetIntents",
        "lex:GetSlotType",
        "lex:GetSlotTypes",
        "lex:GetBot",
        "lex:GetBots",
        "lex:GetBotAlias",
        "lex:GetBotAliases",
        "mobilehub:ExportProject",
        "mobilehub:GenerateProjectParameters",
        "mobilehub:GetProject",
        "mobilehub:SynchronizeProject",
        "mobilehub:GetProjectSnapshot",
        "mobilehub:ListProjectSnapshots",
        "mobilehub:ListAvailableConnectors",
        "mobilehub:ListAvailableFeatures",
        "mobilehub:ListAvailableRegions",
        "mobilehub:ListProjects",
        "mobilehub:ValidateProject",
        "mobilehub:VerifyServiceRole",
        "mobilehub:DescribeBundle",
        "mobilehub:ExportBundle",
        "mobilehub:ListBundles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:DescribeTable",
      "iam:ListSAMLProviders",
      "lambda:ListFunctions",
      "sns:ListTopics",
      "lex:GetIntent",
      "lex:GetIntents",
      "lex:GetSlotType",
      "lex:GetSlotTypes",
      "lex:GetBot",
      "lex:GetBots",
      "lex:GetBotAlias",
      "lex:GetBotAliases",
      "mobilehub:ExportProject",
      "mobilehub:GenerateProjectParameters",
      "mobilehub:GetProject",
      "mobilehub:SynchronizeProject",
      "mobilehub:GetProjectSnapshot",
      "mobilehub:ListProjectSnapshots",
      "mobilehub:ListAvailableConnectors",
      "mobilehub:ListAvailableFeatures",
      "mobilehub:ListAvailableRegions",
      "mobilehub:ListProjects",
      "mobilehub:ValidateProject",
      "mobilehub:VerifyServiceRole",
      "mobilehub:DescribeBundle",
      "mobilehub:ExportBundle",
      "mobilehub:ListBundles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:Describe*",
        "ec2:RebootInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:CreateSnapshot"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
    }
  ]
}
[
  {
    "Action": [
      "ec2:Describe*",
      "ec2:RebootInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:CreateSnapshot"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AttachClassicLinkVpc",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateFleet",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:Describe*",
        "ec2:DetachClassicLinkVpc",
        "ec2:ModifyInstanceAttribute",
        "ec2:RequestSpotInstances",
        "ec2:RunInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "EC2InstanceManagement"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "ec2.amazonaws.com*"
        }
      },
      "Sid": "EC2InstanceProfileManagement"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "spot.amazonaws.com"
        }
      },
      "Sid": "EC2SpotManagement"
    },
    {
      "Action": [
        "elasticloadbalancing:Register*",
        "elasticloadbalancing:Deregister*",
        "elasticloadbalancing:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ELBManagement"
    },
    {
      "Action": [
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:PutMetricAlarm"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CWManagement"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "SNSManagement"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AttachClassicLinkVpc",
      "ec2:CancelSpotInstanceRequests",
      "ec2:CreateFleet",
      "ec2:CreateTags",
      "ec2:DeleteTags",
      "ec2:Describe*",
      "ec2:DetachClassicLinkVpc",
      "ec2:ModifyInstanceAttribute",
      "ec2:RequestSpotInstances",
      "ec2:RunInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "EC2InstanceManagement"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "ec2.amazonaws.com*"
      }
    },
    "Sid": "EC2InstanceProfileManagement"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "spot.amazonaws.com"
      }
    },
    "Sid": "EC2SpotManagement"
  },
  {
    "Action": [
      "elasticloadbalancing:Register*",
      "elasticloadbalancing:Deregister*",
      "elasticloadbalancing:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ELBManagement"
  },
  {
    "Action": [
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:PutMetricAlarm"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CWManagement"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "SNSManagement"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elastictranscoder:*",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "iam:ListRoles",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "elastictranscoder.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "elastictranscoder:*",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "iam:ListRoles",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "elastictranscoder.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "clouddirectory:List*",
        "clouddirectory:Get*",
        "clouddirectory:LookupPolicy",
        "clouddirectory:BatchRead"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "clouddirectory:List*",
      "clouddirectory:Get*",
      "clouddirectory:LookupPolicy",
      "clouddirectory:BatchRead"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "ec2:DescribeTags",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups",
        "logs:CreateLogStream",
        "logs:CreateLogGroup"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:GetParameter",
        "ssm:PutParameter"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "ec2:DescribeTags",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams",
      "logs:DescribeLogGroups",
      "logs:CreateLogStream",
      "logs:CreateLogGroup"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:GetParameter",
      "ssm:PutParameter"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "opsworks:*",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancers",
        "iam:GetRolePolicy",
        "iam:ListInstanceProfiles",
        "iam:ListRoles",
        "iam:ListUsers",
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "opsworks:*",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancers",
      "iam:GetRolePolicy",
      "iam:ListInstanceProfiles",
      "iam:ListRoles",
      "iam:ListUsers",
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:DescribeStackResource",
        "cloudformation:SignalResource"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:AbortMultipartUpload",
        "s3:DeleteObject",
        "s3:GetObject",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:ListMultipartUploadParts",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::aws-opsworks-cm-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:DescribeStackResource",
      "cloudformation:SignalResource"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:AbortMultipartUpload",
      "s3:DeleteObject",
      "s3:GetObject",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:ListMultipartUploadParts",
      "s3:PutObject"
    ],
    "Resource": "arn:aws:s3:::aws-opsworks-cm-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "batch:SubmitJob"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "batch:SubmitJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:GetPipelineExecution",
        "codepipeline:ListPipelineExecutions",
        "codepipeline:ListPipelines",
        "codepipeline:PutApprovalResult"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codepipeline:GetPipeline",
      "codepipeline:GetPipelineState",
      "codepipeline:GetPipelineExecution",
      "codepipeline:ListPipelineExecutions",
      "codepipeline:ListPipelines",
      "codepipeline:PutApprovalResult"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "arsenal:RegisterOnPremisesAgent"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "arsenal:RegisterOnPremisesAgent"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:ListCertificates",
        "athena:List*",
        "aws-marketplace:ViewSubscriptions",
        "autoscaling:Describe*",
        "batch:ListJobs",
        "clouddirectory:ListAppliedSchemaArns",
        "clouddirectory:ListDevelopmentSchemaArns",
        "clouddirectory:ListDirectories",
        "clouddirectory:ListPublishedSchemaArns",
        "cloudformation:List*",
        "cloudformation:DescribeStacks",
        "cloudfront:List*",
        "cloudhsm:ListAvailableZones",
        "cloudhsm:ListLunaClients",
        "cloudhsm:ListHapgs",
        "cloudhsm:ListHsms",
        "cloudsearch:List*",
        "cloudsearch:DescribeDomains",
        "cloudtrail:DescribeTrails",
        "cloudtrail:LookupEvents",
        "cloudwatch:List*",
        "cloudwatch:Get*",
        "codebuild:ListBuilds*",
        "codebuild:ListProjects",
        "codecommit:List*",
        "codedeploy:List*",
        "codedeploy:Get*",
        "codepipeline:ListPipelines",
        "codestar:List*",
        "codestar:Verify*",
        "cognito-idp:List*",
        "cognito-identity:ListIdentities",
        "cognito-identity:ListIdentityPools",
        "cognito-sync:ListDatasets",
        "connect:List*",
        "config:List*",
        "config:Describe*",
        "datapipeline:ListPipelines",
        "datapipeline:DescribePipelines",
        "datapipeline:GetAccountLimits",
        "dax:DescribeClusters",
        "dax:DescribeDefaultParameters",
        "dax:DescribeEvents",
        "dax:DescribeParameterGroups",
        "dax:DescribeParameters",
        "dax:DescribeSubnetGroups",
        "dax:DescribeTable",
        "dax:ListTables",
        "dax:ListTags",
        "devicefarm:List*",
        "directconnect:Describe*",
        "discovery:List*",
        "dms:List*",
        "ds:DescribeDirectories",
        "dynamodb:DescribeBackup",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:DescribeGlobalTable",
        "dynamodb:DescribeGlobalTableSettings",
        "dynamodb:DescribeLimits",
        "dynamodb:DescribeReservedCapacity",
        "dynamodb:DescribeReservedCapacityOfferings",
        "dynamodb:DescribeStream",
        "dynamodb:DescribeTable",
        "dynamodb:DescribeTimeToLive",
        "dynamodb:ListBackups",
        "dynamodb:ListGlobalTables",
        "dynamodb:ListStreams",
        "dynamodb:ListTables",
        "dynamodb:ListTagsOfResource",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeBundleTasks",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeConversionTasks",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeExportTasks",
        "ec2:DescribeFlowLogs",
        "ec2:DescribeHost*",
        "ec2:DescribeIdentityIdFormat",
        "ec2:DescribeIdFormat",
        "ec2:DescribeImage*",
        "ec2:DescribeImport*",
        "ec2:DescribeInstance*",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeMovingAddresses",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetwork*",
        "ec2:DescribePlacementGroups",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRegions",
        "ec2:DescribeReserved*",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSnapshot*",
        "ec2:DescribeSpot*",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVolume*",
        "ec2:DescribeVpc*",
        "ec2:DescribeVpnGateways",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecs:List*",
        "ecs:Describe*",
        "elasticache:Describe*",
        "elasticbeanstalk:DescribeApplicationVersions",
        "elasticbeanstalk:DescribeApplications",
        "elasticbeanstalk:DescribeEnvironments",
        "elasticbeanstalk:ListAvailableSolutionStacks",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticfilesystem:DescribeFileSystems",
        "elasticmapreduce:List*",
        "elastictranscoder:List*",
        "es:DescribeElasticsearchDomain",
        "es:DescribeElasticsearchDomains",
        "es:ListDomainNames",
        "events:ListRuleNamesByTarget",
        "events:ListRules",
        "events:ListTargetsByRule",
        "firehose:List*",
        "firehose:DescribeDeliveryStream",
        "gamelift:List*",
        "glacier:List*",
        "greengrass:List*",
        "iam:List*",
        "iam:GetAccountSummary",
        "iam:GetLoginProfile",
        "importexport:ListJobs",
        "inspector:List*",
        "iot:List*",
        "kinesis:ListStreams",
        "kinesisanalytics:ListApplications",
        "kms:ListKeys",
        "lambda:List*",
        "lex:GetBotAliases",
        "lex:GetBotChannelAssociations",
        "lex:GetBots",
        "lex:GetBotVersions",
        "lex:GetIntents",
        "lex:GetIntentVersions",
        "lex:GetSlotTypes",
        "lex:GetSlotTypeVersions",
        "lex:GetUtterancesView",
        "lightsail:GetBlueprints",
        "lightsail:GetBundles",
        "lightsail:GetInstances",
        "lightsail:GetInstanceSnapshots",
        "lightsail:GetKeyPair",
        "lightsail:GetRegions",
        "lightsail:GetStaticIps",
        "lightsail:IsVpcPeered",
        "logs:Describe*",
        "machinelearning:Describe*",
        "mobilehub:ListAvailableFeatures",
        "mobilehub:ListAvailableRegions",
        "mobilehub:ListProjects",
        "opsworks:Describe*",
        "opsworks-cm:Describe*",
        "organizations:List*",
        "mobiletargeting:GetApplicationSettings",
        "mobiletargeting:GetCampaigns",
        "mobiletargeting:GetImportJobs",
        "mobiletargeting:GetSegments",
        "polly:Describe*",
        "polly:List*",
        "rds:Describe*",
        "redshift:DescribeClusters",
        "redshift:DescribeEvents",
        "redshift:ViewQueriesInConsole",
        "route53:List*",
        "route53:Get*",
        "route53domains:List*",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "sagemaker:Describe*",
        "sagemaker:List*",
        "sdb:List*",
        "servicecatalog:List*",
        "ses:List*",
        "shield:List*",
        "states:ListActivities",
        "states:ListStateMachines",
        "sns:List*",
        "sqs:ListQueues",
        "ssm:ListAssociations",
        "ssm:ListDocuments",
        "storagegateway:ListGateways",
        "storagegateway:ListLocalDisks",
        "storagegateway:ListVolumeRecoveryPoints",
        "storagegateway:ListVolumes",
        "swf:List*",
        "trustedadvisor:Describe*",
        "waf:List*",
        "waf-regional:List*",
        "workdocs:DescribeAvailableDirectories",
        "workdocs:DescribeInstances",
        "workmail:Describe*",
        "workspaces:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:ListCertificates",
      "athena:List*",
      "aws-marketplace:ViewSubscriptions",
      "autoscaling:Describe*",
      "batch:ListJobs",
      "clouddirectory:ListAppliedSchemaArns",
      "clouddirectory:ListDevelopmentSchemaArns",
      "clouddirectory:ListDirectories",
      "clouddirectory:ListPublishedSchemaArns",
      "cloudformation:List*",
      "cloudformation:DescribeStacks",
      "cloudfront:List*",
      "cloudhsm:ListAvailableZones",
      "cloudhsm:ListLunaClients",
      "cloudhsm:ListHapgs",
      "cloudhsm:ListHsms",
      "cloudsearch:List*",
      "cloudsearch:DescribeDomains",
      "cloudtrail:DescribeTrails",
      "cloudtrail:LookupEvents",
      "cloudwatch:List*",
      "cloudwatch:Get*",
      "codebuild:ListBuilds*",
      "codebuild:ListProjects",
      "codecommit:List*",
      "codedeploy:List*",
      "codedeploy:Get*",
      "codepipeline:ListPipelines",
      "codestar:List*",
      "codestar:Verify*",
      "cognito-idp:List*",
      "cognito-identity:ListIdentities",
      "cognito-identity:ListIdentityPools",
      "cognito-sync:ListDatasets",
      "connect:List*",
      "config:List*",
      "config:Describe*",
      "datapipeline:ListPipelines",
      "datapipeline:DescribePipelines",
      "datapipeline:GetAccountLimits",
      "dax:DescribeClusters",
      "dax:DescribeDefaultParameters",
      "dax:DescribeEvents",
      "dax:DescribeParameterGroups",
      "dax:DescribeParameters",
      "dax:DescribeSubnetGroups",
      "dax:DescribeTable",
      "dax:ListTables",
      "dax:ListTags",
      "devicefarm:List*",
      "directconnect:Describe*",
      "discovery:List*",
      "dms:List*",
      "ds:DescribeDirectories",
      "dynamodb:DescribeBackup",
      "dynamodb:DescribeContinuousBackups",
      "dynamodb:DescribeGlobalTable",
      "dynamodb:DescribeGlobalTableSettings",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeReservedCapacity",
      "dynamodb:DescribeReservedCapacityOfferings",
      "dynamodb:DescribeStream",
      "dynamodb:DescribeTable",
      "dynamodb:DescribeTimeToLive",
      "dynamodb:ListBackups",
      "dynamodb:ListGlobalTables",
      "dynamodb:ListStreams",
      "dynamodb:ListTables",
      "dynamodb:ListTagsOfResource",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeBundleTasks",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeConversionTasks",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeExportTasks",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeHost*",
      "ec2:DescribeIdentityIdFormat",
      "ec2:DescribeIdFormat",
      "ec2:DescribeImage*",
      "ec2:DescribeImport*",
      "ec2:DescribeInstance*",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetwork*",
      "ec2:DescribePlacementGroups",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRegions",
      "ec2:DescribeReserved*",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshot*",
      "ec2:DescribeSpot*",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVolume*",
      "ec2:DescribeVpc*",
      "ec2:DescribeVpnGateways",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecs:List*",
      "ecs:Describe*",
      "elasticache:Describe*",
      "elasticbeanstalk:DescribeApplicationVersions",
      "elasticbeanstalk:DescribeApplications",
      "elasticbeanstalk:DescribeEnvironments",
      "elasticbeanstalk:ListAvailableSolutionStacks",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticfilesystem:DescribeFileSystems",
      "elasticmapreduce:List*",
      "elastictranscoder:List*",
      "es:DescribeElasticsearchDomain",
      "es:DescribeElasticsearchDomains",
      "es:ListDomainNames",
      "events:ListRuleNamesByTarget",
      "events:ListRules",
      "events:ListTargetsByRule",
      "firehose:List*",
      "firehose:DescribeDeliveryStream",
      "gamelift:List*",
      "glacier:List*",
      "greengrass:List*",
      "iam:List*",
      "iam:GetAccountSummary",
      "iam:GetLoginProfile",
      "importexport:ListJobs",
      "inspector:List*",
      "iot:List*",
      "kinesis:ListStreams",
      "kinesisanalytics:ListApplications",
      "kms:ListKeys",
      "lambda:List*",
      "lex:GetBotAliases",
      "lex:GetBotChannelAssociations",
      "lex:GetBots",
      "lex:GetBotVersions",
      "lex:GetIntents",
      "lex:GetIntentVersions",
      "lex:GetSlotTypes",
      "lex:GetSlotTypeVersions",
      "lex:GetUtterancesView",
      "lightsail:GetBlueprints",
      "lightsail:GetBundles",
      "lightsail:GetInstances",
      "lightsail:GetInstanceSnapshots",
      "lightsail:GetKeyPair",
      "lightsail:GetRegions",
      "lightsail:GetStaticIps",
      "lightsail:IsVpcPeered",
      "logs:Describe*",
      "machinelearning:Describe*",
      "mobilehub:ListAvailableFeatures",
      "mobilehub:ListAvailableRegions",
      "mobilehub:ListProjects",
      "opsworks:Describe*",
      "opsworks-cm:Describe*",
      "organizations:List*",
      "mobiletargeting:GetApplicationSettings",
      "mobiletargeting:GetCampaigns",
      "mobiletargeting:GetImportJobs",
      "mobiletargeting:GetSegments",
      "polly:Describe*",
      "polly:List*",
      "rds:Describe*",
      "redshift:DescribeClusters",
      "redshift:DescribeEvents",
      "redshift:ViewQueriesInConsole",
      "route53:List*",
      "route53:Get*",
      "route53domains:List*",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "sagemaker:Describe*",
      "sagemaker:List*",
      "sdb:List*",
      "servicecatalog:List*",
      "ses:List*",
      "shield:List*",
      "states:ListActivities",
      "states:ListStateMachines",
      "sns:List*",
      "sqs:ListQueues",
      "ssm:ListAssociations",
      "ssm:ListDocuments",
      "storagegateway:ListGateways",
      "storagegateway:ListLocalDisks",
      "storagegateway:ListVolumeRecoveryPoints",
      "storagegateway:ListVolumes",
      "swf:List*",
      "trustedadvisor:Describe*",
      "waf:List*",
      "waf-regional:List*",
      "workdocs:DescribeAvailableDirectories",
      "workdocs:DescribeInstances",
      "workmail:Describe*",
      "workspaces:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "crowd:GetTask"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "CrowdApiReadOnlyAccess"
    }
  ]
}
[
  {
    "Action": [
      "crowd:GetTask"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "CrowdApiReadOnlyAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteTags",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeImages",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeSpotPriceHistory",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcEndpointServices",
        "ec2:DescribeVpcs",
        "ec2:DetachNetworkInterface",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:RequestSpotInstances",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RunInstances",
        "ec2:TerminateInstances",
        "ec2:DeleteVolume",
        "ec2:DescribeVolumeStatus",
        "ec2:DescribeVolumes",
        "ec2:DetachVolume",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListInstanceProfiles",
        "iam:ListRolePolicies",
        "iam:PassRole",
        "s3:CreateBucket",
        "s3:Get*",
        "s3:List*",
        "sdb:BatchPutAttributes",
        "sdb:Select",
        "sqs:CreateQueue",
        "sqs:Delete*",
        "sqs:GetQueue*",
        "sqs:PurgeQueue",
        "sqs:ReceiveMessage",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms",
        "application-autoscaling:RegisterScalableTarget",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "spot.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CancelSpotInstanceRequests",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:CreateTags",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteTags",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeImages",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSpotPriceHistory",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcEndpointServices",
      "ec2:DescribeVpcs",
      "ec2:DetachNetworkInterface",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:RequestSpotInstances",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RunInstances",
      "ec2:TerminateInstances",
      "ec2:DeleteVolume",
      "ec2:DescribeVolumeStatus",
      "ec2:DescribeVolumes",
      "ec2:DetachVolume",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListInstanceProfiles",
      "iam:ListRolePolicies",
      "iam:PassRole",
      "s3:CreateBucket",
      "s3:Get*",
      "s3:List*",
      "sdb:BatchPutAttributes",
      "sdb:Select",
      "sqs:CreateQueue",
      "sqs:Delete*",
      "sqs:GetQueue*",
      "sqs:PurgeQueue",
      "sqs:ReceiveMessage",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms",
      "application-autoscaling:RegisterScalableTarget",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "spot.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "elasticloadbalancing:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeInstances",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeRouteTables",
        "cognito-idp:DescribeUserPoolClient"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "elasticloadbalancing:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeInstances",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeRouteTables",
      "cognito-idp:DescribeUserPoolClient"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53domains:Get*",
        "route53domains:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53domains:Get*",
      "route53domains:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:DescribeAutomationExecutions",
        "ssm:GetAutomationExecution",
        "ssm:SendAutomationSignal"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ssm:DescribeAutomationExecutions",
      "ssm:GetAutomationExecution",
      "ssm:SendAutomationSignal"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancers",
        "iam:GetRolePolicy",
        "iam:ListInstanceProfiles",
        "iam:ListRoles",
        "iam:ListUsers",
        "iam:PassRole",
        "opsworks:*",
        "rds:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancers",
      "iam:GetRolePolicy",
      "iam:ListInstanceProfiles",
      "iam:ListRoles",
      "iam:ListUsers",
      "iam:PassRole",
      "opsworks:*",
      "rds:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "securityhub:Get*",
        "securityhub:List*",
        "securityhub:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "securityhub:Get*",
      "securityhub:List*",
      "securityhub:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "organizations:ListAccounts",
        "organizations:DescribeOrganization",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "organizations:ListAccounts",
      "organizations:DescribeOrganization",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appstream:UpdateFleet",
        "appstream:DescribeFleets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:DescribeAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appstream:UpdateFleet",
      "appstream:DescribeFleets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:DescribeAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecr:*",
      "cloudtrail:LookupEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "fsx:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "fsx.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "s3.data-source.lustre.fsx.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "fsx:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "fsx.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "s3.data-source.lustre.fsx.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "swf:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "swf:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::*-greengrass-updates/*"
      ],
      "Effect": "Allow",
      "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::*-greengrass-updates/*"
    ],
    "Effect": "Allow",
    "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "s3:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "storagegateway:List*",
        "storagegateway:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "storagegateway:List*",
      "storagegateway:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-portal:*Billing",
        "awsbillingconsole:*Billing",
        "aws-portal:*Usage",
        "awsbillingconsole:*Usage",
        "aws-portal:*PaymentMethods",
        "awsbillingconsole:*PaymentMethods",
        "budgets:ViewBudget",
        "budgets:ModifyBudget",
        "cur:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-portal:*Billing",
      "awsbillingconsole:*Billing",
      "aws-portal:*Usage",
      "awsbillingconsole:*Usage",
      "aws-portal:*PaymentMethods",
      "awsbillingconsole:*PaymentMethods",
      "budgets:ViewBudget",
      "budgets:ModifyBudget",
      "cur:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectMetadata"
      ],
      "Resource": [
        "arn:aws:s3:::s3-analytics-export-shared-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetAnalyticsConfiguration",
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectMetadata"
    ],
    "Resource": [
      "arn:aws:s3:::s3-analytics-export-shared-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetAnalyticsConfiguration",
      "s3:ListAllMyBuckets",
      "s3:GetBucketLocation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetRepositoryPolicy",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecr:DescribeImages",
        "ecr:BatchGetImage"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:DescribeImages",
      "ecr:BatchGetImage"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "robomaker:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "robomaker.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "robomaker:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "robomaker.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:*",
        "dynamodb:*",
        "ec2:Describe*",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:ListBootstrapActions",
        "elasticmapreduce:ListClusters",
        "elasticmapreduce:ListInstanceGroups",
        "elasticmapreduce:ListInstances",
        "elasticmapreduce:ListSteps",
        "kinesis:CreateStream",
        "kinesis:DeleteStream",
        "kinesis:DescribeStream",
        "kinesis:GetRecords",
        "kinesis:GetShardIterator",
        "kinesis:MergeShards",
        "kinesis:PutRecord",
        "kinesis:SplitShard",
        "rds:Describe*",
        "s3:*",
        "sdb:*",
        "sns:*",
        "sqs:*",
        "glue:CreateDatabase",
        "glue:UpdateDatabase",
        "glue:DeleteDatabase",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:CreateTable",
        "glue:UpdateTable",
        "glue:DeleteTable",
        "glue:GetTable",
        "glue:GetTables",
        "glue:GetTableVersions",
        "glue:CreatePartition",
        "glue:BatchCreatePartition",
        "glue:UpdatePartition",
        "glue:DeletePartition",
        "glue:BatchDeletePartition",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:BatchGetPartition",
        "glue:CreateUserDefinedFunction",
        "glue:UpdateUserDefinedFunction",
        "glue:DeleteUserDefinedFunction",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:*",
      "dynamodb:*",
      "ec2:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:ListBootstrapActions",
      "elasticmapreduce:ListClusters",
      "elasticmapreduce:ListInstanceGroups",
      "elasticmapreduce:ListInstances",
      "elasticmapreduce:ListSteps",
      "kinesis:CreateStream",
      "kinesis:DeleteStream",
      "kinesis:DescribeStream",
      "kinesis:GetRecords",
      "kinesis:GetShardIterator",
      "kinesis:MergeShards",
      "kinesis:PutRecord",
      "kinesis:SplitShard",
      "rds:Describe*",
      "s3:*",
      "sdb:*",
      "sns:*",
      "sqs:*",
      "glue:CreateDatabase",
      "glue:UpdateDatabase",
      "glue:DeleteDatabase",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:CreateTable",
      "glue:UpdateTable",
      "glue:DeleteTable",
      "glue:GetTable",
      "glue:GetTables",
      "glue:GetTableVersions",
      "glue:CreatePartition",
      "glue:BatchCreatePartition",
      "glue:UpdatePartition",
      "glue:DeletePartition",
      "glue:BatchDeletePartition",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:BatchGetPartition",
      "glue:CreateUserDefinedFunction",
      "glue:UpdateUserDefinedFunction",
      "glue:DeleteUserDefinedFunction",
      "glue:GetUserDefinedFunction",
      "glue:GetUserDefinedFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DeleteAlarms",
        "cloudwatch:Describe*",
        "cloudwatch:DisableAlarmActions",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "cloudwatch:PutMetricAlarm",
        "datapipeline:ActivatePipeline",
        "datapipeline:CreatePipeline",
        "datapipeline:DeletePipeline",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:ListPipelines",
        "datapipeline:PutPipelineDefinition",
        "datapipeline:QueryObjects",
        "dynamodb:*",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "elasticache:*",
        "iam:ListRoles",
        "iam:GetRole",
        "kms:ListKeys",
        "lambda:CreateEventSourceMapping",
        "lambda:CreateFunction",
        "lambda:DeleteEventSourceMapping",
        "lambda:DeleteFunction",
        "lambda:GetFunctionConfiguration",
        "lambda:ListEventSourceMappings",
        "lambda:ListFunctions",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:FilterLogEvents",
        "logs:GetLogEvents",
        "logs:Create*",
        "logs:PutLogEvents",
        "logs:PutMetricFilter",
        "rds:*",
        "redshift:*",
        "s3:CreateBucket",
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:Get*",
        "sns:List*",
        "sns:SetTopicAttributes",
        "sns:Subscribe",
        "sns:Unsubscribe"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:AbortMultipartUpload",
        "s3:DeleteObject*",
        "s3:Get*",
        "s3:List*",
        "s3:PutAccelerateConfiguration",
        "s3:PutBucketTagging",
        "s3:PutBucketVersioning",
        "s3:PutBucketWebsite",
        "s3:PutLifecycleConfiguration",
        "s3:PutReplicationConfiguration",
        "s3:PutObject*",
        "s3:Replicate*",
        "s3:RestoreObject"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/rds-monitoring-role",
        "arn:aws:iam::*:role/rdbms-lambda-access",
        "arn:aws:iam::*:role/lambda_exec_role",
        "arn:aws:iam::*:role/lambda-dynamodb-*",
        "arn:aws:iam::*:role/lambda-vpc-execution-role",
        "arn:aws:iam::*:role/DataPipelineDefaultRole",
        "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DeleteAlarms",
      "cloudwatch:Describe*",
      "cloudwatch:DisableAlarmActions",
      "cloudwatch:EnableAlarmActions",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "cloudwatch:PutMetricAlarm",
      "datapipeline:ActivatePipeline",
      "datapipeline:CreatePipeline",
      "datapipeline:DeletePipeline",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:PutPipelineDefinition",
      "datapipeline:QueryObjects",
      "dynamodb:*",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "elasticache:*",
      "iam:ListRoles",
      "iam:GetRole",
      "kms:ListKeys",
      "lambda:CreateEventSourceMapping",
      "lambda:CreateFunction",
      "lambda:DeleteEventSourceMapping",
      "lambda:DeleteFunction",
      "lambda:GetFunctionConfiguration",
      "lambda:ListEventSourceMappings",
      "lambda:ListFunctions",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:FilterLogEvents",
      "logs:GetLogEvents",
      "logs:Create*",
      "logs:PutLogEvents",
      "logs:PutMetricFilter",
      "rds:*",
      "redshift:*",
      "s3:CreateBucket",
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:Get*",
      "sns:List*",
      "sns:SetTopicAttributes",
      "sns:Subscribe",
      "sns:Unsubscribe"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:AbortMultipartUpload",
      "s3:DeleteObject*",
      "s3:Get*",
      "s3:List*",
      "s3:PutAccelerateConfiguration",
      "s3:PutBucketTagging",
      "s3:PutBucketVersioning",
      "s3:PutBucketWebsite",
      "s3:PutLifecycleConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObject*",
      "s3:Replicate*",
      "s3:RestoreObject"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/rds-monitoring-role",
      "arn:aws:iam::*:role/rdbms-lambda-access",
      "arn:aws:iam::*:role/lambda_exec_role",
      "arn:aws:iam::*:role/lambda-dynamodb-*",
      "arn:aws:iam::*:role/lambda-vpc-execution-role",
      "arn:aws:iam::*:role/DataPipelineDefaultRole",
      "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:Describe*",
        "redshift:ViewQueriesInConsole",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeInternetGateways",
        "sns:Get*",
        "sns:List*",
        "cloudwatch:Describe*",
        "cloudwatch:List*",
        "cloudwatch:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "redshift:Describe*",
      "redshift:ViewQueriesInConsole",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeInternetGateways",
      "sns:Get*",
      "sns:List*",
      "cloudwatch:Describe*",
      "cloudwatch:List*",
      "cloudwatch:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ec2:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "autoscaling:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "ec2:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:ListMetrics",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "autoscaling:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "ec2:DescribeTags",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups",
        "logs:CreateLogStream",
        "logs:CreateLogGroup"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:GetParameter"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "ec2:DescribeTags",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams",
      "logs:DescribeLogGroups",
      "logs:CreateLogStream",
      "logs:CreateLogGroup"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:GetParameter"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets",
        "xray:GetSamplingStatisticSummaries",
        "xray:BatchGetTraces",
        "xray:GetServiceGraph",
        "xray:GetTraceGraph",
        "xray:GetTraceSummaries",
        "xray:GetGroups",
        "xray:GetGroup",
        "xray:GetTimeSeriesServiceStatistics"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "xray:GetSamplingRules",
      "xray:GetSamplingTargets",
      "xray:GetSamplingStatisticSummaries",
      "xray:BatchGetTraces",
      "xray:GetServiceGraph",
      "xray:GetTraceGraph",
      "xray:GetTraceSummaries",
      "xray:GetGroups",
      "xray:GetGroup",
      "xray:GetTimeSeriesServiceStatistics"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetHealth",
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:GetConsoleOutput",
        "ec2:AssociateAddress",
        "ec2:DescribeAddresses",
        "ec2:DescribeSecurityGroups",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:DescribeScalingActivities",
        "autoscaling:DescribeNotificationConfigurations",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:DescribeLogStreams",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetHealth",
      "ec2:DescribeInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:GetConsoleOutput",
      "ec2:AssociateAddress",
      "ec2:DescribeAddresses",
      "ec2:DescribeSecurityGroups",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeScalingActivities",
      "autoscaling:DescribeNotificationConfigurations",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:DescribeLogStreams",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "wellarchitected:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "wellarchitected:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticmapreduce:Describe*",
        "elasticmapreduce:List*",
        "elasticmapreduce:ViewEventsFromAllClustersInConsole",
        "s3:GetObject",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "sdb:Select",
        "cloudwatch:GetMetricStatistics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticmapreduce:Describe*",
      "elasticmapreduce:List*",
      "elasticmapreduce:ViewEventsFromAllClustersInConsole",
      "s3:GetObject",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "sdb:Select",
      "cloudwatch:GetMetricStatistics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:Check*",
        "ds:Describe*",
        "ds:Get*",
        "ds:List*",
        "ds:Verify*",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "sns:ListTopics",
        "sns:GetTopicAttributes",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ds:Check*",
      "ds:Describe*",
      "ds:Get*",
      "ds:List*",
      "ds:Verify*",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "sns:ListTopics",
      "sns:GetTopicAttributes",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "sso.amazonaws.com"
        }
      },
      "Sid": "AWSSSOMasterAccountAdministrator"
    },
    {
      "Action": [
        "ds:DescribeTrusts",
        "ds:UnauthorizeApplication",
        "ds:DescribeDirectories",
        "ds:AuthorizeApplication",
        "iam:ListPolicies",
        "organizations:EnableAWSServiceAccess",
        "organizations:ListRoots",
        "organizations:ListAccounts",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListAccountsForParent",
        "organizations:DescribeOrganization",
        "organizations:ListChildren",
        "organizations:DescribeAccount",
        "organizations:ListParents",
        "sso:*",
        "sso-directory:DescribeDirectory",
        "ds:CreateAlias"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AWSSSOMemberAccountAdministrator"
    }
  ]
}
[
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "sso.amazonaws.com"
      }
    },
    "Sid": "AWSSSOMasterAccountAdministrator"
  },
  {
    "Action": [
      "ds:DescribeTrusts",
      "ds:UnauthorizeApplication",
      "ds:DescribeDirectories",
      "ds:AuthorizeApplication",
      "iam:ListPolicies",
      "organizations:EnableAWSServiceAccess",
      "organizations:ListRoots",
      "organizations:ListAccounts",
      "organizations:ListOrganizationalUnitsForParent",
      "organizations:ListAccountsForParent",
      "organizations:DescribeOrganization",
      "organizations:ListChildren",
      "organizations:DescribeAccount",
      "organizations:ListParents",
      "sso:*",
      "sso-directory:DescribeDirectory",
      "ds:CreateAlias"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AWSSSOMemberAccountAdministrator"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeImages"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeImages"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeEgressOnlyInternetGateways",
        "ec2:DescribeFlowLogs",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeMovingAddresses",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeStaleSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeVpcClassicLinkDnsSupport",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcEndpointConnectionNotifications",
        "ec2:DescribeVpcEndpointConnections",
        "ec2:DescribeVpcEndpointServiceConfigurations",
        "ec2:DescribeVpcEndpointServicePermissions",
        "ec2:DescribeVpcEndpointServices",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpnGateways"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeEgressOnlyInternetGateways",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeVpcClassicLinkDnsSupport",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcEndpointConnectionNotifications",
      "ec2:DescribeVpcEndpointConnections",
      "ec2:DescribeVpcEndpointServiceConfigurations",
      "ec2:DescribeVpcEndpointServicePermissions",
      "ec2:DescribeVpcEndpointServices",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/awseb-*",
        "arn:aws:cloudformation:*:*:stack/eb-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
    },
    {
      "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:DescribeNotificationConfigurations",
        "autoscaling:DescribeScalingActivities",
        "autoscaling:PutNotificationConfiguration",
        "ec2:DescribeInstanceStatus",
        "ec2:AssociateAddress",
        "ec2:DescribeAddresses",
        "ec2:DescribeInstances",
        "ec2:DescribeSecurityGroups",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:DescribeTargetGroups",
        "lambda:GetFunction",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AllowOperations"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:DeleteLogGroup",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*",
      "Effect": "Allow",
      "Sid": "AllowOperationsOnHealthStreamingLogs"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/awseb-*",
      "arn:aws:cloudformation:*:*:stack/eb-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
  },
  {
    "Action": [
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeNotificationConfigurations",
      "autoscaling:DescribeScalingActivities",
      "autoscaling:PutNotificationConfiguration",
      "ec2:DescribeInstanceStatus",
      "ec2:AssociateAddress",
      "ec2:DescribeAddresses",
      "ec2:DescribeInstances",
      "ec2:DescribeSecurityGroups",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticloadbalancing:DescribeTargetGroups",
      "lambda:GetFunction",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AllowOperations"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:DeleteLogGroup",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*",
    "Effect": "Allow",
    "Sid": "AllowOperationsOnHealthStreamingLogs"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:ModifyInstanceAttribute",
        "ec2:StopInstances",
        "ec2:StartInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        }
      }
    },
    {
      "Action": "ec2:CreateTags",
      "Resource": "arn:aws:ec2:*:*:instance/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:RunInstances",
        "ec2:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:ModifyInstanceAttribute",
      "ec2:StopInstances",
      "ec2:StartInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
      }
    }
  },
  {
    "Action": "ec2:CreateTags",
    "Resource": "arn:aws:ec2:*:*:instance/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:RunInstances",
      "ec2:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DescribeServices",
        "ecs:CreateTaskSet",
        "ecs:UpdateServicePrimaryTaskSet",
        "ecs:DeleteTaskSet",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:ModifyRule",
        "lambda:InvokeFunction",
        "cloudwatch:DescribeAlarms",
        "sns:Publish",
        "s3:GetObject",
        "s3:GetObjectMetadata",
        "s3:GetObjectVersion"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ecs-tasks.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ecs:DescribeServices",
      "ecs:CreateTaskSet",
      "ecs:UpdateServicePrimaryTaskSet",
      "ecs:DeleteTaskSet",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:ModifyListener",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:ModifyRule",
      "lambda:InvokeFunction",
      "cloudwatch:DescribeAlarms",
      "sns:Publish",
      "s3:GetObject",
      "s3:GetObjectMetadata",
      "s3:GetObjectVersion"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ecs-tasks.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "events:DescribeRule",
        "events:ListRuleNamesByTarget",
        "events:ListRules",
        "events:ListTargetsByRule",
        "events:TestEventPattern",
        "events:DescribeEventBus"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsReadOnlyAccess"
    }
  ]
}
[
  {
    "Action": [
      "events:DescribeRule",
      "events:ListRuleNamesByTarget",
      "events:ListRules",
      "events:ListTargetsByRule",
      "events:TestEventPattern",
      "events:DescribeEventBus"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsReadOnlyAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:DeleteFunction",
        "lambda:DisableReplication"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:*"
      ],
      "Effect": "Allow",
      "Sid": "LambdaCreateDeletePermission"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      },
      "Sid": "IamPassRolePermission"
    },
    {
      "Action": [
        "cloudfront:ListDistributionsByLambdaFunction"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "CloudFrontListDistributions"
    }
  ]
}
[
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:DeleteFunction",
      "lambda:DisableReplication"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:*"
    ],
    "Effect": "Allow",
    "Sid": "LambdaCreateDeletePermission"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    },
    "Sid": "IamPassRolePermission"
  },
  {
    "Action": [
      "cloudfront:ListDistributionsByLambdaFunction"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "CloudFrontListDistributions"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "execute-api:Invoke",
        "execute-api:ManageConnections"
      ],
      "Resource": "arn:aws:execute-api:*:*:*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "execute-api:Invoke",
      "execute-api:ManageConnections"
    ],
    "Resource": "arn:aws:execute-api:*:*:*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:AttachRolePolicy",
        "iam:CreateRole",
        "iam:DeleteRole",
        "iam:DeleteRolePolicy",
        "iam:DetachRolePolicy",
        "iam:GetRole",
        "iam:ListRolePolicies",
        "iam:PutRolePolicy",
        "iam:ListAttachedRolePolicies",
        "iam:UpdateRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:ListRoles"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "ListRolesInTheAccount"
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus",
        "iam:DeleteRole",
        "iam:GetRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
      ],
      "Effect": "Allow",
      "Sid": "AllowDeletionOfServiceLinkedRoleForSSO"
    },
    {
      "Action": [
        "iam:CreateSAMLProvider",
        "iam:GetSAMLProvider",
        "iam:UpdateSAMLProvider",
        "iam:DeleteSAMLProvider"
      ],
      "Resource": [
        "arn:aws:iam::*:saml-provider/AWSSSO_*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAccounts"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ds:UnauthorizeApplication"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AllowUnauthAppForDirectory"
    }
  ]
}
[
  {
    "Action": [
      "iam:AttachRolePolicy",
      "iam:CreateRole",
      "iam:DeleteRole",
      "iam:DeleteRolePolicy",
      "iam:DetachRolePolicy",
      "iam:GetRole",
      "iam:ListRolePolicies",
      "iam:PutRolePolicy",
      "iam:ListAttachedRolePolicies",
      "iam:UpdateRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:ListRoles"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "ListRolesInTheAccount"
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus",
      "iam:DeleteRole",
      "iam:GetRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
    ],
    "Effect": "Allow",
    "Sid": "AllowDeletionOfServiceLinkedRoleForSSO"
  },
  {
    "Action": [
      "iam:CreateSAMLProvider",
      "iam:GetSAMLProvider",
      "iam:UpdateSAMLProvider",
      "iam:DeleteSAMLProvider"
    ],
    "Resource": [
      "arn:aws:iam::*:saml-provider/AWSSSO_*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAccounts"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ds:UnauthorizeApplication"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AllowUnauthAppForDirectory"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:GetLifecycleConfiguration",
        "s3:PutLifecycleConfiguration",
        "s3:GetBucketPolicy",
        "s3:PutBucketPolicy"
      ],
      "Resource": [
        "arn:aws:s3:::aws-license-manager-service-*"
      ],
      "Effect": "Allow",
      "Sid": "S3BucketPermissions"
    },
    {
      "Action": [
        "s3:AbortMultipartUpload",
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": [
        "arn:aws:s3:::aws-license-manager-service-*"
      ],
      "Effect": "Allow",
      "Sid": "S3ObjectPermissions1"
    },
    {
      "Action": [
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-license-manager-service-*/resource_sync/*"
      ],
      "Effect": "Allow",
      "Sid": "S3ObjectPermissions2"
    },
    {
      "Action": [
        "athena:GetQueryExecution",
        "athena:GetQueryResults",
        "athena:StartQueryExecution"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AthenaPermissions"
    },
    {
      "Action": [
        "glue:GetTable",
        "glue:GetPartition",
        "glue:GetPartitions"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "GluePermissions"
    },
    {
      "Action": [
        "organizations:DescribeOrganization",
        "organizations:ListAccounts",
        "organizations:DescribeAccount",
        "organizations:ListChildren",
        "organizations:ListParents",
        "organizations:ListAccountsForParent",
        "organizations:ListRoots",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "OrganizationPermissions"
    },
    {
      "Action": [
        "ram:GetResourceShares",
        "ram:GetResourceShareAssociations",
        "ram:TagResource"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "RAMPermissions1"
    },
    {
      "Action": [
        "ram:CreateResourceShare"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "aws:RequestTag/Service": "LicenseManager"
        }
      },
      "Sid": "RAMPermissions2"
    },
    {
      "Action": [
        "ram:AssociateResourceShare",
        "ram:DisassociateResourceShare",
        "ram:UpdateResourceShare",
        "ram:DeleteResourceShare"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ram:ResourceTag/Service": "LicenseManager"
        }
      },
      "Sid": "RAMPermissions3"
    },
    {
      "Action": [
        "iam:GetRole",
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "byol.amazonaws.com"
        }
      },
      "Sid": "IamPermission"
    },
    {
      "Action": [
        "cloudformation:UpdateStack",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStacks"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/LicenseManagerCrossAccountCloudDiscoveryStack/*"
      ],
      "Effect": "Allow",
      "Sid": "CloudformationPermission"
    },
    {
      "Action": [
        "glue:CreateTable",
        "glue:UpdateTable",
        "glue:DeleteTable",
        "glue:UpdateJob",
        "glue:UpdateCrawler"
      ],
      "Resource": [
        "arn:aws:glue:*:*:catalog",
        "arn:aws:glue:*:*:crawler/LicenseManagerResourceSynDataCrawler",
        "arn:aws:glue:*:*:job/LicenseManagerResourceSynDataProcessJob",
        "arn:aws:glue:*:*:table/license_manager_resource_inventory_db/*",
        "arn:aws:glue:*:*:table/license_manager_resource_sync/*",
        "arn:aws:glue:*:*:database/license_manager_resource_inventory_db",
        "arn:aws:glue:*:*:database/license_manager_resource_sync"
      ],
      "Effect": "Allow",
      "Sid": "GlueUpdatePermissions"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:GetLifecycleConfiguration",
      "s3:PutLifecycleConfiguration",
      "s3:GetBucketPolicy",
      "s3:PutBucketPolicy"
    ],
    "Resource": [
      "arn:aws:s3:::aws-license-manager-service-*"
    ],
    "Effect": "Allow",
    "Sid": "S3BucketPermissions"
  },
  {
    "Action": [
      "s3:AbortMultipartUpload",
      "s3:PutObject",
      "s3:GetObject",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": [
      "arn:aws:s3:::aws-license-manager-service-*"
    ],
    "Effect": "Allow",
    "Sid": "S3ObjectPermissions1"
  },
  {
    "Action": [
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-license-manager-service-*/resource_sync/*"
    ],
    "Effect": "Allow",
    "Sid": "S3ObjectPermissions2"
  },
  {
    "Action": [
      "athena:GetQueryExecution",
      "athena:GetQueryResults",
      "athena:StartQueryExecution"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AthenaPermissions"
  },
  {
    "Action": [
      "glue:GetTable",
      "glue:GetPartition",
      "glue:GetPartitions"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "GluePermissions"
  },
  {
    "Action": [
      "organizations:DescribeOrganization",
      "organizations:ListAccounts",
      "organizations:DescribeAccount",
      "organizations:ListChildren",
      "organizations:ListParents",
      "organizations:ListAccountsForParent",
      "organizations:ListRoots",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "OrganizationPermissions"
  },
  {
    "Action": [
      "ram:GetResourceShares",
      "ram:GetResourceShareAssociations",
      "ram:TagResource"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "RAMPermissions1"
  },
  {
    "Action": [
      "ram:CreateResourceShare"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "aws:RequestTag/Service": "LicenseManager"
      }
    },
    "Sid": "RAMPermissions2"
  },
  {
    "Action": [
      "ram:AssociateResourceShare",
      "ram:DisassociateResourceShare",
      "ram:UpdateResourceShare",
      "ram:DeleteResourceShare"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ram:ResourceTag/Service": "LicenseManager"
      }
    },
    "Sid": "RAMPermissions3"
  },
  {
    "Action": [
      "iam:GetRole",
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "byol.amazonaws.com"
      }
    },
    "Sid": "IamPermission"
  },
  {
    "Action": [
      "cloudformation:UpdateStack",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStacks"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/LicenseManagerCrossAccountCloudDiscoveryStack/*"
    ],
    "Effect": "Allow",
    "Sid": "CloudformationPermission"
  },
  {
    "Action": [
      "glue:CreateTable",
      "glue:UpdateTable",
      "glue:DeleteTable",
      "glue:UpdateJob",
      "glue:UpdateCrawler"
    ],
    "Resource": [
      "arn:aws:glue:*:*:catalog",
      "arn:aws:glue:*:*:crawler/LicenseManagerResourceSynDataCrawler",
      "arn:aws:glue:*:*:job/LicenseManagerResourceSynDataProcessJob",
      "arn:aws:glue:*:*:table/license_manager_resource_inventory_db/*",
      "arn:aws:glue:*:*:table/license_manager_resource_sync/*",
      "arn:aws:glue:*:*:database/license_manager_resource_inventory_db",
      "arn:aws:glue:*:*:database/license_manager_resource_sync"
    ],
    "Effect": "Allow",
    "Sid": "GlueUpdatePermissions"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesisanalytics:Describe*",
        "kinesisanalytics:Get*",
        "kinesisanalytics:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:DescribeStream",
        "kinesis:ListStreams"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:ListDeliveryStreams"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "logs:GetLogEvents",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:ListPolicyVersions",
        "iam:ListRoles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kinesisanalytics:Describe*",
      "kinesisanalytics:Get*",
      "kinesisanalytics:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:DescribeStream",
      "kinesis:ListStreams"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:ListDeliveryStreams"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "logs:GetLogEvents",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:ListPolicyVersions",
      "iam:ListRoles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "mobileanalytics:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "mobileanalytics:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "apigateway:GET",
        "apigateway:GetRestApis",
        "apigateway:GetResources",
        "apigateway:POST",
        "apigateway:TestInvokeMethod",
        "cloudfront:GetDistribution",
        "devicefarm:CreateProject",
        "devicefarm:ListJobs",
        "devicefarm:ListRuns",
        "devicefarm:GetProject",
        "devicefarm:GetRun",
        "devicefarm:ListArtifacts",
        "devicefarm:ListProjects",
        "devicefarm:ScheduleRun",
        "dynamodb:DescribeTable",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "iam:ListSAMLProviders",
        "lambda:ListFunctions",
        "sns:ListTopics",
        "lex:GetIntent",
        "lex:GetIntents",
        "lex:GetSlotType",
        "lex:GetSlotTypes",
        "lex:GetBot",
        "lex:GetBots",
        "lex:GetBotAlias",
        "lex:GetBotAliases",
        "mobilehub:CreateProject",
        "mobilehub:DeleteProject",
        "mobilehub:UpdateProject",
        "mobilehub:ExportProject",
        "mobilehub:ImportProject",
        "mobilehub:SynchronizeProject",
        "mobilehub:GenerateProjectParameters",
        "mobilehub:GetProject",
        "mobilehub:GetProjectSnapshot",
        "mobilehub:ListProjectSnapshots",
        "mobilehub:DeleteProjectSnapshot",
        "mobilehub:ListAvailableConnectors",
        "mobilehub:ListAvailableFeatures",
        "mobilehub:ListAvailableRegions",
        "mobilehub:ListProjects",
        "mobilehub:ValidateProject",
        "mobilehub:VerifyServiceRole",
        "mobilehub:DescribeBundle",
        "mobilehub:ExportBundle",
        "mobilehub:ListBundles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::*-mobilehub-*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": "arn:aws:s3:::*-mobilehub-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "apigateway:GET",
      "apigateway:GetRestApis",
      "apigateway:GetResources",
      "apigateway:POST",
      "apigateway:TestInvokeMethod",
      "cloudfront:GetDistribution",
      "devicefarm:CreateProject",
      "devicefarm:ListJobs",
      "devicefarm:ListRuns",
      "devicefarm:GetProject",
      "devicefarm:GetRun",
      "devicefarm:ListArtifacts",
      "devicefarm:ListProjects",
      "devicefarm:ScheduleRun",
      "dynamodb:DescribeTable",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "iam:ListSAMLProviders",
      "lambda:ListFunctions",
      "sns:ListTopics",
      "lex:GetIntent",
      "lex:GetIntents",
      "lex:GetSlotType",
      "lex:GetSlotTypes",
      "lex:GetBot",
      "lex:GetBots",
      "lex:GetBotAlias",
      "lex:GetBotAliases",
      "mobilehub:CreateProject",
      "mobilehub:DeleteProject",
      "mobilehub:UpdateProject",
      "mobilehub:ExportProject",
      "mobilehub:ImportProject",
      "mobilehub:SynchronizeProject",
      "mobilehub:GenerateProjectParameters",
      "mobilehub:GetProject",
      "mobilehub:GetProjectSnapshot",
      "mobilehub:ListProjectSnapshots",
      "mobilehub:DeleteProjectSnapshot",
      "mobilehub:ListAvailableConnectors",
      "mobilehub:ListAvailableFeatures",
      "mobilehub:ListAvailableRegions",
      "mobilehub:ListProjects",
      "mobilehub:ValidateProject",
      "mobilehub:VerifyServiceRole",
      "mobilehub:DescribeBundle",
      "mobilehub:ExportBundle",
      "mobilehub:ListBundles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:PutObject"
    ],
    "Resource": "arn:aws:s3:::*-mobilehub-*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket"
    ],
    "Resource": "arn:aws:s3:::*-mobilehub-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents",
        "logs:GetLogEvents",
        "logs:FilterLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents",
      "logs:GetLogEvents",
      "logs:FilterLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:*",
        "datapipeline:DescribeObjects",
        "datapipeline:EvaluateExpression",
        "dynamodb:BatchGetItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateTable",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:Describe*",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:RequestSpotInstances",
        "ec2:RunInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:DeleteSecurityGroup",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DetachNetworkInterface",
        "elasticmapreduce:*",
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "iam:ListRolePolicies",
        "iam:ListInstanceProfiles",
        "iam:PassRole",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSecurityGroups",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSecurityGroups",
        "s3:CreateBucket",
        "s3:DeleteObject",
        "s3:Get*",
        "s3:List*",
        "s3:Put*",
        "sdb:BatchPutAttributes",
        "sdb:Select*",
        "sns:GetTopicAttributes",
        "sns:ListTopics",
        "sns:Publish",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sqs:CreateQueue",
        "sqs:Delete*",
        "sqs:GetQueue*",
        "sqs:PurgeQueue",
        "sqs:ReceiveMessage"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "elasticmapreduce.amazonaws.com",
            "spot.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:*",
      "datapipeline:DescribeObjects",
      "datapipeline:EvaluateExpression",
      "dynamodb:BatchGetItem",
      "dynamodb:DescribeTable",
      "dynamodb:GetItem",
      "dynamodb:Query",
      "dynamodb:Scan",
      "dynamodb:UpdateTable",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CancelSpotInstanceRequests",
      "ec2:CreateSecurityGroup",
      "ec2:CreateTags",
      "ec2:DeleteTags",
      "ec2:Describe*",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:RequestSpotInstances",
      "ec2:RunInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:DeleteSecurityGroup",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:DescribeNetworkInterfaces",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DetachNetworkInterface",
      "elasticmapreduce:*",
      "iam:GetInstanceProfile",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListAttachedRolePolicies",
      "iam:ListRolePolicies",
      "iam:ListInstanceProfiles",
      "iam:PassRole",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSecurityGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSecurityGroups",
      "s3:CreateBucket",
      "s3:DeleteObject",
      "s3:Get*",
      "s3:List*",
      "s3:Put*",
      "sdb:BatchPutAttributes",
      "sdb:Select*",
      "sns:GetTopicAttributes",
      "sns:ListTopics",
      "sns:Publish",
      "sns:Subscribe",
      "sns:Unsubscribe",
      "sqs:CreateQueue",
      "sqs:Delete*",
      "sqs:GetQueue*",
      "sqs:PurgeQueue",
      "sqs:ReceiveMessage"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "elasticmapreduce.amazonaws.com",
          "spot.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:Describe*",
        "cloudwatch:*",
        "logs:*",
        "sns:*",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "events.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:Describe*",
      "cloudwatch:*",
      "logs:*",
      "sns:*",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "events.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mq:Describe*",
        "mq:List*",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mq:Describe*",
      "mq:List*",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::deeplens*/*",
        "arn:aws:s3:::deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensS3ObjectAccess"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*",
      "Effect": "Allow",
      "Sid": "DeepLensGreenGrassCloudWatchAccess"
    },
    {
      "Action": [
        "deeplens:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensAccess"
    },
    {
      "Action": [
        "kinesisvideo:DescribeStream",
        "kinesisvideo:CreateStream",
        "kinesisvideo:GetDataEndpoint",
        "kinesisvideo:PutMedia"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensKinesisVideoAccess"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket",
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::deeplens*/*",
      "arn:aws:s3:::deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensS3ObjectAccess"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents",
      "logs:CreateLogGroup"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*",
    "Effect": "Allow",
    "Sid": "DeepLensGreenGrassCloudWatchAccess"
  },
  {
    "Action": [
      "deeplens:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensAccess"
  },
  {
    "Action": [
      "kinesisvideo:DescribeStream",
      "kinesisvideo:CreateStream",
      "kinesisvideo:GetDataEndpoint",
      "kinesisvideo:PutMedia"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensKinesisVideoAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "guardduty:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "guardduty.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "guardduty:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "guardduty.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "ds:AuthorizeApplication",
        "ds:UnauthorizeApplication",
        "ds:GetAuthorizedApplicationDetails"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "ds:AuthorizeApplication",
      "ds:UnauthorizeApplication",
      "ds:GetAuthorizedApplicationDetails"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:GetPipelineExecution",
        "codepipeline:ListPipelineExecutions",
        "codepipeline:ListActionExecutions",
        "codepipeline:ListActionTypes",
        "codepipeline:ListPipelines",
        "codepipeline:ListTagsForResource",
        "iam:ListRoles",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "codecommit:ListBranches",
        "codecommit:ListRepositories",
        "codedeploy:GetApplication",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:ListApplications",
        "codedeploy:ListDeploymentGroups",
        "elasticbeanstalk:DescribeApplications",
        "elasticbeanstalk:DescribeEnvironments",
        "lambda:GetFunctionConfiguration",
        "lambda:ListFunctions",
        "opsworks:DescribeApps",
        "opsworks:DescribeLayers",
        "opsworks:DescribeStacks"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codepipeline:GetPipeline",
      "codepipeline:GetPipelineState",
      "codepipeline:GetPipelineExecution",
      "codepipeline:ListPipelineExecutions",
      "codepipeline:ListActionExecutions",
      "codepipeline:ListActionTypes",
      "codepipeline:ListPipelines",
      "codepipeline:ListTagsForResource",
      "iam:ListRoles",
      "s3:GetBucketPolicy",
      "s3:GetObject",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "codecommit:ListBranches",
      "codecommit:ListRepositories",
      "codedeploy:GetApplication",
      "codedeploy:GetDeploymentGroup",
      "codedeploy:ListApplications",
      "codedeploy:ListDeploymentGroups",
      "elasticbeanstalk:DescribeApplications",
      "elasticbeanstalk:DescribeEnvironments",
      "lambda:GetFunctionConfiguration",
      "lambda:ListFunctions",
      "opsworks:DescribeApps",
      "opsworks:DescribeLayers",
      "opsworks:DescribeStacks"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "a4b:Get*",
        "a4b:List*",
        "a4b:Describe*",
        "a4b:Search*",
        "acm:Describe*",
        "acm:Get*",
        "acm:List*",
        "acm-pca:Describe*",
        "acm-pca:Get*",
        "acm-pca:List*",
        "aesop:Get*",
        "amplify:GetApp",
        "amplify:GetBranch",
        "amplify:GetJob",
        "amplify:GetDomainAssociation",
        "amplify:ListApps",
        "amplify:ListBranches",
        "amplify:ListDomainAssociations",
        "amplify:ListJobs",
        "apigateway:GET",
        "application-autoscaling:Describe*",
        "appmesh:Describe*",
        "appmesh:List*",
        "appstream:Describe*",
        "appstream:Get*",
        "appstream:List*",
        "appsync:Get*",
        "appsync:List*",
        "autoscaling:Describe*",
        "autoscaling-plans:Describe*",
        "autoscaling-plans:GetScalingPlanResourceForecastData",
        "athena:List*",
        "athena:Batch*",
        "athena:Get*",
        "batch:List*",
        "batch:Describe*",
        "cloud9:Describe*",
        "cloud9:List*",
        "clouddirectory:List*",
        "clouddirectory:BatchRead",
        "clouddirectory:Get*",
        "clouddirectory:LookupPolicy",
        "cloudformation:Describe*",
        "cloudformation:Detect*",
        "cloudformation:Get*",
        "cloudformation:List*",
        "cloudformation:Estimate*",
        "cloudformation:Preview*",
        "cloudfront:Get*",
        "cloudfront:List*",
        "cloudhsm:List*",
        "cloudhsm:Describe*",
        "cloudhsm:Get*",
        "cloudsearch:Describe*",
        "cloudsearch:List*",
        "cloudtrail:Describe*",
        "cloudtrail:Get*",
        "cloudtrail:List*",
        "cloudtrail:LookupEvents",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "codebuild:BatchGet*",
        "codebuild:List*",
        "codecommit:BatchGet*",
        "codecommit:Describe*",
        "codecommit:Get*",
        "codecommit:GitPull",
        "codecommit:List*",
        "codedeploy:BatchGet*",
        "codedeploy:Get*",
        "codedeploy:List*",
        "codepipeline:List*",
        "codepipeline:Get*",
        "codestar:List*",
        "codestar:Describe*",
        "codestar:Get*",
        "codestar:Verify*",
        "cognito-identity:Describe*",
        "cognito-identity:Get*",
        "cognito-identity:List*",
        "cognito-identity:Lookup*",
        "cognito-sync:List*",
        "cognito-sync:Describe*",
        "cognito-sync:Get*",
        "cognito-sync:QueryRecords",
        "cognito-idp:AdminGet*",
        "cognito-idp:AdminList*",
        "cognito-idp:List*",
        "cognito-idp:Describe*",
        "cognito-idp:Get*",
        "config:Deliver*",
        "config:Describe*",
        "config:Get*",
        "config:List*",
        "connect:List*",
        "connect:Describe*",
        "connect:GetFederationToken",
        "datasync:Describe*",
        "datasync:List*",
        "datapipeline:Describe*",
        "datapipeline:EvaluateExpression",
        "datapipeline:Get*",
        "datapipeline:List*",
        "datapipeline:QueryObjects",
        "datapipeline:Validate*",
        "dax:BatchGetItem",
        "dax:Describe*",
        "dax:GetItem",
        "dax:ListTags",
        "dax:Query",
        "dax:Scan",
        "directconnect:Describe*",
        "devicefarm:List*",
        "devicefarm:Get*",
        "discovery:Describe*",
        "discovery:List*",
        "discovery:Get*",
        "dlm:Get*",
        "dms:Describe*",
        "dms:List*",
        "dms:Test*",
        "ds:Check*",
        "ds:Describe*",
        "ds:Get*",
        "ds:List*",
        "ds:Verify*",
        "dynamodb:BatchGet*",
        "dynamodb:Describe*",
        "dynamodb:Get*",
        "dynamodb:List*",
        "dynamodb:Query",
        "dynamodb:Scan",
        "ec2:Describe*",
        "ec2:Get*",
        "ec2:SearchTransitGatewayRoutes",
        "ec2messages:Get*",
        "ecr:BatchCheck*",
        "ecr:BatchGet*",
        "ecr:Describe*",
        "ecr:Get*",
        "ecr:List*",
        "ecs:Describe*",
        "ecs:List*",
        "eks:DescribeCluster",
        "eks:DescribeUpdate",
        "eks:ListClusters",
        "eks:ListUpdates",
        "elasticache:Describe*",
        "elasticache:List*",
        "elasticbeanstalk:Check*",
        "elasticbeanstalk:Describe*",
        "elasticbeanstalk:List*",
        "elasticbeanstalk:Request*",
        "elasticbeanstalk:Retrieve*",
        "elasticbeanstalk:Validate*",
        "elasticfilesystem:Describe*",
        "elasticloadbalancing:Describe*",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:List*",
        "elasticmapreduce:View*",
        "elastictranscoder:List*",
        "elastictranscoder:Read*",
        "es:Describe*",
        "es:List*",
        "es:Get*",
        "es:ESHttpGet",
        "es:ESHttpHead",
        "events:Describe*",
        "events:List*",
        "events:Test*",
        "firehose:Describe*",
        "firehose:List*",
        "fsx:Describe*",
        "fsx:List*",
        "gamelift:List*",
        "gamelift:Get*",
        "gamelift:Describe*",
        "gamelift:RequestUploadCredentials",
        "gamelift:ResolveAlias",
        "gamelift:Search*",
        "glacier:List*",
        "glacier:Describe*",
        "glacier:Get*",
        "globalaccelerator:Describe*",
        "globalaccelerator:List*",
        "glue:BatchGetPartition",
        "glue:GetCatalogImportStatus",
        "glue:GetClassifier",
        "glue:GetClassifiers",
        "glue:GetCrawler",
        "glue:GetCrawlers",
        "glue:GetCrawlerMetrics",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetDataCatalogEncryptionSettings",
        "glue:GetDataflowGraph",
        "glue:GetDevEndpoint",
        "glue:GetDevEndpoints",
        "glue:GetJob",
        "glue:GetJobs",
        "glue:GetJobRun",
        "glue:GetJobRuns",
        "glue:GetMapping",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:GetPlan",
        "glue:GetResourcePolicy",
        "glue:GetSecurityConfiguration",
        "glue:GetSecurityConfigurations",
        "glue:GetTable",
        "glue:GetTables",
        "glue:GetTableVersion",
        "glue:GetTableVersions",
        "glue:GetTags",
        "glue:GetTrigger",
        "glue:GetTriggers",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "greengrass:Get*",
        "greengrass:List*",
        "guardduty:Get*",
        "guardduty:List*",
        "health:Describe*",
        "health:Get*",
        "health:List*",
        "iam:Generate*",
        "iam:Get*",
        "iam:List*",
        "iam:Simulate*",
        "importexport:Get*",
        "importexport:List*",
        "inspector:Describe*",
        "inspector:Get*",
        "inspector:List*",
        "inspector:Preview*",
        "inspector:LocalizeText",
        "iot:Describe*",
        "iot:Get*",
        "iot:List*",
        "iotanalytics:Describe*",
        "iotanalytics:List*",
        "iotanalytics:Get*",
        "iotanalytics:SampleChannelData",
        "kafka:Describe*",
        "kafka:List*",
        "kafka:Get*",
        "kinesisanalytics:Describe*",
        "kinesisanalytics:Discover*",
        "kinesisanalytics:Get*",
        "kinesisanalytics:List*",
        "kinesisvideo:Describe*",
        "kinesisvideo:Get*",
        "kinesisvideo:List*",
        "kinesis:Describe*",
        "kinesis:Get*",
        "kinesis:List*",
        "kms:Describe*",
        "kms:Get*",
        "kms:List*",
        "lambda:List*",
        "lambda:Get*",
        "lex:Get*",
        "lightsail:GetActiveNames",
        "lightsail:GetBlueprints",
        "lightsail:GetBundles",
        "lightsail:GetCloudFormationStackRecords",
        "lightsail:GetDisk",
        "lightsail:GetDisks",
        "lightsail:GetDiskSnapshot",
        "lightsail:GetDiskSnapshots",
        "lightsail:GetDomain",
        "lightsail:GetDomains",
        "lightsail:GetExportSnapshotRecords",
        "lightsail:GetInstance",
        "lightsail:GetInstanceMetricData",
        "lightsail:GetInstancePortStates",
        "lightsail:GetInstances",
        "lightsail:GetInstanceSnapshot",
        "lightsail:GetInstanceSnapshots",
        "lightsail:GetInstanceState",
        "lightsail:GetKeyPair",
        "lightsail:GetKeyPairs",
        "lightsail:GetLoadBalancer",
        "lightsail:GetLoadBalancerMetricData",
        "lightsail:GetLoadBalancers",
        "lightsail:GetLoadBalancerTlsCertificates",
        "lightsail:GetOperation",
        "lightsail:GetOperations",
        "lightsail:GetOperationsForResource",
        "lightsail:GetRegions",
        "lightsail:GetRelationalDatabase",
        "lightsail:GetRelationalDatabaseBlueprints",
        "lightsail:GetRelationalDatabaseBundles",
        "lightsail:GetRelationalDatabaseEvents",
        "lightsail:GetRelationalDatabaseLogEvents",
        "lightsail:GetRelationalDatabaseLogStreams",
        "lightsail:GetRelationalDatabaseMetricData",
        "lightsail:GetRelationalDatabaseParameters",
        "lightsail:GetRelationalDatabases",
        "lightsail:GetRelationalDatabaseSnapshot",
        "lightsail:GetRelationalDatabaseSnapshots",
        "lightsail:GetResources",
        "lightsail:GetStaticIp",
        "lightsail:GetStaticIps",
        "lightsail:GetTagKeys",
        "lightsail:GetTagValues",
        "lightsail:Is*",
        "lightsail:List*",
        "logs:Describe*",
        "logs:Get*",
        "logs:FilterLogEvents",
        "logs:ListTagsLogGroup",
        "logs:StartQuery",
        "logs:TestMetricFilter",
        "machinelearning:Describe*",
        "machinelearning:Get*",
        "mediaconvert:DescribeEndpoints",
        "mediaconvert:Get*",
        "mediaconvert:List*",
        "mgh:Describe*",
        "mgh:List*",
        "mobileanalytics:Get*",
        "mobilehub:Describe*",
        "mobilehub:Export*",
        "mobilehub:Generate*",
        "mobilehub:Get*",
        "mobilehub:List*",
        "mobilehub:Validate*",
        "mobilehub:Verify*",
        "mobiletargeting:Get*",
        "mq:Describe*",
        "mq:List*",
        "opsworks:Describe*",
        "opsworks:Get*",
        "opsworks-cm:Describe*",
        "organizations:Describe*",
        "organizations:List*",
        "personalize:Describe*",
        "personalize:Get*",
        "personalize:List*",
        "pi:DescribeDimensionKeys",
        "pi:GetResourceMetrics",
        "polly:Describe*",
        "polly:Get*",
        "polly:List*",
        "polly:SynthesizeSpeech",
        "rekognition:CompareFaces",
        "rekognition:Detect*",
        "rekognition:List*",
        "rekognition:Search*",
        "rds:Describe*",
        "rds:List*",
        "rds:Download*",
        "redshift:Describe*",
        "redshift:GetReservedNodeExchangeOfferings",
        "redshift:View*",
        "resource-groups:Describe*",
        "resource-groups:Get*",
        "resource-groups:List*",
        "resource-groups:Search*",
        "robomaker:BatchDescribe*",
        "robomaker:Describe*",
        "robomaker:List*",
        "route53:Get*",
        "route53:List*",
        "route53:Test*",
        "route53domains:Check*",
        "route53domains:Get*",
        "route53domains:List*",
        "route53domains:View*",
        "route53resolver:Get*",
        "route53resolver:List*",
        "s3:Get*",
        "s3:List*",
        "s3:Head*",
        "sagemaker:Describe*",
        "sagemaker:GetSearchSuggestions",
        "sagemaker:List*",
        "sagemaker:Search",
        "sdb:Get*",
        "sdb:List*",
        "sdb:Select*",
        "secretsmanager:List*",
        "secretsmanager:Describe*",
        "secretsmanager:GetResourcePolicy",
        "securityhub:Describe*",
        "securityhub:Get*",
        "securityhub:List*",
        "serverlessrepo:List*",
        "serverlessrepo:Get*",
        "serverlessrepo:SearchApplications",
        "servicecatalog:List*",
        "servicecatalog:Scan*",
        "servicecatalog:Search*",
        "servicecatalog:Describe*",
        "servicediscovery:Get*",
        "servicediscovery:List*",
        "servicequotas:GetAssociationForServiceQuotaTemplate",
        "servicequotas:GetAWSDefaultServiceQuota",
        "servicequotas:GetRequestedServiceQuotaChange",
        "servicequotas:GetServiceQuota",
        "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
        "servicequotas:ListAWSDefaultServiceQuotas",
        "servicequotas:ListRequestedServiceQuotaChangeHistory",
        "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
        "servicequotas:ListServices",
        "servicequotas:ListServiceQuotas",
        "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
        "ses:Get*",
        "ses:List*",
        "ses:Describe*",
        "shield:Describe*",
        "shield:Get*",
        "shield:List*",
        "snowball:Get*",
        "snowball:Describe*",
        "snowball:List*",
        "sns:Get*",
        "sns:List*",
        "sns:Check*",
        "sqs:Get*",
        "sqs:List*",
        "sqs:Receive*",
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*",
        "states:List*",
        "states:Describe*",
        "states:GetExecutionHistory",
        "storagegateway:Describe*",
        "storagegateway:List*",
        "sts:Get*",
        "swf:Count*",
        "swf:Describe*",
        "swf:Get*",
        "swf:List*",
        "tag:Get*",
        "transfer:Describe*",
        "transfer:List*",
        "transfer:TestIdentityProvider",
        "transcribe:Get*",
        "transcribe:List*",
        "trustedadvisor:Describe*",
        "waf:Get*",
        "waf:List*",
        "waf-regional:List*",
        "waf-regional:Get*",
        "workdocs:Describe*",
        "workdocs:Get*",
        "workdocs:CheckAlias",
        "worklink:Describe*",
        "worklink:List*",
        "workmail:Describe*",
        "workmail:Get*",
        "workmail:List*",
        "workmail:Search*",
        "workspaces:Describe*",
        "xray:BatchGet*",
        "xray:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "a4b:Get*",
      "a4b:List*",
      "a4b:Describe*",
      "a4b:Search*",
      "acm:Describe*",
      "acm:Get*",
      "acm:List*",
      "acm-pca:Describe*",
      "acm-pca:Get*",
      "acm-pca:List*",
      "aesop:Get*",
      "amplify:GetApp",
      "amplify:GetBranch",
      "amplify:GetJob",
      "amplify:GetDomainAssociation",
      "amplify:ListApps",
      "amplify:ListBranches",
      "amplify:ListDomainAssociations",
      "amplify:ListJobs",
      "apigateway:GET",
      "application-autoscaling:Describe*",
      "appmesh:Describe*",
      "appmesh:List*",
      "appstream:Describe*",
      "appstream:Get*",
      "appstream:List*",
      "appsync:Get*",
      "appsync:List*",
      "autoscaling:Describe*",
      "autoscaling-plans:Describe*",
      "autoscaling-plans:GetScalingPlanResourceForecastData",
      "athena:List*",
      "athena:Batch*",
      "athena:Get*",
      "batch:List*",
      "batch:Describe*",
      "cloud9:Describe*",
      "cloud9:List*",
      "clouddirectory:List*",
      "clouddirectory:BatchRead",
      "clouddirectory:Get*",
      "clouddirectory:LookupPolicy",
      "cloudformation:Describe*",
      "cloudformation:Detect*",
      "cloudformation:Get*",
      "cloudformation:List*",
      "cloudformation:Estimate*",
      "cloudformation:Preview*",
      "cloudfront:Get*",
      "cloudfront:List*",
      "cloudhsm:List*",
      "cloudhsm:Describe*",
      "cloudhsm:Get*",
      "cloudsearch:Describe*",
      "cloudsearch:List*",
      "cloudtrail:Describe*",
      "cloudtrail:Get*",
      "cloudtrail:List*",
      "cloudtrail:LookupEvents",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "codebuild:BatchGet*",
      "codebuild:List*",
      "codecommit:BatchGet*",
      "codecommit:Describe*",
      "codecommit:Get*",
      "codecommit:GitPull",
      "codecommit:List*",
      "codedeploy:BatchGet*",
      "codedeploy:Get*",
      "codedeploy:List*",
      "codepipeline:List*",
      "codepipeline:Get*",
      "codestar:List*",
      "codestar:Describe*",
      "codestar:Get*",
      "codestar:Verify*",
      "cognito-identity:Describe*",
      "cognito-identity:Get*",
      "cognito-identity:List*",
      "cognito-identity:Lookup*",
      "cognito-sync:List*",
      "cognito-sync:Describe*",
      "cognito-sync:Get*",
      "cognito-sync:QueryRecords",
      "cognito-idp:AdminGet*",
      "cognito-idp:AdminList*",
      "cognito-idp:List*",
      "cognito-idp:Describe*",
      "cognito-idp:Get*",
      "config:Deliver*",
      "config:Describe*",
      "config:Get*",
      "config:List*",
      "connect:List*",
      "connect:Describe*",
      "connect:GetFederationToken",
      "datasync:Describe*",
      "datasync:List*",
      "datapipeline:Describe*",
      "datapipeline:EvaluateExpression",
      "datapipeline:Get*",
      "datapipeline:List*",
      "datapipeline:QueryObjects",
      "datapipeline:Validate*",
      "dax:BatchGetItem",
      "dax:Describe*",
      "dax:GetItem",
      "dax:ListTags",
      "dax:Query",
      "dax:Scan",
      "directconnect:Describe*",
      "devicefarm:List*",
      "devicefarm:Get*",
      "discovery:Describe*",
      "discovery:List*",
      "discovery:Get*",
      "dlm:Get*",
      "dms:Describe*",
      "dms:List*",
      "dms:Test*",
      "ds:Check*",
      "ds:Describe*",
      "ds:Get*",
      "ds:List*",
      "ds:Verify*",
      "dynamodb:BatchGet*",
      "dynamodb:Describe*",
      "dynamodb:Get*",
      "dynamodb:List*",
      "dynamodb:Query",
      "dynamodb:Scan",
      "ec2:Describe*",
      "ec2:Get*",
      "ec2:SearchTransitGatewayRoutes",
      "ec2messages:Get*",
      "ecr:BatchCheck*",
      "ecr:BatchGet*",
      "ecr:Describe*",
      "ecr:Get*",
      "ecr:List*",
      "ecs:Describe*",
      "ecs:List*",
      "eks:DescribeCluster",
      "eks:DescribeUpdate",
      "eks:ListClusters",
      "eks:ListUpdates",
      "elasticache:Describe*",
      "elasticache:List*",
      "elasticbeanstalk:Check*",
      "elasticbeanstalk:Describe*",
      "elasticbeanstalk:List*",
      "elasticbeanstalk:Request*",
      "elasticbeanstalk:Retrieve*",
      "elasticbeanstalk:Validate*",
      "elasticfilesystem:Describe*",
      "elasticloadbalancing:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:List*",
      "elasticmapreduce:View*",
      "elastictranscoder:List*",
      "elastictranscoder:Read*",
      "es:Describe*",
      "es:List*",
      "es:Get*",
      "es:ESHttpGet",
      "es:ESHttpHead",
      "events:Describe*",
      "events:List*",
      "events:Test*",
      "firehose:Describe*",
      "firehose:List*",
      "fsx:Describe*",
      "fsx:List*",
      "gamelift:List*",
      "gamelift:Get*",
      "gamelift:Describe*",
      "gamelift:RequestUploadCredentials",
      "gamelift:ResolveAlias",
      "gamelift:Search*",
      "glacier:List*",
      "glacier:Describe*",
      "glacier:Get*",
      "globalaccelerator:Describe*",
      "globalaccelerator:List*",
      "glue:BatchGetPartition",
      "glue:GetCatalogImportStatus",
      "glue:GetClassifier",
      "glue:GetClassifiers",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetCrawlerMetrics",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:GetDataCatalogEncryptionSettings",
      "glue:GetDataflowGraph",
      "glue:GetDevEndpoint",
      "glue:GetDevEndpoints",
      "glue:GetJob",
      "glue:GetJobs",
      "glue:GetJobRun",
      "glue:GetJobRuns",
      "glue:GetMapping",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:GetPlan",
      "glue:GetResourcePolicy",
      "glue:GetSecurityConfiguration",
      "glue:GetSecurityConfigurations",
      "glue:GetTable",
      "glue:GetTables",
      "glue:GetTableVersion",
      "glue:GetTableVersions",
      "glue:GetTags",
      "glue:GetTrigger",
      "glue:GetTriggers",
      "glue:GetUserDefinedFunction",
      "glue:GetUserDefinedFunctions",
      "greengrass:Get*",
      "greengrass:List*",
      "guardduty:Get*",
      "guardduty:List*",
      "health:Describe*",
      "health:Get*",
      "health:List*",
      "iam:Generate*",
      "iam:Get*",
      "iam:List*",
      "iam:Simulate*",
      "importexport:Get*",
      "importexport:List*",
      "inspector:Describe*",
      "inspector:Get*",
      "inspector:List*",
      "inspector:Preview*",
      "inspector:LocalizeText",
      "iot:Describe*",
      "iot:Get*",
      "iot:List*",
      "iotanalytics:Describe*",
      "iotanalytics:List*",
      "iotanalytics:Get*",
      "iotanalytics:SampleChannelData",
      "kafka:Describe*",
      "kafka:List*",
      "kafka:Get*",
      "kinesisanalytics:Describe*",
      "kinesisanalytics:Discover*",
      "kinesisanalytics:Get*",
      "kinesisanalytics:List*",
      "kinesisvideo:Describe*",
      "kinesisvideo:Get*",
      "kinesisvideo:List*",
      "kinesis:Describe*",
      "kinesis:Get*",
      "kinesis:List*",
      "kms:Describe*",
      "kms:Get*",
      "kms:List*",
      "lambda:List*",
      "lambda:Get*",
      "lex:Get*",
      "lightsail:GetActiveNames",
      "lightsail:GetBlueprints",
      "lightsail:GetBundles",
      "lightsail:GetCloudFormationStackRecords",
      "lightsail:GetDisk",
      "lightsail:GetDisks",
      "lightsail:GetDiskSnapshot",
      "lightsail:GetDiskSnapshots",
      "lightsail:GetDomain",
      "lightsail:GetDomains",
      "lightsail:GetExportSnapshotRecords",
      "lightsail:GetInstance",
      "lightsail:GetInstanceMetricData",
      "lightsail:GetInstancePortStates",
      "lightsail:GetInstances",
      "lightsail:GetInstanceSnapshot",
      "lightsail:GetInstanceSnapshots",
      "lightsail:GetInstanceState",
      "lightsail:GetKeyPair",
      "lightsail:GetKeyPairs",
      "lightsail:GetLoadBalancer",
      "lightsail:GetLoadBalancerMetricData",
      "lightsail:GetLoadBalancers",
      "lightsail:GetLoadBalancerTlsCertificates",
      "lightsail:GetOperation",
      "lightsail:GetOperations",
      "lightsail:GetOperationsForResource",
      "lightsail:GetRegions",
      "lightsail:GetRelationalDatabase",
      "lightsail:GetRelationalDatabaseBlueprints",
      "lightsail:GetRelationalDatabaseBundles",
      "lightsail:GetRelationalDatabaseEvents",
      "lightsail:GetRelationalDatabaseLogEvents",
      "lightsail:GetRelationalDatabaseLogStreams",
      "lightsail:GetRelationalDatabaseMetricData",
      "lightsail:GetRelationalDatabaseParameters",
      "lightsail:GetRelationalDatabases",
      "lightsail:GetRelationalDatabaseSnapshot",
      "lightsail:GetRelationalDatabaseSnapshots",
      "lightsail:GetResources",
      "lightsail:GetStaticIp",
      "lightsail:GetStaticIps",
      "lightsail:GetTagKeys",
      "lightsail:GetTagValues",
      "lightsail:Is*",
      "lightsail:List*",
      "logs:Describe*",
      "logs:Get*",
      "logs:FilterLogEvents",
      "logs:ListTagsLogGroup",
      "logs:StartQuery",
      "logs:TestMetricFilter",
      "machinelearning:Describe*",
      "machinelearning:Get*",
      "mediaconvert:DescribeEndpoints",
      "mediaconvert:Get*",
      "mediaconvert:List*",
      "mgh:Describe*",
      "mgh:List*",
      "mobileanalytics:Get*",
      "mobilehub:Describe*",
      "mobilehub:Export*",
      "mobilehub:Generate*",
      "mobilehub:Get*",
      "mobilehub:List*",
      "mobilehub:Validate*",
      "mobilehub:Verify*",
      "mobiletargeting:Get*",
      "mq:Describe*",
      "mq:List*",
      "opsworks:Describe*",
      "opsworks:Get*",
      "opsworks-cm:Describe*",
      "organizations:Describe*",
      "organizations:List*",
      "personalize:Describe*",
      "personalize:Get*",
      "personalize:List*",
      "pi:DescribeDimensionKeys",
      "pi:GetResourceMetrics",
      "polly:Describe*",
      "polly:Get*",
      "polly:List*",
      "polly:SynthesizeSpeech",
      "rekognition:CompareFaces",
      "rekognition:Detect*",
      "rekognition:List*",
      "rekognition:Search*",
      "rds:Describe*",
      "rds:List*",
      "rds:Download*",
      "redshift:Describe*",
      "redshift:GetReservedNodeExchangeOfferings",
      "redshift:View*",
      "resource-groups:Describe*",
      "resource-groups:Get*",
      "resource-groups:List*",
      "resource-groups:Search*",
      "robomaker:BatchDescribe*",
      "robomaker:Describe*",
      "robomaker:List*",
      "route53:Get*",
      "route53:List*",
      "route53:Test*",
      "route53domains:Check*",
      "route53domains:Get*",
      "route53domains:List*",
      "route53domains:View*",
      "route53resolver:Get*",
      "route53resolver:List*",
      "s3:Get*",
      "s3:List*",
      "s3:Head*",
      "sagemaker:Describe*",
      "sagemaker:GetSearchSuggestions",
      "sagemaker:List*",
      "sagemaker:Search",
      "sdb:Get*",
      "sdb:List*",
      "sdb:Select*",
      "secretsmanager:List*",
      "secretsmanager:Describe*",
      "secretsmanager:GetResourcePolicy",
      "securityhub:Describe*",
      "securityhub:Get*",
      "securityhub:List*",
      "serverlessrepo:List*",
      "serverlessrepo:Get*",
      "serverlessrepo:SearchApplications",
      "servicecatalog:List*",
      "servicecatalog:Scan*",
      "servicecatalog:Search*",
      "servicecatalog:Describe*",
      "servicediscovery:Get*",
      "servicediscovery:List*",
      "servicequotas:GetAssociationForServiceQuotaTemplate",
      "servicequotas:GetAWSDefaultServiceQuota",
      "servicequotas:GetRequestedServiceQuotaChange",
      "servicequotas:GetServiceQuota",
      "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
      "servicequotas:ListAWSDefaultServiceQuotas",
      "servicequotas:ListRequestedServiceQuotaChangeHistory",
      "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
      "servicequotas:ListServices",
      "servicequotas:ListServiceQuotas",
      "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
      "ses:Get*",
      "ses:List*",
      "ses:Describe*",
      "shield:Describe*",
      "shield:Get*",
      "shield:List*",
      "snowball:Get*",
      "snowball:Describe*",
      "snowball:List*",
      "sns:Get*",
      "sns:List*",
      "sns:Check*",
      "sqs:Get*",
      "sqs:List*",
      "sqs:Receive*",
      "ssm:Describe*",
      "ssm:Get*",
      "ssm:List*",
      "states:List*",
      "states:Describe*",
      "states:GetExecutionHistory",
      "storagegateway:Describe*",
      "storagegateway:List*",
      "sts:Get*",
      "swf:Count*",
      "swf:Describe*",
      "swf:Get*",
      "swf:List*",
      "tag:Get*",
      "transfer:Describe*",
      "transfer:List*",
      "transfer:TestIdentityProvider",
      "transcribe:Get*",
      "transcribe:List*",
      "trustedadvisor:Describe*",
      "waf:Get*",
      "waf:List*",
      "waf-regional:List*",
      "waf-regional:Get*",
      "workdocs:Describe*",
      "workdocs:Get*",
      "workdocs:CheckAlias",
      "worklink:Describe*",
      "worklink:List*",
      "workmail:Describe*",
      "workmail:Get*",
      "workmail:List*",
      "workmail:Search*",
      "workspaces:Describe*",
      "xray:BatchGet*",
      "xray:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appsync:GraphQL",
        "appsync:GetGraphqlApi",
        "appsync:ListGraphqlApis",
        "appsync:ListApiKeys"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appsync:GraphQL",
      "appsync:GetGraphqlApi",
      "appsync:ListGraphqlApis",
      "appsync:ListApiKeys"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:CreateBatchPrediction",
        "machinelearning:DeleteBatchPrediction",
        "machinelearning:DescribeBatchPredictions",
        "machinelearning:GetBatchPrediction",
        "machinelearning:UpdateBatchPrediction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:CreateBatchPrediction",
      "machinelearning:DeleteBatchPrediction",
      "machinelearning:DescribeBatchPredictions",
      "machinelearning:GetBatchPrediction",
      "machinelearning:UpdateBatchPrediction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotsitewise:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotsitewise:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "a4b:*",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "*a4b.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/*a4b.amazonaws.com/AWSServiceRoleForAlexaForBusiness*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DeleteSecret",
        "secretsmanager:UpdateSecret"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
      "Effect": "Allow"
    },
    {
      "Action": "secretsmanager:CreateSecret",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "secretsmanager:Name": "A4BNetworkProfile*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "a4b:*",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "*a4b.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/*a4b.amazonaws.com/AWSServiceRoleForAlexaForBusiness*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:GetSecretValue",
      "secretsmanager:DeleteSecret",
      "secretsmanager:UpdateSecret"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
    "Effect": "Allow"
  },
  {
    "Action": "secretsmanager:CreateSecret",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "secretsmanager:Name": "A4BNetworkProfile*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeImages",
        "ec2:DescribeSubnets",
        "ec2:RequestSpotInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:RunInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ec2.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*",
        "arn:aws:ec2:*:*:spot-instances-request/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeImages",
      "ec2:DescribeSubnets",
      "ec2:RequestSpotInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:RunInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ec2.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*",
      "arn:aws:ec2:*:*:spot-instances-request/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rekognition:CompareFaces",
        "rekognition:DetectFaces",
        "rekognition:DetectLabels",
        "rekognition:ListCollections",
        "rekognition:ListFaces",
        "rekognition:SearchFaces",
        "rekognition:SearchFacesByImage",
        "rekognition:DetectText",
        "rekognition:GetCelebrityInfo",
        "rekognition:RecognizeCelebrities",
        "rekognition:DetectModerationLabels",
        "rekognition:GetLabelDetection",
        "rekognition:GetFaceDetection",
        "rekognition:GetContentModeration",
        "rekognition:GetPersonTracking",
        "rekognition:GetCelebrityRecognition",
        "rekognition:GetFaceSearch",
        "rekognition:DescribeStreamProcessor",
        "rekognition:ListStreamProcessors"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rekognition:CompareFaces",
      "rekognition:DetectFaces",
      "rekognition:DetectLabels",
      "rekognition:ListCollections",
      "rekognition:ListFaces",
      "rekognition:SearchFaces",
      "rekognition:SearchFacesByImage",
      "rekognition:DetectText",
      "rekognition:GetCelebrityInfo",
      "rekognition:RecognizeCelebrities",
      "rekognition:DetectModerationLabels",
      "rekognition:GetLabelDetection",
      "rekognition:GetFaceDetection",
      "rekognition:GetContentModeration",
      "rekognition:GetPersonTracking",
      "rekognition:GetCelebrityRecognition",
      "rekognition:GetFaceSearch",
      "rekognition:DescribeStreamProcessor",
      "rekognition:ListStreamProcessors"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codedeploy:Batch*",
        "codedeploy:Get*",
        "codedeploy:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codedeploy:Batch*",
      "codedeploy:Get*",
      "codedeploy:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudsearch:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudsearch:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::aws-license-manager-service-*"
      ],
      "Effect": "Allow",
      "Sid": "S3BucketPermissions1"
    },
    {
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "S3BucketPermissions2"
    },
    {
      "Action": [
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-license-manager-service-*"
      ],
      "Effect": "Allow",
      "Sid": "S3ObjectPermissions"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": [
        "arn:aws:sns:*:*:aws-license-manager-service-*"
      ],
      "Effect": "Allow",
      "Sid": "SNSAccountPermissions"
    },
    {
      "Action": [
        "sns:ListTopics"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "SNSTopicPermissions"
    },
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeImages",
        "ec2:DescribeHosts"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "EC2Permissions"
    },
    {
      "Action": [
        "ssm:ListInventoryEntries",
        "ssm:GetInventory",
        "ssm:CreateAssociation"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "SSMPermissions"
    },
    {
      "Action": [
        "organizations:ListAWSServiceAccessForOrganization",
        "organizations:DescribeOrganization"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "OrganizationPermissions"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::aws-license-manager-service-*"
    ],
    "Effect": "Allow",
    "Sid": "S3BucketPermissions1"
  },
  {
    "Action": [
      "s3:ListAllMyBuckets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "S3BucketPermissions2"
  },
  {
    "Action": [
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-license-manager-service-*"
    ],
    "Effect": "Allow",
    "Sid": "S3ObjectPermissions"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": [
      "arn:aws:sns:*:*:aws-license-manager-service-*"
    ],
    "Effect": "Allow",
    "Sid": "SNSAccountPermissions"
  },
  {
    "Action": [
      "sns:ListTopics"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "SNSTopicPermissions"
  },
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeImages",
      "ec2:DescribeHosts"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "EC2Permissions"
  },
  {
    "Action": [
      "ssm:ListInventoryEntries",
      "ssm:GetInventory",
      "ssm:CreateAssociation"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "SSMPermissions"
  },
  {
    "Action": [
      "organizations:ListAWSServiceAccessForOrganization",
      "organizations:DescribeOrganization"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "OrganizationPermissions"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "cloudhsm:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "cloudhsm:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeSpotFleetRequests",
        "ec2:ModifySpotFleetRequest"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:DescribeAlarms",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/ec2.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_EC2SpotFleetRequest",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "ec2.application-autoscaling.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeSpotFleetRequests",
      "ec2:ModifySpotFleetRequest"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:DescribeAlarms",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/ec2.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_EC2SpotFleetRequest",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "ec2.application-autoscaling.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeAddresses",
        "ec2:DescribeInstances",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeVpcClassicLink",
        "ec2:CreateSecurityGroup",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:ModifyNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:AssociateAddress",
        "ec2:DisassociateAddress",
        "ec2:AttachNetworkInterface",
        "ec2:DetachNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssignIpv6Addresses",
        "ec2:UnassignIpv6Addresses",
        "logs:CreateLogDelivery",
        "logs:GetLogDelivery",
        "logs:UpdateLogDelivery",
        "logs:DeleteLogDelivery",
        "logs:ListLogDeliveries"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeAddresses",
      "ec2:DescribeInstances",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeVpcClassicLink",
      "ec2:CreateSecurityGroup",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:ModifyNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:AssociateAddress",
      "ec2:DisassociateAddress",
      "ec2:AttachNetworkInterface",
      "ec2:DetachNetworkInterface",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssignIpv6Addresses",
      "ec2:UnassignIpv6Addresses",
      "logs:CreateLogDelivery",
      "logs:GetLogDelivery",
      "logs:UpdateLogDelivery",
      "logs:DeleteLogDelivery",
      "logs:ListLogDeliveries"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codebuild:StartBuild",
        "codebuild:StopBuild",
        "codebuild:BatchGet*",
        "codebuild:Get*",
        "codebuild:List*",
        "codecommit:GetBranch",
        "codecommit:GetCommit",
        "codecommit:GetRepository",
        "codecommit:ListBranches",
        "cloudwatch:GetMetricStatistics",
        "events:DescribeRule",
        "events:ListTargetsByRule",
        "events:ListRuleNamesByTarget",
        "logs:GetLogEvents",
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:PutParameter"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codebuild:StartBuild",
      "codebuild:StopBuild",
      "codebuild:BatchGet*",
      "codebuild:Get*",
      "codebuild:List*",
      "codecommit:GetBranch",
      "codecommit:GetCommit",
      "codecommit:GetRepository",
      "codecommit:ListBranches",
      "cloudwatch:GetMetricStatistics",
      "events:DescribeRule",
      "events:ListTargetsByRule",
      "events:ListRuleNamesByTarget",
      "logs:GetLogEvents",
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:PutParameter"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:CreateDatabase",
        "glue:CreatePartition",
        "glue:CreateTable",
        "glue:DeleteDatabase",
        "glue:DeletePartition",
        "glue:DeleteTable",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:GetTable",
        "glue:GetTableVersions",
        "glue:GetTables",
        "glue:UpdateDatabase",
        "glue:UpdatePartition",
        "glue:UpdateTable",
        "glue:CreateBookmark",
        "glue:GetBookmark",
        "glue:UpdateBookmark",
        "glue:GetMetric",
        "glue:PutMetric",
        "glue:CreateConnection",
        "glue:CreateJob",
        "glue:DeleteConnection",
        "glue:DeleteJob",
        "glue:GetConnection",
        "glue:GetConnections",
        "glue:GetDevEndpoint",
        "glue:GetDevEndpoints",
        "glue:GetJob",
        "glue:GetJobs",
        "glue:UpdateJob",
        "glue:BatchDeleteConnection",
        "glue:UpdateConnection",
        "glue:GetUserDefinedFunction",
        "glue:UpdateUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "glue:DeleteUserDefinedFunction",
        "glue:CreateUserDefinedFunction",
        "glue:BatchGetPartition",
        "glue:BatchDeletePartition",
        "glue:BatchCreatePartition",
        "glue:BatchDeleteTable",
        "glue:UpdateDevEndpoint",
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketAcl"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::crawler-public*",
        "arn:aws:s3:::aws-glue*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:security-group/*",
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "aws-glue-service-resource"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "glue:CreateDatabase",
      "glue:CreatePartition",
      "glue:CreateTable",
      "glue:DeleteDatabase",
      "glue:DeletePartition",
      "glue:DeleteTable",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:GetTable",
      "glue:GetTableVersions",
      "glue:GetTables",
      "glue:UpdateDatabase",
      "glue:UpdatePartition",
      "glue:UpdateTable",
      "glue:CreateBookmark",
      "glue:GetBookmark",
      "glue:UpdateBookmark",
      "glue:GetMetric",
      "glue:PutMetric",
      "glue:CreateConnection",
      "glue:CreateJob",
      "glue:DeleteConnection",
      "glue:DeleteJob",
      "glue:GetConnection",
      "glue:GetConnections",
      "glue:GetDevEndpoint",
      "glue:GetDevEndpoints",
      "glue:GetJob",
      "glue:GetJobs",
      "glue:UpdateJob",
      "glue:BatchDeleteConnection",
      "glue:UpdateConnection",
      "glue:GetUserDefinedFunction",
      "glue:UpdateUserDefinedFunction",
      "glue:GetUserDefinedFunctions",
      "glue:DeleteUserDefinedFunction",
      "glue:CreateUserDefinedFunction",
      "glue:BatchGetPartition",
      "glue:BatchDeletePartition",
      "glue:BatchCreatePartition",
      "glue:BatchDeleteTable",
      "glue:UpdateDevEndpoint",
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketAcl"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::crawler-public*",
      "arn:aws:s3:::aws-glue*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:security-group/*",
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringEquals": {
        "aws:TagKeys": [
          "aws-glue-service-resource"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeImages",
        "ec2:DescribeSubnets",
        "ec2:RequestSpotInstances",
        "ec2:TerminateInstances",
        "ec2:DescribeInstanceStatus",
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
      ],
      "Resource": [
        "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:RegisterTargets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeImages",
      "ec2:DescribeSubnets",
      "ec2:RequestSpotInstances",
      "ec2:TerminateInstances",
      "ec2:DescribeInstanceStatus",
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
    ],
    "Resource": [
      "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:RegisterTargets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:List*",
        "dynamodb:DescribeTable",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSecurityGroups",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSecurityGroups",
        "sns:ListTopics",
        "iam:ListRoles",
        "iam:GetRolePolicy",
        "iam:GetInstanceProfile",
        "iam:ListInstanceProfiles",
        "datapipeline:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
        "arn:aws:iam::*:role/DataPipelineDefaultRole"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:List*",
      "dynamodb:DescribeTable",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSecurityGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSecurityGroups",
      "sns:ListTopics",
      "iam:ListRoles",
      "iam:GetRolePolicy",
      "iam:GetInstanceProfile",
      "iam:ListInstanceProfiles",
      "datapipeline:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
      "arn:aws:iam::*:role/DataPipelineDefaultRole"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "events:PutTargets",
        "events:RemoveTargets",
        "events:PutRule",
        "events:DeleteRule",
        "events:DescribeRule"
      ],
      "Resource": [
        "arn:aws:events:*:*:rule/awscodestar-*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectEventRules"
    },
    {
      "Action": [
        "cloudformation:*Stack*",
        "cloudformation:CreateChangeSet",
        "cloudformation:ExecuteChangeSet",
        "cloudformation:DeleteChangeSet",
        "cloudformation:GetTemplate"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/awscodestar-*",
        "arn:aws:cloudformation:*:*:stack/awseb-*",
        "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
        "arn:aws:cloudformation:*:aws:transform/CodeStar*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectStack"
    },
    {
      "Action": [
        "cloudformation:GetTemplateSummary",
        "cloudformation:DescribeChangeSet"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ProjectStackTemplate"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::awscodestar-*/*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectQuickstarts"
    },
    {
      "Action": [
        "s3:*"
      ],
      "Resource": [
        "arn:aws:s3:::aws-codestar-*",
        "arn:aws:s3:::aws-codestar-*/*",
        "arn:aws:s3:::elasticbeanstalk-*",
        "arn:aws:s3:::elasticbeanstalk-*/*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectS3Buckets"
    },
    {
      "Action": [
        "codestar:*",
        "codecommit:*",
        "codepipeline:*",
        "codedeploy:*",
        "codebuild:*",
        "ec2:RunInstances",
        "autoscaling:*",
        "cloudwatch:Put*",
        "ec2:*",
        "elasticbeanstalk:*",
        "elasticloadbalancing:*",
        "iam:ListRoles",
        "logs:*",
        "sns:*",
        "cloud9:CreateEnvironmentEC2",
        "cloud9:DeleteEnvironment",
        "cloud9:DescribeEnvironment*",
        "cloud9:ListEnvironments"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ProjectServices"
    },
    {
      "Action": [
        "iam:AttachRolePolicy",
        "iam:CreateRole",
        "iam:DeleteRole",
        "iam:DeleteRolePolicy",
        "iam:DetachRolePolicy",
        "iam:GetRole",
        "iam:PassRole",
        "iam:GetRolePolicy",
        "iam:PutRolePolicy",
        "iam:SetDefaultPolicyVersion",
        "iam:CreatePolicy",
        "iam:DeletePolicy",
        "iam:AddRoleToInstanceProfile",
        "iam:CreateInstanceProfile",
        "iam:DeleteInstanceProfile",
        "iam:RemoveRoleFromInstanceProfile"
      ],
      "Resource": [
        "arn:aws:iam::*:role/CodeStarWorker*",
        "arn:aws:iam::*:policy/CodeStarWorker*",
        "arn:aws:iam::*:instance-profile/awscodestar-*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectWorkerRoles"
    },
    {
      "Action": [
        "iam:AttachUserPolicy",
        "iam:DetachUserPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "iam:PolicyArn": [
            "arn:aws:iam::*:policy/CodeStar_*"
          ]
        }
      },
      "Sid": "ProjectTeamMembers"
    },
    {
      "Action": [
        "iam:CreatePolicy",
        "iam:DeletePolicy",
        "iam:CreatePolicyVersion",
        "iam:DeletePolicyVersion",
        "iam:ListEntitiesForPolicy",
        "iam:ListPolicyVersions",
        "iam:GetPolicy",
        "iam:GetPolicyVersion"
      ],
      "Resource": [
        "arn:aws:iam::*:policy/CodeStar_*"
      ],
      "Effect": "Allow",
      "Sid": "ProjectRoles"
    },
    {
      "Action": [
        "iam:ListAttachedRolePolicies"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-codestar-service-role",
        "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
      ],
      "Effect": "Allow",
      "Sid": "InspectServiceRole"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "cloud9.amazonaws.com"
        }
      },
      "Sid": "IAMLinkRole"
    },
    {
      "Action": [
        "config:DescribeConfigRules"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DescribeConfigRuleForARN"
    }
  ]
}
[
  {
    "Action": [
      "events:PutTargets",
      "events:RemoveTargets",
      "events:PutRule",
      "events:DeleteRule",
      "events:DescribeRule"
    ],
    "Resource": [
      "arn:aws:events:*:*:rule/awscodestar-*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectEventRules"
  },
  {
    "Action": [
      "cloudformation:*Stack*",
      "cloudformation:CreateChangeSet",
      "cloudformation:ExecuteChangeSet",
      "cloudformation:DeleteChangeSet",
      "cloudformation:GetTemplate"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/awscodestar-*",
      "arn:aws:cloudformation:*:*:stack/awseb-*",
      "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
      "arn:aws:cloudformation:*:aws:transform/CodeStar*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectStack"
  },
  {
    "Action": [
      "cloudformation:GetTemplateSummary",
      "cloudformation:DescribeChangeSet"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ProjectStackTemplate"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::awscodestar-*/*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectQuickstarts"
  },
  {
    "Action": [
      "s3:*"
    ],
    "Resource": [
      "arn:aws:s3:::aws-codestar-*",
      "arn:aws:s3:::aws-codestar-*/*",
      "arn:aws:s3:::elasticbeanstalk-*",
      "arn:aws:s3:::elasticbeanstalk-*/*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectS3Buckets"
  },
  {
    "Action": [
      "codestar:*",
      "codecommit:*",
      "codepipeline:*",
      "codedeploy:*",
      "codebuild:*",
      "ec2:RunInstances",
      "autoscaling:*",
      "cloudwatch:Put*",
      "ec2:*",
      "elasticbeanstalk:*",
      "elasticloadbalancing:*",
      "iam:ListRoles",
      "logs:*",
      "sns:*",
      "cloud9:CreateEnvironmentEC2",
      "cloud9:DeleteEnvironment",
      "cloud9:DescribeEnvironment*",
      "cloud9:ListEnvironments"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ProjectServices"
  },
  {
    "Action": [
      "iam:AttachRolePolicy",
      "iam:CreateRole",
      "iam:DeleteRole",
      "iam:DeleteRolePolicy",
      "iam:DetachRolePolicy",
      "iam:GetRole",
      "iam:PassRole",
      "iam:GetRolePolicy",
      "iam:PutRolePolicy",
      "iam:SetDefaultPolicyVersion",
      "iam:CreatePolicy",
      "iam:DeletePolicy",
      "iam:AddRoleToInstanceProfile",
      "iam:CreateInstanceProfile",
      "iam:DeleteInstanceProfile",
      "iam:RemoveRoleFromInstanceProfile"
    ],
    "Resource": [
      "arn:aws:iam::*:role/CodeStarWorker*",
      "arn:aws:iam::*:policy/CodeStarWorker*",
      "arn:aws:iam::*:instance-profile/awscodestar-*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectWorkerRoles"
  },
  {
    "Action": [
      "iam:AttachUserPolicy",
      "iam:DetachUserPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "iam:PolicyArn": [
          "arn:aws:iam::*:policy/CodeStar_*"
        ]
      }
    },
    "Sid": "ProjectTeamMembers"
  },
  {
    "Action": [
      "iam:CreatePolicy",
      "iam:DeletePolicy",
      "iam:CreatePolicyVersion",
      "iam:DeletePolicyVersion",
      "iam:ListEntitiesForPolicy",
      "iam:ListPolicyVersions",
      "iam:GetPolicy",
      "iam:GetPolicyVersion"
    ],
    "Resource": [
      "arn:aws:iam::*:policy/CodeStar_*"
    ],
    "Effect": "Allow",
    "Sid": "ProjectRoles"
  },
  {
    "Action": [
      "iam:ListAttachedRolePolicies"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-codestar-service-role",
      "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
    ],
    "Effect": "Allow",
    "Sid": "InspectServiceRole"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "cloud9.amazonaws.com"
      }
    },
    "Sid": "IAMLinkRole"
  },
  {
    "Action": [
      "config:DescribeConfigRules"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DescribeConfigRuleForARN"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "transcribe:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::*transcribe*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "transcribe:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::*transcribe*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:*",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:DescribeSecurityGroups",
        "sns:GetTopicAttributes",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "iam:ListRoles",
        "organizations:ListAccountsForParent",
        "organizations:ListRoots",
        "organizations:ListAccounts",
        "organizations:DescribeOrganization",
        "organizations:DescribeAccount",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:SetTopicAttributes",
        "sns:Subscribe",
        "sns:Unsubscribe"
      ],
      "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "organizations:EnableAWSServiceAccess",
        "organizations:DisableAWSServiceAccess"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLike": {
          "organizations:ServicePrincipal": [
            "ds.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:security-group/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ds:*",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:DescribeSecurityGroups",
      "sns:GetTopicAttributes",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "iam:ListRoles",
      "organizations:ListAccountsForParent",
      "organizations:ListRoots",
      "organizations:ListAccounts",
      "organizations:DescribeOrganization",
      "organizations:DescribeAccount",
      "organizations:ListOrganizationalUnitsForParent",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:SetTopicAttributes",
      "sns:Subscribe",
      "sns:Unsubscribe"
    ],
    "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "organizations:EnableAWSServiceAccess",
      "organizations:DisableAWSServiceAccess"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLike": {
        "organizations:ServicePrincipal": [
          "ds.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:security-group/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObjectVersion",
        "s3:PutObject",
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::afr-ota*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "signer:StartSigningJob",
        "signer:DescribeSigningJob",
        "signer:GetSigningProfile",
        "signer:PutSigningProfile"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iot:DeleteJob"
      ],
      "Resource": "arn:aws:iot:*:*:job/AFR_OTA*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iot:DeleteStream"
      ],
      "Resource": "arn:aws:iot:*:*:stream/AFR_OTA*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iot:CreateStream",
        "iot:CreateJob"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObjectVersion",
      "s3:PutObject",
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::afr-ota*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "signer:StartSigningJob",
      "signer:DescribeSigningJob",
      "signer:GetSigningProfile",
      "signer:PutSigningProfile"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketLocation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iot:DeleteJob"
    ],
    "Resource": "arn:aws:iot:*:*:job/AFR_OTA*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iot:DeleteStream"
    ],
    "Resource": "arn:aws:iot:*:*:stream/AFR_OTA*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iot:CreateStream",
      "iot:CreateJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:*",
        "dax:*",
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:RegisterScalableTarget",
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "cloudwatch:PutMetricAlarm",
        "datapipeline:ActivatePipeline",
        "datapipeline:CreatePipeline",
        "datapipeline:DeletePipeline",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:ListPipelines",
        "datapipeline:PutPipelineDefinition",
        "datapipeline:QueryObjects",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "iam:GetRole",
        "iam:ListRoles",
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sns:SetTopicAttributes",
        "lambda:CreateFunction",
        "lambda:ListFunctions",
        "lambda:ListEventSourceMappings",
        "lambda:CreateEventSourceMapping",
        "lambda:DeleteEventSourceMapping",
        "lambda:GetFunctionConfiguration",
        "lambda:DeleteFunction",
        "resource-groups:ListGroups",
        "resource-groups:ListGroupResources",
        "resource-groups:GetGroup",
        "resource-groups:GetGroupQuery",
        "resource-groups:DeleteGroup",
        "resource-groups:CreateGroup",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "application-autoscaling.amazonaws.com",
            "dax.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.dynamodb.amazonaws.com",
            "dax.amazonaws.com",
            "dynamodb.application-autoscaling.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:*",
      "dax:*",
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:RegisterScalableTarget",
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "cloudwatch:PutMetricAlarm",
      "datapipeline:ActivatePipeline",
      "datapipeline:CreatePipeline",
      "datapipeline:DeletePipeline",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:PutPipelineDefinition",
      "datapipeline:QueryObjects",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "iam:GetRole",
      "iam:ListRoles",
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sns:Subscribe",
      "sns:Unsubscribe",
      "sns:SetTopicAttributes",
      "lambda:CreateFunction",
      "lambda:ListFunctions",
      "lambda:ListEventSourceMappings",
      "lambda:CreateEventSourceMapping",
      "lambda:DeleteEventSourceMapping",
      "lambda:GetFunctionConfiguration",
      "lambda:DeleteFunction",
      "resource-groups:ListGroups",
      "resource-groups:ListGroupResources",
      "resource-groups:GetGroup",
      "resource-groups:GetGroupQuery",
      "resource-groups:DeleteGroup",
      "resource-groups:CreateGroup",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "application-autoscaling.amazonaws.com",
          "dax.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "replication.dynamodb.amazonaws.com",
          "dax.amazonaws.com",
          "dynamodb.application-autoscaling.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ses:Get*",
        "ses:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ses:Get*",
      "ses:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:GetClusterCredentials",
        "redshift:ListSchemas",
        "redshift:ListTables",
        "redshift:ListDatabases",
        "redshift:ExecuteQuery",
        "redshift:FetchResults",
        "redshift:CancelQuery",
        "redshift:DescribeClusters",
        "redshift:DescribeQuery",
        "redshift:DescribeTable",
        "redshift:ViewQueriesFromConsole",
        "redshift:DescribeSavedQueries",
        "redshift:CreateSavedQuery",
        "redshift:DeleteSavedQueries",
        "redshift:ModifySavedQuery"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "redshift:GetClusterCredentials",
      "redshift:ListSchemas",
      "redshift:ListTables",
      "redshift:ListDatabases",
      "redshift:ExecuteQuery",
      "redshift:FetchResults",
      "redshift:CancelQuery",
      "redshift:DescribeClusters",
      "redshift:DescribeQuery",
      "redshift:DescribeTable",
      "redshift:ViewQueriesFromConsole",
      "redshift:DescribeSavedQueries",
      "redshift:CreateSavedQuery",
      "redshift:DeleteSavedQueries",
      "redshift:ModifySavedQuery"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "waf:Get*",
        "waf:List*",
        "waf-regional:Get*",
        "waf-regional:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "waf:Get*",
      "waf:List*",
      "waf-regional:Get*",
      "waf-regional:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:SendMessage",
        "sqs:GetQueueUrl",
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sqs:SendMessage",
      "sqs:GetQueueUrl",
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mechanicalturk:Get*",
        "mechanicalturk:Search*",
        "mechanicalturk:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mechanicalturk:Get*",
      "mechanicalturk:Search*",
      "mechanicalturk:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:Get*",
        "kinesis:List*",
        "kinesis:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:Get*",
      "kinesis:List*",
      "kinesis:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets",
        "xray:GetSamplingStatisticSummaries"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "xray:PutTraceSegments",
      "xray:PutTelemetryRecords",
      "xray:GetSamplingRules",
      "xray:GetSamplingTargets",
      "xray:GetSamplingStatisticSummaries"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "servicediscovery:Get*",
        "servicediscovery:List*",
        "servicediscovery:DiscoverInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "servicediscovery:Get*",
      "servicediscovery:List*",
      "servicediscovery:DiscoverInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:/aws/cloudfront/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:/aws/cloudfront/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "codedeploy:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "codedeploy:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:DescribeTable",
        "dynamodb:CreateBackup"
      ],
      "Resource": "arn:aws:dynamodb:*:*:table/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "dynamodb:DescribeBackup",
        "dynamodb:DeleteBackup"
      ],
      "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:AddTagsToResource",
        "rds:ListTagsForResource",
        "rds:DescribeDBSnapshots",
        "rds:CreateDBSnapshot",
        "rds:CopyDBSnapshot",
        "rds:DescribeDBInstances"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:DeleteDBSnapshot"
      ],
      "Resource": [
        "arn:aws:rds:*:*:snapshot:awsbackup:*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:CreateSnapshot",
        "storagegateway:ListTagsForResource"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteSnapshot"
      ],
      "Resource": "arn:aws:ec2:*::snapshot/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots",
        "ec2:DescribeTags"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticfilesystem:Backup",
        "elasticfilesystem:DescribeTags"
      ],
      "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateSnapshot",
        "ec2:DeleteSnapshot",
        "ec2:DescribeVolumes",
        "ec2:DescribeSnapshots"
      ],
      "Resource": [
        "arn:aws:ec2:*::snapshot/*",
        "arn:aws:ec2:*:*:volume/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "kms:DescribeKey",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "kms:CreateGrant",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Bool": {
          "kms:GrantIsForAWSResource": "true"
        }
      }
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:DescribeTable",
      "dynamodb:CreateBackup"
    ],
    "Resource": "arn:aws:dynamodb:*:*:table/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "dynamodb:DescribeBackup",
      "dynamodb:DeleteBackup"
    ],
    "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:AddTagsToResource",
      "rds:ListTagsForResource",
      "rds:DescribeDBSnapshots",
      "rds:CreateDBSnapshot",
      "rds:CopyDBSnapshot",
      "rds:DescribeDBInstances"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:DeleteDBSnapshot"
    ],
    "Resource": [
      "arn:aws:rds:*:*:snapshot:awsbackup:*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:CreateSnapshot",
      "storagegateway:ListTagsForResource"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteSnapshot"
    ],
    "Resource": "arn:aws:ec2:*::snapshot/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots",
      "ec2:DescribeTags"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticfilesystem:Backup",
      "elasticfilesystem:DescribeTags"
    ],
    "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateSnapshot",
      "ec2:DeleteSnapshot",
      "ec2:DescribeVolumes",
      "ec2:DescribeSnapshots"
    ],
    "Resource": [
      "arn:aws:ec2:*::snapshot/*",
      "arn:aws:ec2:*:*:volume/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "kms:DescribeKey",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "kms:CreateGrant",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Bool": {
        "kms:GrantIsForAWSResource": "true"
      }
    }
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "greengrass:CreateDeployment",
        "greengrass:CreateGroupVersion",
        "greengrass:CreateFunctionDefinition",
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetGroup",
        "greengrass:GetGroupVersion",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:GetAssociatedRole",
        "lambda:CreateFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:UpdateFunctionCode",
        "lambda:GetFunction",
        "lambda:UpdateFunctionConfiguration"
      ],
      "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeSecurityGroups",
      "greengrass:CreateDeployment",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetGroup",
      "greengrass:GetGroupVersion",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetAssociatedRole",
      "lambda:CreateFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:UpdateFunctionCode",
      "lambda:GetFunction",
      "lambda:UpdateFunctionConfiguration"
    ],
    "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:Describe*",
        "ec2:Describe*",
        "ec2:RebootInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:Describe*",
      "ec2:Describe*",
      "ec2:RebootInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:ListStreams",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:DescribeStream",
      "dynamodb:GetRecords",
      "dynamodb:GetShardIterator",
      "dynamodb:ListStreams",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:CreateHostedZone",
        "route53domains:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:CreateHostedZone",
      "route53domains:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticache:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticache:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifyVpcEndpoint",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:CreateVpcEndpoint",
        "ec2:DescribeVpcEndpoints",
        "ec2:DeleteVpcEndpoints",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*",
        "arn:aws:logs:*:*:log-group:/aws/docdb/*",
        "arn:aws:logs:*:*:log-group:/aws/neptune/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
        "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
        "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:CreateStream",
        "kinesis:PutRecord",
        "kinesis:PutRecords",
        "kinesis:DescribeStream",
        "kinesis:SplitShard",
        "kinesis:MergeShards",
        "kinesis:DeleteStream",
        "kinesis:UpdateShardCount"
      ],
      "Resource": [
        "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifyVpcEndpoint",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:CreateVpcEndpoint",
      "ec2:DescribeVpcEndpoints",
      "ec2:DeleteVpcEndpoints",
      "ec2:AssignPrivateIpAddresses",
      "ec2:UnassignPrivateIpAddresses"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*",
      "arn:aws:logs:*:*:log-group:/aws/docdb/*",
      "arn:aws:logs:*:*:log-group:/aws/neptune/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
      "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
      "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:CreateStream",
      "kinesis:PutRecord",
      "kinesis:PutRecords",
      "kinesis:DescribeStream",
      "kinesis:SplitShard",
      "kinesis:MergeShards",
      "kinesis:DeleteStream",
      "kinesis:UpdateShardCount"
    ],
    "Resource": [
      "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "athena:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "glue:CreateDatabase",
        "glue:DeleteDatabase",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:UpdateDatabase",
        "glue:CreateTable",
        "glue:DeleteTable",
        "glue:BatchDeleteTable",
        "glue:UpdateTable",
        "glue:GetTable",
        "glue:GetTables",
        "glue:BatchCreatePartition",
        "glue:CreatePartition",
        "glue:DeletePartition",
        "glue:BatchDeletePartition",
        "glue:UpdatePartition",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:BatchGetPartition"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:AbortMultipartUpload",
        "s3:CreateBucket",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-athena-query-results-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::athena-examples*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:ListTopics",
        "sns:GetTopicAttributes"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lakeformation:GetDataAccess"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "athena:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "glue:CreateDatabase",
      "glue:DeleteDatabase",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:UpdateDatabase",
      "glue:CreateTable",
      "glue:DeleteTable",
      "glue:BatchDeleteTable",
      "glue:UpdateTable",
      "glue:GetTable",
      "glue:GetTables",
      "glue:BatchCreatePartition",
      "glue:CreatePartition",
      "glue:DeletePartition",
      "glue:BatchDeletePartition",
      "glue:UpdatePartition",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:BatchGetPartition"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts",
      "s3:AbortMultipartUpload",
      "s3:CreateBucket",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-athena-query-results-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::athena-examples*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:ListTopics",
      "sns:GetTopicAttributes"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lakeformation:GetDataAccess"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "crowd:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "CrowdApiFullAccess"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "crowd.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "crowd:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "CrowdApiFullAccess"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "crowd.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "elasticfilesystem:Describe*",
        "kms:ListAliases"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "elasticfilesystem:Describe*",
      "kms:ListAliases"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "servicediscovery:DiscoverInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "servicediscovery:DiscoverInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "acm:ListCertificates",
        "cloudfront:*",
        "iam:ListServerCertificates",
        "waf:ListWebACLs",
        "waf:GetWebACL"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListAllMyBuckets"
    ],
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "acm:ListCertificates",
      "cloudfront:*",
      "iam:ListServerCertificates",
      "waf:ListWebACLs",
      "waf:GetWebACL"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "connect:*",
        "ds:CreateAlias",
        "ds:AuthorizeApplication",
        "ds:CreateIdentityPoolDirectory",
        "ds:DeleteDirectory",
        "ds:DescribeDirectories",
        "ds:UnauthorizeApplication",
        "firehose:DescribeDeliveryStream",
        "firehose:ListDeliveryStreams",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kms:DescribeKey",
        "kms:CreateGrant",
        "kms:ListAliases",
        "lex:GetBots",
        "logs:CreateLogGroup",
        "s3:CreateBucket",
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "connect.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:PutRolePolicy"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "connect:*",
      "ds:CreateAlias",
      "ds:AuthorizeApplication",
      "ds:CreateIdentityPoolDirectory",
      "ds:DeleteDirectory",
      "ds:DescribeDirectories",
      "ds:UnauthorizeApplication",
      "firehose:DescribeDeliveryStream",
      "firehose:ListDeliveryStreams",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "kms:DescribeKey",
      "kms:CreateGrant",
      "kms:ListAliases",
      "lex:GetBots",
      "logs:CreateLogGroup",
      "s3:CreateBucket",
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "connect.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:PutRolePolicy"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloud9:*",
        "iam:GetUser",
        "iam:ListUsers",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "cloud9.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloud9:*",
      "iam:GetUser",
      "iam:ListUsers",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "cloud9.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticmapreduce:ListInstanceGroups",
        "elasticmapreduce:ModifyInstanceGroups",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticmapreduce:ListInstanceGroups",
      "elasticmapreduce:ModifyInstanceGroups",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "textract:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "textract:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:DeleteRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
      ],
      "Effect": "Allow",
      "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AllowCreationOfServiceLinkedRoles"
    }
  ]
}
[
  {
    "Action": [
      "iam:DeleteRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
    ],
    "Effect": "Allow",
    "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AllowCreationOfServiceLinkedRoles"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:AddRoleToDBCluster",
        "rds:AddSourceIdentifierToSubscription",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:CopyDBClusterParameterGroup",
        "rds:CopyDBClusterSnapshot",
        "rds:CopyDBParameterGroup",
        "rds:CreateDBCluster",
        "rds:CreateDBClusterParameterGroup",
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBInstance",
        "rds:CreateDBParameterGroup",
        "rds:CreateDBSubnetGroup",
        "rds:CreateEventSubscription",
        "rds:DeleteDBCluster",
        "rds:DeleteDBClusterParameterGroup",
        "rds:DeleteDBClusterSnapshot",
        "rds:DeleteDBInstance",
        "rds:DeleteDBParameterGroup",
        "rds:DeleteDBSubnetGroup",
        "rds:DeleteEventSubscription",
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEngineDefaultClusterParameters",
        "rds:DescribeEngineDefaultParameters",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOptionGroups",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DescribeValidDBInstanceModifications",
        "rds:DownloadDBLogFilePortion",
        "rds:FailoverDBCluster",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBClusterParameterGroup",
        "rds:ModifyDBClusterSnapshotAttribute",
        "rds:ModifyDBInstance",
        "rds:ModifyDBParameterGroup",
        "rds:ModifyDBSubnetGroup",
        "rds:ModifyEventSubscription",
        "rds:PromoteReadReplicaDBCluster",
        "rds:RebootDBInstance",
        "rds:RemoveRoleFromDBCluster",
        "rds:RemoveSourceIdentifierFromSubscription",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBClusterParameterGroup",
        "rds:ResetDBParameterGroup",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "kms:ListAliases",
        "kms:ListKeyPolicies",
        "kms:ListKeys",
        "kms:ListRetirableGrants",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "rds.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:AddRoleToDBCluster",
      "rds:AddSourceIdentifierToSubscription",
      "rds:AddTagsToResource",
      "rds:ApplyPendingMaintenanceAction",
      "rds:CopyDBClusterParameterGroup",
      "rds:CopyDBClusterSnapshot",
      "rds:CopyDBParameterGroup",
      "rds:CreateDBCluster",
      "rds:CreateDBClusterParameterGroup",
      "rds:CreateDBClusterSnapshot",
      "rds:CreateDBInstance",
      "rds:CreateDBParameterGroup",
      "rds:CreateDBSubnetGroup",
      "rds:CreateEventSubscription",
      "rds:DeleteDBCluster",
      "rds:DeleteDBClusterParameterGroup",
      "rds:DeleteDBClusterSnapshot",
      "rds:DeleteDBInstance",
      "rds:DeleteDBParameterGroup",
      "rds:DeleteDBSubnetGroup",
      "rds:DeleteEventSubscription",
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEngineDefaultClusterParameters",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOptionGroups",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DescribeValidDBInstanceModifications",
      "rds:DownloadDBLogFilePortion",
      "rds:FailoverDBCluster",
      "rds:ListTagsForResource",
      "rds:ModifyDBCluster",
      "rds:ModifyDBClusterParameterGroup",
      "rds:ModifyDBClusterSnapshotAttribute",
      "rds:ModifyDBInstance",
      "rds:ModifyDBParameterGroup",
      "rds:ModifyDBSubnetGroup",
      "rds:ModifyEventSubscription",
      "rds:PromoteReadReplicaDBCluster",
      "rds:RebootDBInstance",
      "rds:RemoveRoleFromDBCluster",
      "rds:RemoveSourceIdentifierFromSubscription",
      "rds:RemoveTagsFromResource",
      "rds:ResetDBClusterParameterGroup",
      "rds:ResetDBParameterGroup",
      "rds:RestoreDBClusterFromSnapshot",
      "rds:RestoreDBClusterToPointInTime"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "kms:ListAliases",
      "kms:ListKeyPolicies",
      "kms:ListKeys",
      "kms:ListRetirableGrants",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "rds.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "mobileanalytics:GetReports",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "mobileanalytics:GetReports",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:AddPermission",
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:ListTopics",
        "sns:SetTopicAttributes",
        "sns:GetTopicAttributes"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:ListAllMyBuckets",
        "s3:PutBucketPolicy",
        "s3:ListBucket",
        "s3:GetObject",
        "s3:GetBucketLocation",
        "s3:GetBucketPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "cloudtrail:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole",
        "iam:ListRoles",
        "iam:GetRolePolicy",
        "iam:GetUser"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kms:ListKeys",
        "kms:ListAliases"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:ListFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:AddPermission",
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:ListTopics",
      "sns:SetTopicAttributes",
      "sns:GetTopicAttributes"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:ListAllMyBuckets",
      "s3:PutBucketPolicy",
      "s3:ListBucket",
      "s3:GetObject",
      "s3:GetBucketLocation",
      "s3:GetBucketPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "cloudtrail:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole",
      "iam:ListRoles",
      "iam:GetRolePolicy",
      "iam:GetUser"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kms:ListKeys",
      "kms:ListAliases"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:ListFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
        "cognito-identity:LookupDeveloperIdentity",
        "cognito-identity:MergeDeveloperIdentities",
        "cognito-identity:UnlinkDeveloperIdentity"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
      "cognito-identity:LookupDeveloperIdentity",
      "cognito-identity:MergeDeveloperIdentities",
      "cognito-identity:UnlinkDeveloperIdentity"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:DescribeCertificate",
        "acm:ListCertificates",
        "acm:ListTagsForCertificate",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingPolicies",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeLaunchConfigurations",
        "autoscaling:DescribeLifecycleHooks",
        "autoscaling:DescribePolicies",
        "autoscaling:DescribeScheduledActions",
        "autoscaling:DescribeTags",
        "cloudfront:ListTagsForResource",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudwatch:DescribeAlarms",
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:ListPipelines",
        "config:BatchGet*",
        "config:Describe*",
        "config:Get*",
        "config:List*",
        "config:Put*",
        "config:Select*",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:DescribeLimits",
        "dynamodb:DescribeTable",
        "dynamodb:ListTables",
        "dynamodb:ListTagsOfResource",
        "ec2:Describe*",
        "elasticache:DescribeCacheClusters",
        "elasticache:DescribeReplicationGroups",
        "elasticfilesystem:DescribeFileSystems",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeLoadBalancerPolicies",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:DescribeTags",
        "elasticmapreduce:DescribeCluster",
        "elasticmapreduce:DescribeSecurityConfiguration",
        "elasticmapreduce:ListClusters",
        "es:DescribeElasticsearchDomains",
        "es:ListDomainNames",
        "guardduty:GetDetector",
        "guardduty:GetMasterAccount",
        "guardduty:ListDetectors",
        "iam:GenerateCredentialReport",
        "iam:GetAccountAuthorizationDetails",
        "iam:GetAccountPasswordPolicy",
        "iam:GetAccountSummary",
        "iam:GetCredentialReport",
        "iam:GetGroup",
        "iam:GetGroupPolicy",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:GetUser",
        "iam:GetUserPolicy",
        "iam:ListAttachedGroupPolicies",
        "iam:ListAttachedRolePolicies",
        "iam:ListAttachedUserPolicies",
        "iam:ListEntitiesForPolicy",
        "iam:ListGroupPolicies",
        "iam:ListGroupsForUser",
        "iam:ListInstanceProfilesForRole",
        "iam:ListPolicyVersions",
        "iam:ListRolePolicies",
        "iam:ListUserPolicies",
        "iam:ListVirtualMFADevices",
        "kms:DescribeKey",
        "kms:GetKeyRotationStatus",
        "kms:ListKeys",
        "lambda:GetAlias",
        "lambda:GetFunction",
        "lambda:GetPolicy",
        "lambda:ListAliases",
        "lambda:ListFunctions",
        "logs:DescribeLogGroups",
        "rds:DescribeDBClusters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSnapshotAttributes",
        "rds:DescribeDBSnapshots",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEventSubscriptions",
        "rds:ListTagsForResource",
        "redshift:DescribeClusterParameterGroups",
        "redshift:DescribeClusterParameters",
        "redshift:DescribeClusterSecurityGroups",
        "redshift:DescribeClusterSnapshots",
        "redshift:DescribeClusterSubnetGroups",
        "redshift:DescribeClusters",
        "redshift:DescribeEventSubscriptions",
        "redshift:DescribeLoggingStatus",
        "s3:GetAccelerateConfiguration",
        "s3:GetAccountPublicAccessBlock",
        "s3:GetBucketAcl",
        "s3:GetBucketCORS",
        "s3:GetBucketLocation",
        "s3:GetBucketLogging",
        "s3:GetBucketNotification",
        "s3:GetBucketObjectLockConfiguration",
        "s3:GetBucketPolicy",
        "s3:GetBucketPublicAccessBlock",
        "s3:GetBucketRequestPayment",
        "s3:GetBucketTagging",
        "s3:GetBucketVersioning",
        "s3:GetBucketWebsite",
        "s3:GetEncryptionConfiguration",
        "s3:GetLifecycleConfiguration",
        "s3:GetObject",
        "s3:GetReplicationConfiguration",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "shield:DescribeDRTAccess",
        "shield:DescribeProtection",
        "shield:DescribeSubscription",
        "sns:ListSubscriptions",
        "ssm:DescribeAutomationExecutions",
        "ssm:DescribeDocument",
        "ssm:GetAutomationExecution",
        "ssm:GetDocument",
        "waf-regional:GetWebACL",
        "waf-regional:GetWebACLForResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:DescribeCertificate",
      "acm:ListCertificates",
      "acm:ListTagsForCertificate",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingPolicies",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeLifecycleHooks",
      "autoscaling:DescribePolicies",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:DescribeTags",
      "cloudfront:ListTagsForResource",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTags",
      "cloudwatch:DescribeAlarms",
      "codepipeline:GetPipeline",
      "codepipeline:GetPipelineState",
      "codepipeline:ListPipelines",
      "config:BatchGet*",
      "config:Describe*",
      "config:Get*",
      "config:List*",
      "config:Put*",
      "config:Select*",
      "dynamodb:DescribeContinuousBackups",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeTable",
      "dynamodb:ListTables",
      "dynamodb:ListTagsOfResource",
      "ec2:Describe*",
      "elasticache:DescribeCacheClusters",
      "elasticache:DescribeReplicationGroups",
      "elasticfilesystem:DescribeFileSystems",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeTags",
      "elasticmapreduce:DescribeCluster",
      "elasticmapreduce:DescribeSecurityConfiguration",
      "elasticmapreduce:ListClusters",
      "es:DescribeElasticsearchDomains",
      "es:ListDomainNames",
      "guardduty:GetDetector",
      "guardduty:GetMasterAccount",
      "guardduty:ListDetectors",
      "iam:GenerateCredentialReport",
      "iam:GetAccountAuthorizationDetails",
      "iam:GetAccountPasswordPolicy",
      "iam:GetAccountSummary",
      "iam:GetCredentialReport",
      "iam:GetGroup",
      "iam:GetGroupPolicy",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:GetUser",
      "iam:GetUserPolicy",
      "iam:ListAttachedGroupPolicies",
      "iam:ListAttachedRolePolicies",
      "iam:ListAttachedUserPolicies",
      "iam:ListEntitiesForPolicy",
      "iam:ListGroupPolicies",
      "iam:ListGroupsForUser",
      "iam:ListInstanceProfilesForRole",
      "iam:ListPolicyVersions",
      "iam:ListRolePolicies",
      "iam:ListUserPolicies",
      "iam:ListVirtualMFADevices",
      "kms:DescribeKey",
      "kms:GetKeyRotationStatus",
      "kms:ListKeys",
      "lambda:GetAlias",
      "lambda:GetFunction",
      "lambda:GetPolicy",
      "lambda:ListAliases",
      "lambda:ListFunctions",
      "logs:DescribeLogGroups",
      "rds:DescribeDBClusters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSnapshotAttributes",
      "rds:DescribeDBSnapshots",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEventSubscriptions",
      "rds:ListTagsForResource",
      "redshift:DescribeClusterParameterGroups",
      "redshift:DescribeClusterParameters",
      "redshift:DescribeClusterSecurityGroups",
      "redshift:DescribeClusterSnapshots",
      "redshift:DescribeClusterSubnetGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeEventSubscriptions",
      "redshift:DescribeLoggingStatus",
      "s3:GetAccelerateConfiguration",
      "s3:GetAccountPublicAccessBlock",
      "s3:GetBucketAcl",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketNotification",
      "s3:GetBucketObjectLockConfiguration",
      "s3:GetBucketPolicy",
      "s3:GetBucketPublicAccessBlock",
      "s3:GetBucketRequestPayment",
      "s3:GetBucketTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketWebsite",
      "s3:GetEncryptionConfiguration",
      "s3:GetLifecycleConfiguration",
      "s3:GetObject",
      "s3:GetReplicationConfiguration",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "shield:DescribeDRTAccess",
      "shield:DescribeProtection",
      "shield:DescribeSubscription",
      "sns:ListSubscriptions",
      "ssm:DescribeAutomationExecutions",
      "ssm:DescribeDocument",
      "ssm:GetAutomationExecution",
      "ssm:GetDocument",
      "waf-regional:GetWebACL",
      "waf-regional:GetWebACLForResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "ds:AuthorizeApplication",
        "ds:UnauthorizeApplication",
        "ds:DescribeTrusts",
        "iam:ListPolicies",
        "organizations:EnableAWSServiceAccess",
        "organizations:DescribeOrganization",
        "organizations:DescribeAccount",
        "organizations:ListRoots",
        "organizations:ListAccounts",
        "organizations:ListAccountsForParent",
        "organizations:ListParents",
        "organizations:ListChildren",
        "organizations:ListOrganizationalUnitsForParent",
        "sso:*",
        "sso-directory:DescribeDirectory",
        "ds:CreateAlias"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AWSSSOMemberAccountAdministrator"
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "ds:AuthorizeApplication",
      "ds:UnauthorizeApplication",
      "ds:DescribeTrusts",
      "iam:ListPolicies",
      "organizations:EnableAWSServiceAccess",
      "organizations:DescribeOrganization",
      "organizations:DescribeAccount",
      "organizations:ListRoots",
      "organizations:ListAccounts",
      "organizations:ListAccountsForParent",
      "organizations:ListParents",
      "organizations:ListChildren",
      "organizations:ListOrganizationalUnitsForParent",
      "sso:*",
      "sso-directory:DescribeDirectory",
      "ds:CreateAlias"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AWSSSOMemberAccountAdministrator"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appstream:UpdateFleet",
        "appstream:DescribeFleets",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appstream:UpdateFleet",
      "appstream:DescribeFleets",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm-pca:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm-pca:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:*",
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetBucketAcl",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeRouteTables",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "iam:ListRolePolicies",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "cloudwatch:PutMetricData"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*/*",
        "arn:aws:s3:::*/*aws-glue-*/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::crawler-public*",
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:/aws-glue/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:security-group/*",
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "aws-glue-service-resource"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "glue:*",
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:GetBucketAcl",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeRouteTables",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "iam:ListRolePolicies",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "cloudwatch:PutMetricData"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*/*",
      "arn:aws:s3:::*/*aws-glue-*/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::crawler-public*",
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:/aws-glue/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:security-group/*",
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringEquals": {
        "aws:TagKeys": [
          "aws-glue-service-resource"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeAvailabilityZones",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeSubnets",
        "ec2:AssociateAddress",
        "ec2:DisassociateAddress",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcEndpoints",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:ListBucket",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:GetObjectVersion",
        "s3:DeleteObjectVersion",
        "s3:PutBucketPolicy",
        "s3:PutEncryptionConfiguration"
      ],
      "Resource": [
        "arn:aws:s3:::appstream2-36fb080bb8-*",
        "arn:aws:s3:::appstream-app-settings-*",
        "arn:aws:s3:::appstream-logs-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeAvailabilityZones",
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeSubnets",
      "ec2:AssociateAddress",
      "ec2:DisassociateAddress",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcEndpoints",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject",
      "s3:GetObjectVersion",
      "s3:DeleteObjectVersion",
      "s3:PutBucketPolicy",
      "s3:PutEncryptionConfiguration"
    ],
    "Resource": [
      "arn:aws:s3:::appstream2-36fb080bb8-*",
      "arn:aws:s3:::appstream-app-settings-*",
      "arn:aws:s3:::appstream-logs-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:*",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeInternetGateways",
        "sns:CreateTopic",
        "sns:Get*",
        "sns:List*",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:DisableAlarmActions",
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricWidgetImage",
        "cloudwatch:GetMetricData",
        "tag:GetResources",
        "tag:UntagResources",
        "tag:GetTagValues",
        "tag:GetTagKeys",
        "tag:TagResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "redshift.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "redshift:*",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeInternetGateways",
      "sns:CreateTopic",
      "sns:Get*",
      "sns:List*",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:EnableAlarmActions",
      "cloudwatch:DisableAlarmActions",
      "cloudwatch:ListMetrics",
      "cloudwatch:GetMetricWidgetImage",
      "cloudwatch:GetMetricData",
      "tag:GetResources",
      "tag:UntagResources",
      "tag:GetTagValues",
      "tag:GetTagKeys",
      "tag:TagResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "redshift.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:CreateLogGroup",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "zocalo:Describe*",
        "ds:DescribeDirectories",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "zocalo:Describe*",
      "ds:DescribeDirectories",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudhsm:Get*",
        "cloudhsm:List*",
        "cloudhsm:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudhsm:Get*",
      "cloudhsm:List*",
      "cloudhsm:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "comprehend:*",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "iam:ListRoles",
        "iam:GetRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "comprehend:*",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "iam:ListRoles",
      "iam:GetRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "fsx:*",
        "kms:ListAliases",
        "s3:HeadBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "fsx.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "s3.data-source.lustre.fsx.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "fsx:*",
      "kms:ListAliases",
      "s3:HeadBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "fsx.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "s3.data-source.lustre.fsx.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:Describe*",
        "acm:Get*",
        "acm:List*",
        "acm:Request*",
        "acm:Resend*",
        "autoscaling:*",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListPublicKeys",
        "cloudtrail:ListTags",
        "cloudtrail:LookupEvents",
        "cloudtrail:StartLogging",
        "cloudtrail:StopLogging",
        "cloudwatch:*",
        "codecommit:BatchGetRepositories",
        "codecommit:CreateBranch",
        "codecommit:CreateRepository",
        "codecommit:Get*",
        "codecommit:GitPull",
        "codecommit:GitPush",
        "codecommit:List*",
        "codecommit:Put*",
        "codecommit:Test*",
        "codecommit:Update*",
        "codedeploy:*",
        "codepipeline:*",
        "config:*",
        "ds:*",
        "ec2:Allocate*",
        "ec2:AssignPrivateIpAddresses*",
        "ec2:Associate*",
        "ec2:Allocate*",
        "ec2:AttachInternetGateway",
        "ec2:AttachNetworkInterface",
        "ec2:AttachVpnGateway",
        "ec2:Bundle*",
        "ec2:Cancel*",
        "ec2:Copy*",
        "ec2:CreateCustomerGateway",
        "ec2:CreateDhcpOptions",
        "ec2:CreateFlowLogs",
        "ec2:CreateImage",
        "ec2:CreateInstanceExportTask",
        "ec2:CreateInternetGateway",
        "ec2:CreateKeyPair",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkInterface",
        "ec2:CreatePlacementGroup",
        "ec2:CreateReservedInstancesListing",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSnapshot",
        "ec2:CreateSpotDatafeedSubscription",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpnConnection",
        "ec2:CreateVpnConnectionRoute",
        "ec2:CreateVpnGateway",
        "ec2:DeleteFlowLogs",
        "ec2:DeleteKeyPair",
        "ec2:DeleteNatGateway",
        "ec2:DeleteNetworkInterface",
        "ec2:DeletePlacementGroup",
        "ec2:DeleteSnapshot",
        "ec2:DeleteSpotDatafeedSubscription",
        "ec2:DeleteSubnet",
        "ec2:DeleteTags",
        "ec2:DeleteVpc",
        "ec2:DeleteVpcEndpoints",
        "ec2:DeleteVpnConnection",
        "ec2:DeleteVpnConnectionRoute",
        "ec2:DeleteVpnGateway",
        "ec2:DeregisterImage",
        "ec2:Describe*",
        "ec2:DetachInternetGateway",
        "ec2:DetachNetworkInterface",
        "ec2:DetachVpnGateway",
        "ec2:DisableVgwRoutePropagation",
        "ec2:DisableVpcClassicLinkDnsSupport",
        "ec2:DisassociateAddress",
        "ec2:DisassociateRouteTable",
        "ec2:EnableVgwRoutePropagation",
        "ec2:EnableVolumeIO",
        "ec2:EnableVpcClassicLinkDnsSupport",
        "ec2:GetConsoleOutput",
        "ec2:GetHostReservationPurchasePreview",
        "ec2:GetPasswordData",
        "ec2:Import*",
        "ec2:Modify*",
        "ec2:MonitorInstances",
        "ec2:MoveAddressToVpc",
        "ec2:Purchase*",
        "ec2:RegisterImage",
        "ec2:Release*",
        "ec2:Replace*",
        "ec2:ReportInstanceStatus",
        "ec2:Request*",
        "ec2:Reset*",
        "ec2:RestoreAddressToClassic",
        "ec2:RunScheduledInstances",
        "ec2:UnassignPrivateIpAddresses",
        "ec2:UnmonitorInstances",
        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
        "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
        "elasticloadbalancing:*",
        "events:*",
        "iam:GetAccount*",
        "iam:GetContextKeys*",
        "iam:GetCredentialReport",
        "iam:ListAccountAliases",
        "iam:ListGroups",
        "iam:ListOpenIDConnectProviders",
        "iam:ListPolicies",
        "iam:ListPoliciesGrantingServiceAccess",
        "iam:ListRoles",
        "iam:ListSAMLProviders",
        "iam:ListServerCertificates",
        "iam:Simulate*",
        "iam:UpdateServerCertificate",
        "iam:UpdateSigningCertificate",
        "kinesis:ListStreams",
        "kinesis:PutRecord",
        "kms:CreateAlias",
        "kms:CreateKey",
        "kms:DeleteAlias",
        "kms:Describe*",
        "kms:GenerateRandom",
        "kms:Get*",
        "kms:List*",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "lambda:Create*",
        "lambda:Delete*",
        "lambda:Get*",
        "lambda:InvokeFunction",
        "lambda:List*",
        "lambda:PublishVersion",
        "lambda:Update*",
        "logs:*",
        "rds:Describe*",
        "rds:ListTagsForResource",
        "route53:*",
        "route53domains:*",
        "ses:*",
        "sns:*",
        "sqs:*",
        "trustedadvisor:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AcceptVpcPeeringConnection",
        "ec2:AttachClassicLinkVpc",
        "ec2:AttachVolume",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateVpcPeeringConnection",
        "ec2:DeleteCustomerGateway",
        "ec2:DeleteDhcpOptions",
        "ec2:DeleteInternetGateway",
        "ec2:DeleteNetworkAcl*",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteVolume",
        "ec2:DeleteVpcPeeringConnection",
        "ec2:DetachClassicLinkVpc",
        "ec2:DetachVolume",
        "ec2:DisableVpcClassicLink",
        "ec2:EnableVpcClassicLink",
        "ec2:GetConsoleScreenshot",
        "ec2:RebootInstances",
        "ec2:RejectVpcPeeringConnection",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:RunInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "s3:*",
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetAccessKeyLastUsed",
        "iam:GetGroup*",
        "iam:GetInstanceProfile",
        "iam:GetLoginProfile",
        "iam:GetOpenIDConnectProvider",
        "iam:GetPolicy*",
        "iam:GetRole*",
        "iam:GetSAMLProvider",
        "iam:GetSSHPublicKey",
        "iam:GetServerCertificate",
        "iam:GetServiceLastAccessed*",
        "iam:GetUser*",
        "iam:ListAccessKeys",
        "iam:ListAttached*",
        "iam:ListEntitiesForPolicy",
        "iam:ListGroupPolicies",
        "iam:ListGroupsForUser",
        "iam:ListInstanceProfiles*",
        "iam:ListMFADevices",
        "iam:ListPolicyVersions",
        "iam:ListRolePolicies",
        "iam:ListSSHPublicKeys",
        "iam:ListSigningCertificates",
        "iam:ListUserPolicies",
        "iam:Upload*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole",
        "iam:ListRoles",
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/rds-monitoring-role",
        "arn:aws:iam::*:role/ec2-sysadmin-*",
        "arn:aws:iam::*:role/ecr-sysadmin-*",
        "arn:aws:iam::*:role/lambda-sysadmin-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:Describe*",
      "acm:Get*",
      "acm:List*",
      "acm:Request*",
      "acm:Resend*",
      "autoscaling:*",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListPublicKeys",
      "cloudtrail:ListTags",
      "cloudtrail:LookupEvents",
      "cloudtrail:StartLogging",
      "cloudtrail:StopLogging",
      "cloudwatch:*",
      "codecommit:BatchGetRepositories",
      "codecommit:CreateBranch",
      "codecommit:CreateRepository",
      "codecommit:Get*",
      "codecommit:GitPull",
      "codecommit:GitPush",
      "codecommit:List*",
      "codecommit:Put*",
      "codecommit:Test*",
      "codecommit:Update*",
      "codedeploy:*",
      "codepipeline:*",
      "config:*",
      "ds:*",
      "ec2:Allocate*",
      "ec2:AssignPrivateIpAddresses*",
      "ec2:Associate*",
      "ec2:Allocate*",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:AttachVpnGateway",
      "ec2:Bundle*",
      "ec2:Cancel*",
      "ec2:Copy*",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDhcpOptions",
      "ec2:CreateFlowLogs",
      "ec2:CreateImage",
      "ec2:CreateInstanceExportTask",
      "ec2:CreateInternetGateway",
      "ec2:CreateKeyPair",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkInterface",
      "ec2:CreatePlacementGroup",
      "ec2:CreateReservedInstancesListing",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSnapshot",
      "ec2:CreateSpotDatafeedSubscription",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVolume",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:CreateVpnConnection",
      "ec2:CreateVpnConnectionRoute",
      "ec2:CreateVpnGateway",
      "ec2:DeleteFlowLogs",
      "ec2:DeleteKeyPair",
      "ec2:DeleteNatGateway",
      "ec2:DeleteNetworkInterface",
      "ec2:DeletePlacementGroup",
      "ec2:DeleteSnapshot",
      "ec2:DeleteSpotDatafeedSubscription",
      "ec2:DeleteSubnet",
      "ec2:DeleteTags",
      "ec2:DeleteVpc",
      "ec2:DeleteVpcEndpoints",
      "ec2:DeleteVpnConnection",
      "ec2:DeleteVpnConnectionRoute",
      "ec2:DeleteVpnGateway",
      "ec2:DeregisterImage",
      "ec2:Describe*",
      "ec2:DetachInternetGateway",
      "ec2:DetachNetworkInterface",
      "ec2:DetachVpnGateway",
      "ec2:DisableVgwRoutePropagation",
      "ec2:DisableVpcClassicLinkDnsSupport",
      "ec2:DisassociateAddress",
      "ec2:DisassociateRouteTable",
      "ec2:EnableVgwRoutePropagation",
      "ec2:EnableVolumeIO",
      "ec2:EnableVpcClassicLinkDnsSupport",
      "ec2:GetConsoleOutput",
      "ec2:GetHostReservationPurchasePreview",
      "ec2:GetPasswordData",
      "ec2:Import*",
      "ec2:Modify*",
      "ec2:MonitorInstances",
      "ec2:MoveAddressToVpc",
      "ec2:Purchase*",
      "ec2:RegisterImage",
      "ec2:Release*",
      "ec2:Replace*",
      "ec2:ReportInstanceStatus",
      "ec2:Request*",
      "ec2:Reset*",
      "ec2:RestoreAddressToClassic",
      "ec2:RunScheduledInstances",
      "ec2:UnassignPrivateIpAddresses",
      "ec2:UnmonitorInstances",
      "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "elasticloadbalancing:*",
      "events:*",
      "iam:GetAccount*",
      "iam:GetContextKeys*",
      "iam:GetCredentialReport",
      "iam:ListAccountAliases",
      "iam:ListGroups",
      "iam:ListOpenIDConnectProviders",
      "iam:ListPolicies",
      "iam:ListPoliciesGrantingServiceAccess",
      "iam:ListRoles",
      "iam:ListSAMLProviders",
      "iam:ListServerCertificates",
      "iam:Simulate*",
      "iam:UpdateServerCertificate",
      "iam:UpdateSigningCertificate",
      "kinesis:ListStreams",
      "kinesis:PutRecord",
      "kms:CreateAlias",
      "kms:CreateKey",
      "kms:DeleteAlias",
      "kms:Describe*",
      "kms:GenerateRandom",
      "kms:Get*",
      "kms:List*",
      "kms:Encrypt",
      "kms:ReEncrypt*",
      "lambda:Create*",
      "lambda:Delete*",
      "lambda:Get*",
      "lambda:InvokeFunction",
      "lambda:List*",
      "lambda:PublishVersion",
      "lambda:Update*",
      "logs:*",
      "rds:Describe*",
      "rds:ListTagsForResource",
      "route53:*",
      "route53domains:*",
      "ses:*",
      "sns:*",
      "sqs:*",
      "trustedadvisor:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AcceptVpcPeeringConnection",
      "ec2:AttachClassicLinkVpc",
      "ec2:AttachVolume",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateVpcPeeringConnection",
      "ec2:DeleteCustomerGateway",
      "ec2:DeleteDhcpOptions",
      "ec2:DeleteInternetGateway",
      "ec2:DeleteNetworkAcl*",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteVolume",
      "ec2:DeleteVpcPeeringConnection",
      "ec2:DetachClassicLinkVpc",
      "ec2:DetachVolume",
      "ec2:DisableVpcClassicLink",
      "ec2:EnableVpcClassicLink",
      "ec2:GetConsoleScreenshot",
      "ec2:RebootInstances",
      "ec2:RejectVpcPeeringConnection",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:RunInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "s3:*",
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetAccessKeyLastUsed",
      "iam:GetGroup*",
      "iam:GetInstanceProfile",
      "iam:GetLoginProfile",
      "iam:GetOpenIDConnectProvider",
      "iam:GetPolicy*",
      "iam:GetRole*",
      "iam:GetSAMLProvider",
      "iam:GetSSHPublicKey",
      "iam:GetServerCertificate",
      "iam:GetServiceLastAccessed*",
      "iam:GetUser*",
      "iam:ListAccessKeys",
      "iam:ListAttached*",
      "iam:ListEntitiesForPolicy",
      "iam:ListGroupPolicies",
      "iam:ListGroupsForUser",
      "iam:ListInstanceProfiles*",
      "iam:ListMFADevices",
      "iam:ListPolicyVersions",
      "iam:ListRolePolicies",
      "iam:ListSSHPublicKeys",
      "iam:ListSigningCertificates",
      "iam:ListUserPolicies",
      "iam:Upload*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole",
      "iam:ListRoles",
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/rds-monitoring-role",
      "arn:aws:iam::*:role/ec2-sysadmin-*",
      "arn:aws:iam::*:role/ecr-sysadmin-*",
      "arn:aws:iam::*:role/lambda-sysadmin-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:RunTask"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "ecs-tasks.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ecs:RunTask"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "ecs-tasks.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:Get*",
        "route53:List*",
        "route53:TestDNSAnswer"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:Get*",
      "route53:List*",
      "route53:TestDNSAnswer"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "discovery:ListConfigurations",
        "discovery:DescribeConfigurations"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "discovery:ListConfigurations",
      "discovery:DescribeConfigurations"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "ec2-reports:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "ec2-reports:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DescribeServices",
        "ecs:UpdateService"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:DescribeAlarms",
        "cloudwatch:PutMetricAlarm"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DescribeServices",
      "ecs:UpdateService"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:DescribeAlarms",
      "cloudwatch:PutMetricAlarm"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appsync:GraphQL",
        "appsync:CreateResolver",
        "appsync:CreateType",
        "appsync:DeleteResolver",
        "appsync:DeleteType",
        "appsync:GetResolver",
        "appsync:GetType",
        "appsync:GetDataSource",
        "appsync:GetSchemaCreationStatus",
        "appsync:GetIntrospectionSchema",
        "appsync:GetGraphqlApi",
        "appsync:ListTypes",
        "appsync:ListApiKeys",
        "appsync:ListResolvers",
        "appsync:ListDataSources",
        "appsync:ListGraphqlApis",
        "appsync:StartSchemaCreation",
        "appsync:UpdateResolver",
        "appsync:UpdateType"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appsync:GraphQL",
      "appsync:CreateResolver",
      "appsync:CreateType",
      "appsync:DeleteResolver",
      "appsync:DeleteType",
      "appsync:GetResolver",
      "appsync:GetType",
      "appsync:GetDataSource",
      "appsync:GetSchemaCreationStatus",
      "appsync:GetIntrospectionSchema",
      "appsync:GetGraphqlApi",
      "appsync:ListTypes",
      "appsync:ListApiKeys",
      "appsync:ListResolvers",
      "appsync:ListDataSources",
      "appsync:ListGraphqlApis",
      "appsync:StartSchemaCreation",
      "appsync:UpdateResolver",
      "appsync:UpdateType"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "a4b:RegisterDevice",
        "a4b:CompleteRegistration",
        "a4b:SearchDevices",
        "a4b:SearchNetworkProfiles",
        "a4b:GetNetworkProfile",
        "a4b:PutDeviceSetupEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
      "Effect": "Allow",
      "Sid": "A4bDeviceSetupAccess"
    }
  ]
}
[
  {
    "Action": [
      "a4b:RegisterDevice",
      "a4b:CompleteRegistration",
      "a4b:SearchDevices",
      "a4b:SearchNetworkProfiles",
      "a4b:GetNetworkProfile",
      "a4b:PutDeviceSetupEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:GetSecretValue"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*",
    "Effect": "Allow",
    "Sid": "A4bDeviceSetupAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeImages",
        "ec2:DescribeImageAttribute",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeSpotFleetInstances",
        "ec2:DescribeSpotFleetRequests",
        "ec2:DescribeSpotPriceHistory",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:CreateLaunchTemplate",
        "ec2:DeleteLaunchTemplate",
        "ec2:RequestSpotFleet",
        "ec2:CancelSpotFleetRequests",
        "ec2:ModifySpotFleetRequest",
        "ec2:TerminateInstances",
        "ec2:RunInstances",
        "autoscaling:DescribeAccountLimits",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeLaunchConfigurations",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:CreateLaunchConfiguration",
        "autoscaling:CreateAutoScalingGroup",
        "autoscaling:UpdateAutoScalingGroup",
        "autoscaling:SetDesiredCapacity",
        "autoscaling:DeleteLaunchConfiguration",
        "autoscaling:DeleteAutoScalingGroup",
        "autoscaling:CreateOrUpdateTags",
        "autoscaling:SuspendProcesses",
        "autoscaling:PutNotificationConfiguration",
        "autoscaling:TerminateInstanceInAutoScalingGroup",
        "ecs:DescribeClusters",
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTaskDefinition",
        "ecs:DescribeTasks",
        "ecs:ListClusters",
        "ecs:ListContainerInstances",
        "ecs:ListTaskDefinitionFamilies",
        "ecs:ListTaskDefinitions",
        "ecs:ListTasks",
        "ecs:CreateCluster",
        "ecs:DeleteCluster",
        "ecs:RegisterTaskDefinition",
        "ecs:DeregisterTaskDefinition",
        "ecs:RunTask",
        "ecs:StartTask",
        "ecs:StopTask",
        "ecs:UpdateContainerAgent",
        "ecs:DeregisterContainerInstance",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "iam:GetInstanceProfile",
        "iam:GetRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ecs-tasks.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "spot.amazonaws.com",
            "spotfleet.amazonaws.com",
            "autoscaling.amazonaws.com",
            "ecs.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ec2:CreateAction": "RunInstances"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeInstances",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeImages",
      "ec2:DescribeImageAttribute",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSpotFleetInstances",
      "ec2:DescribeSpotFleetRequests",
      "ec2:DescribeSpotPriceHistory",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeLaunchTemplateVersions",
      "ec2:CreateLaunchTemplate",
      "ec2:DeleteLaunchTemplate",
      "ec2:RequestSpotFleet",
      "ec2:CancelSpotFleetRequests",
      "ec2:ModifySpotFleetRequest",
      "ec2:TerminateInstances",
      "ec2:RunInstances",
      "autoscaling:DescribeAccountLimits",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:CreateLaunchConfiguration",
      "autoscaling:CreateAutoScalingGroup",
      "autoscaling:UpdateAutoScalingGroup",
      "autoscaling:SetDesiredCapacity",
      "autoscaling:DeleteLaunchConfiguration",
      "autoscaling:DeleteAutoScalingGroup",
      "autoscaling:CreateOrUpdateTags",
      "autoscaling:SuspendProcesses",
      "autoscaling:PutNotificationConfiguration",
      "autoscaling:TerminateInstanceInAutoScalingGroup",
      "ecs:DescribeClusters",
      "ecs:DescribeContainerInstances",
      "ecs:DescribeTaskDefinition",
      "ecs:DescribeTasks",
      "ecs:ListClusters",
      "ecs:ListContainerInstances",
      "ecs:ListTaskDefinitionFamilies",
      "ecs:ListTaskDefinitions",
      "ecs:ListTasks",
      "ecs:CreateCluster",
      "ecs:DeleteCluster",
      "ecs:RegisterTaskDefinition",
      "ecs:DeregisterTaskDefinition",
      "ecs:RunTask",
      "ecs:StartTask",
      "ecs:StopTask",
      "ecs:UpdateContainerAgent",
      "ecs:DeregisterContainerInstance",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogGroups",
      "iam:GetInstanceProfile",
      "iam:GetRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ecs-tasks.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "spot.amazonaws.com",
          "spotfleet.amazonaws.com",
          "autoscaling.amazonaws.com",
          "ecs.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ec2:CreateAction": "RunInstances"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:Get*",
        "s3:List*",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::elasticbeanstalk-*",
        "arn:aws:s3:::elasticbeanstalk-*/*"
      ],
      "Effect": "Allow",
      "Sid": "BucketAccess"
    },
    {
      "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets",
        "xray:GetSamplingStatisticSummaries"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "XRayAccess"
    },
    {
      "Action": [
        "logs:PutLogEvents",
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
      ],
      "Effect": "Allow",
      "Sid": "CloudWatchLogsAccess"
    }
  ]
}
[
  {
    "Action": [
      "s3:Get*",
      "s3:List*",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::elasticbeanstalk-*",
      "arn:aws:s3:::elasticbeanstalk-*/*"
    ],
    "Effect": "Allow",
    "Sid": "BucketAccess"
  },
  {
    "Action": [
      "xray:PutTraceSegments",
      "xray:PutTelemetryRecords",
      "xray:GetSamplingRules",
      "xray:GetSamplingTargets",
      "xray:GetSamplingStatisticSummaries"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "XRayAccess"
  },
  {
    "Action": [
      "logs:PutLogEvents",
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:DescribeLogGroups"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
    ],
    "Effect": "Allow",
    "Sid": "CloudWatchLogsAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ListDeadLetterSourceQueues",
        "sqs:ListQueues"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "sqs:ListDeadLetterSourceQueues",
      "sqs:ListQueues"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "chime:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "chime:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "robomaker:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs",
        "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs:log-stream:*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::*DeepRacer*",
        "arn:aws:s3:::*Deepracer*",
        "arn:aws:s3:::*deepracer*",
        "arn:aws:s3:::dr-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "s3:ExistingObjectTag/DeepRacer": "true"
        }
      }
    },
    {
      "Action": [
        "kinesisvideo:CreateStream",
        "kinesisvideo:DescribeStream",
        "kinesisvideo:GetDataEndpoint",
        "kinesisvideo:PutMedia",
        "kinesisvideo:TagStream"
      ],
      "Resource": [
        "arn:aws:kinesisvideo:*:*:stream/dr-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "robomaker:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs",
      "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs:log-stream:*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::*DeepRacer*",
      "arn:aws:s3:::*Deepracer*",
      "arn:aws:s3:::*deepracer*",
      "arn:aws:s3:::dr-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIgnoreCase": {
        "s3:ExistingObjectTag/DeepRacer": "true"
      }
    }
  },
  {
    "Action": [
      "kinesisvideo:CreateStream",
      "kinesisvideo:DescribeStream",
      "kinesisvideo:GetDataEndpoint",
      "kinesisvideo:PutMedia",
      "kinesisvideo:TagStream"
    ],
    "Resource": [
      "arn:aws:kinesisvideo:*:*:stream/dr-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeAddresses",
        "ec2:DescribeInstances",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeVpcClassicLink",
        "ec2:CreateSecurityGroup",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:ModifyNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:AssociateAddress",
        "ec2:DisassociateAddress",
        "ec2:AttachNetworkInterface",
        "ec2:DetachNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssignIpv6Addresses",
        "ec2:UnassignIpv6Addresses"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeAddresses",
      "ec2:DescribeInstances",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeVpcClassicLink",
      "ec2:CreateSecurityGroup",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:ModifyNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:AssociateAddress",
      "ec2:DisassociateAddress",
      "ec2:AttachNetworkInterface",
      "ec2:DetachNetworkInterface",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssignIpv6Addresses",
      "ec2:UnassignIpv6Addresses"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mgh:CreateProgressUpdateStream"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:AssociateCreatedArtifact",
        "mgh:DescribeMigrationTask",
        "mgh:DisassociateCreatedArtifact",
        "mgh:ImportMigrationTask",
        "mgh:ListCreatedArtifacts",
        "mgh:NotifyMigrationTaskState",
        "mgh:PutResourceAttributes",
        "mgh:NotifyApplicationState",
        "mgh:DescribeApplicationState",
        "mgh:AssociateDiscoveredResource",
        "mgh:DisassociateDiscoveredResource",
        "mgh:ListDiscoveredResources"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:ListMigrationTasks"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mgh:CreateProgressUpdateStream"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:AssociateCreatedArtifact",
      "mgh:DescribeMigrationTask",
      "mgh:DisassociateCreatedArtifact",
      "mgh:ImportMigrationTask",
      "mgh:ListCreatedArtifacts",
      "mgh:NotifyMigrationTaskState",
      "mgh:PutResourceAttributes",
      "mgh:NotifyApplicationState",
      "mgh:DescribeApplicationState",
      "mgh:AssociateDiscoveredResource",
      "mgh:DisassociateDiscoveredResource",
      "mgh:ListDiscoveredResources"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:ListMigrationTasks"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "wellarchitected:Get*",
        "wellarchitected:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "wellarchitected:Get*",
      "wellarchitected:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "kinesis:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "kinesis:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "guardduty:Get*",
        "guardduty:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "guardduty:Get*",
      "guardduty:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "ds:AuthorizeApplication",
        "ds:GetAuthorizedApplicationDetails",
        "ds:UnauthorizeApplication",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "route53:AssociateVPCWithHostedZone"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "ds:AuthorizeApplication",
      "ds:GetAuthorizedApplicationDetails",
      "ds:UnauthorizeApplication",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "route53:AssociateVPCWithHostedZone"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AttachNetworkInterface",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:Describe*",
        "ec2:DetachNetworkInterface",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DeregisterTargets",
        "elasticloadbalancing:Describe*",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:RegisterTargets",
        "route53:ChangeResourceRecordSets",
        "route53:CreateHealthCheck",
        "route53:DeleteHealthCheck",
        "route53:Get*",
        "route53:List*",
        "route53:UpdateHealthCheck",
        "servicediscovery:DeregisterInstance",
        "servicediscovery:Get*",
        "servicediscovery:List*",
        "servicediscovery:RegisterInstance",
        "servicediscovery:UpdateInstanceCustomHealthStatus"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ECSTaskManagement"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": "arn:aws:ec2:*:*:network-interface/*",
      "Effect": "Allow",
      "Sid": "ECSTagging"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:DescribeLogGroups",
        "logs:PutRetentionPolicy"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*",
      "Effect": "Allow",
      "Sid": "CWLogGroupManagement"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*",
      "Effect": "Allow",
      "Sid": "CWLogStreamManagement"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AttachNetworkInterface",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:Describe*",
      "ec2:DetachNetworkInterface",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DeregisterTargets",
      "elasticloadbalancing:Describe*",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:RegisterTargets",
      "route53:ChangeResourceRecordSets",
      "route53:CreateHealthCheck",
      "route53:DeleteHealthCheck",
      "route53:Get*",
      "route53:List*",
      "route53:UpdateHealthCheck",
      "servicediscovery:DeregisterInstance",
      "servicediscovery:Get*",
      "servicediscovery:List*",
      "servicediscovery:RegisterInstance",
      "servicediscovery:UpdateInstanceCustomHealthStatus"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ECSTaskManagement"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": "arn:aws:ec2:*:*:network-interface/*",
    "Effect": "Allow",
    "Sid": "ECSTagging"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:DescribeLogGroups",
      "logs:PutRetentionPolicy"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*",
    "Effect": "Allow",
    "Sid": "CWLogGroupManagement"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:PutLogEvents"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*",
    "Effect": "Allow",
    "Sid": "CWLogStreamManagement"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "connect:Get*",
        "connect:Describe*",
        "connect:List*",
        "ds:DescribeDirectories"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "connect:GetFederationTokens",
      "Resource": "*",
      "Effect": "Deny"
    }
  ]
}
[
  {
    "Action": [
      "connect:Get*",
      "connect:Describe*",
      "connect:List*",
      "ds:DescribeDirectories"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "connect:GetFederationTokens",
    "Resource": "*",
    "Effect": "Deny"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:Describe*",
        "machinelearning:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:Describe*",
      "machinelearning:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rekognition:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rekognition:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudhsm:CreateLunaClient",
        "cloudhsm:GetClientConfiguration",
        "cloudhsm:DeleteLunaClient",
        "cloudhsm:DescribeLunaClient",
        "cloudhsm:ModifyLunaClient",
        "cloudhsm:DescribeHapg",
        "cloudhsm:ModifyHapg",
        "cloudhsm:GetConfig"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudhsm:CreateLunaClient",
      "cloudhsm:GetClientConfiguration",
      "cloudhsm:DeleteLunaClient",
      "cloudhsm:DescribeLunaClient",
      "cloudhsm:ModifyLunaClient",
      "cloudhsm:DescribeHapg",
      "cloudhsm:ModifyHapg",
      "cloudhsm:GetConfig"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:Predict"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:Predict"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mgh:CreateProgressUpdateStream"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:AssociateCreatedArtifact",
        "mgh:DescribeMigrationTask",
        "mgh:DisassociateCreatedArtifact",
        "mgh:ImportMigrationTask",
        "mgh:ListCreatedArtifacts",
        "mgh:NotifyMigrationTaskState",
        "mgh:PutResourceAttributes",
        "mgh:NotifyApplicationState",
        "mgh:DescribeApplicationState",
        "mgh:AssociateDiscoveredResource",
        "mgh:DisassociateDiscoveredResource",
        "mgh:ListDiscoveredResources"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:ListMigrationTasks"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mgh:CreateProgressUpdateStream"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:AssociateCreatedArtifact",
      "mgh:DescribeMigrationTask",
      "mgh:DisassociateCreatedArtifact",
      "mgh:ImportMigrationTask",
      "mgh:ListCreatedArtifacts",
      "mgh:NotifyMigrationTaskState",
      "mgh:PutResourceAttributes",
      "mgh:NotifyApplicationState",
      "mgh:DescribeApplicationState",
      "mgh:AssociateDiscoveredResource",
      "mgh:DisassociateDiscoveredResource",
      "mgh:ListDiscoveredResources"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:ListMigrationTasks"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "greengrass:CreateDeployment",
        "greengrass:CreateGroupVersion",
        "greengrass:CreateFunctionDefinition",
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetGroup",
        "greengrass:GetGroupVersion",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:GetAssociatedRole",
        "lambda:CreateFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:UpdateFunctionCode",
        "lambda:GetFunction",
        "lambda:UpdateFunctionConfiguration"
      ],
      "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeSecurityGroups",
      "greengrass:CreateDeployment",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetGroup",
      "greengrass:GetGroupVersion",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetAssociatedRole",
      "lambda:CreateFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:UpdateFunctionCode",
      "lambda:GetFunction",
      "lambda:UpdateFunctionConfiguration"
    ],
    "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "config:Get*",
        "config:Describe*",
        "config:Deliver*",
        "config:List*",
        "config:Select*",
        "tag:GetResources",
        "tag:GetTagKeys",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "config:Get*",
      "config:Describe*",
      "config:Deliver*",
      "config:List*",
      "config:Select*",
      "tag:GetResources",
      "tag:GetTagKeys",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:LookupEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:AcceptCertificateTransfer",
        "iot:AddThingToThingGroup",
        "iot:AssociateTargetsWithJob",
        "iot:AttachPolicy",
        "iot:AttachPrincipalPolicy",
        "iot:AttachThingPrincipal",
        "iot:CancelCertificateTransfer",
        "iot:CancelJob",
        "iot:CancelJobExecution",
        "iot:ClearDefaultAuthorizer",
        "iot:CreateAuthorizer",
        "iot:CreateCertificateFromCsr",
        "iot:CreateJob",
        "iot:CreateKeysAndCertificate",
        "iot:CreateOTAUpdate",
        "iot:CreatePolicy",
        "iot:CreatePolicyVersion",
        "iot:CreateRoleAlias",
        "iot:CreateStream",
        "iot:CreateThing",
        "iot:CreateThingGroup",
        "iot:CreateThingType",
        "iot:CreateTopicRule",
        "iot:DeleteAuthorizer",
        "iot:DeleteCACertificate",
        "iot:DeleteCertificate",
        "iot:DeleteJob",
        "iot:DeleteJobExecution",
        "iot:DeleteOTAUpdate",
        "iot:DeletePolicy",
        "iot:DeletePolicyVersion",
        "iot:DeleteRegistrationCode",
        "iot:DeleteRoleAlias",
        "iot:DeleteStream",
        "iot:DeleteThing",
        "iot:DeleteThingGroup",
        "iot:DeleteThingType",
        "iot:DeleteTopicRule",
        "iot:DeleteV2LoggingLevel",
        "iot:DeprecateThingType",
        "iot:DescribeAuthorizer",
        "iot:DescribeCACertificate",
        "iot:DescribeCertificate",
        "iot:DescribeCertificateTag",
        "iot:DescribeDefaultAuthorizer",
        "iot:DescribeEndpoint",
        "iot:DescribeEventConfigurations",
        "iot:DescribeIndex",
        "iot:DescribeJob",
        "iot:DescribeJobExecution",
        "iot:DescribeRoleAlias",
        "iot:DescribeStream",
        "iot:DescribeThing",
        "iot:DescribeThingGroup",
        "iot:DescribeThingRegistrationTask",
        "iot:DescribeThingType",
        "iot:DetachPolicy",
        "iot:DetachPrincipalPolicy",
        "iot:DetachThingPrincipal",
        "iot:DisableTopicRule",
        "iot:EnableTopicRule",
        "iot:GetEffectivePolicies",
        "iot:GetIndexingConfiguration",
        "iot:GetJobDocument",
        "iot:GetLoggingOptions",
        "iot:GetOTAUpdate",
        "iot:GetPolicy",
        "iot:GetPolicyVersion",
        "iot:GetRegistrationCode",
        "iot:GetTopicRule",
        "iot:GetV2LoggingOptions",
        "iot:ListAttachedPolicies",
        "iot:ListAuthorizers",
        "iot:ListCACertificates",
        "iot:ListCertificates",
        "iot:ListCertificatesByCA",
        "iot:ListIndices",
        "iot:ListJobExecutionsForJob",
        "iot:ListJobExecutionsForThing",
        "iot:ListJobs",
        "iot:ListOTAUpdates",
        "iot:ListOutgoingCertificates",
        "iot:ListPolicies",
        "iot:ListPolicyPrincipals",
        "iot:ListPolicyVersions",
        "iot:ListPrincipalPolicies",
        "iot:ListPrincipalThings",
        "iot:ListRoleAliases",
        "iot:ListStreams",
        "iot:ListTargetsForPolicy",
        "iot:ListThingGroups",
        "iot:ListThingGroupsForThing",
        "iot:ListThingPrincipals",
        "iot:ListThingRegistrationTaskReports",
        "iot:ListThingRegistrationTasks",
        "iot:ListThings",
        "iot:ListThingsInThingGroup",
        "iot:ListThingTypes",
        "iot:ListTopicRules",
        "iot:ListV2LoggingLevels",
        "iot:RegisterCACertificate",
        "iot:RegisterCertificate",
        "iot:RegisterThing",
        "iot:RejectCertificateTransfer",
        "iot:RemoveThingFromThingGroup",
        "iot:ReplaceTopicRule",
        "iot:SearchIndex",
        "iot:SetDefaultAuthorizer",
        "iot:SetDefaultPolicyVersion",
        "iot:SetLoggingOptions",
        "iot:SetV2LoggingLevel",
        "iot:SetV2LoggingOptions",
        "iot:StartThingRegistrationTask",
        "iot:StopThingRegistrationTask",
        "iot:TestAuthorization",
        "iot:TestInvokeAuthorizer",
        "iot:TransferCertificate",
        "iot:UpdateAuthorizer",
        "iot:UpdateCACertificate",
        "iot:UpdateCertificate",
        "iot:UpdateCertificateTag",
        "iot:UpdateEventConfigurations",
        "iot:UpdateIndexingConfiguration",
        "iot:UpdateRoleAlias",
        "iot:UpdateStream",
        "iot:UpdateThing",
        "iot:UpdateThingGroup",
        "iot:UpdateThingGroupsForThing",
        "iot:UpdateAccountAuditConfiguration",
        "iot:DescribeAccountAuditConfiguration",
        "iot:DeleteAccountAuditConfiguration",
        "iot:StartOnDemandAuditTask",
        "iot:CancelAuditTask",
        "iot:DescribeAuditTask",
        "iot:ListAuditTasks",
        "iot:CreateScheduledAudit",
        "iot:UpdateScheduledAudit",
        "iot:DeleteScheduledAudit",
        "iot:DescribeScheduledAudit",
        "iot:ListScheduledAudits",
        "iot:ListAuditFindings",
        "iot:CreateSecurityProfile",
        "iot:DescribeSecurityProfile",
        "iot:UpdateSecurityProfile",
        "iot:DeleteSecurityProfile",
        "iot:AttachSecurityProfile",
        "iot:DetachSecurityProfile",
        "iot:ListSecurityProfiles",
        "iot:ListSecurityProfilesForTarget",
        "iot:ListTargetsForSecurityProfile",
        "iot:ListActiveViolations",
        "iot:ListViolationEvents",
        "iot:ValidateSecurityProfileBehaviors"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:AcceptCertificateTransfer",
      "iot:AddThingToThingGroup",
      "iot:AssociateTargetsWithJob",
      "iot:AttachPolicy",
      "iot:AttachPrincipalPolicy",
      "iot:AttachThingPrincipal",
      "iot:CancelCertificateTransfer",
      "iot:CancelJob",
      "iot:CancelJobExecution",
      "iot:ClearDefaultAuthorizer",
      "iot:CreateAuthorizer",
      "iot:CreateCertificateFromCsr",
      "iot:CreateJob",
      "iot:CreateKeysAndCertificate",
      "iot:CreateOTAUpdate",
      "iot:CreatePolicy",
      "iot:CreatePolicyVersion",
      "iot:CreateRoleAlias",
      "iot:CreateStream",
      "iot:CreateThing",
      "iot:CreateThingGroup",
      "iot:CreateThingType",
      "iot:CreateTopicRule",
      "iot:DeleteAuthorizer",
      "iot:DeleteCACertificate",
      "iot:DeleteCertificate",
      "iot:DeleteJob",
      "iot:DeleteJobExecution",
      "iot:DeleteOTAUpdate",
      "iot:DeletePolicy",
      "iot:DeletePolicyVersion",
      "iot:DeleteRegistrationCode",
      "iot:DeleteRoleAlias",
      "iot:DeleteStream",
      "iot:DeleteThing",
      "iot:DeleteThingGroup",
      "iot:DeleteThingType",
      "iot:DeleteTopicRule",
      "iot:DeleteV2LoggingLevel",
      "iot:DeprecateThingType",
      "iot:DescribeAuthorizer",
      "iot:DescribeCACertificate",
      "iot:DescribeCertificate",
      "iot:DescribeCertificateTag",
      "iot:DescribeDefaultAuthorizer",
      "iot:DescribeEndpoint",
      "iot:DescribeEventConfigurations",
      "iot:DescribeIndex",
      "iot:DescribeJob",
      "iot:DescribeJobExecution",
      "iot:DescribeRoleAlias",
      "iot:DescribeStream",
      "iot:DescribeThing",
      "iot:DescribeThingGroup",
      "iot:DescribeThingRegistrationTask",
      "iot:DescribeThingType",
      "iot:DetachPolicy",
      "iot:DetachPrincipalPolicy",
      "iot:DetachThingPrincipal",
      "iot:DisableTopicRule",
      "iot:EnableTopicRule",
      "iot:GetEffectivePolicies",
      "iot:GetIndexingConfiguration",
      "iot:GetJobDocument",
      "iot:GetLoggingOptions",
      "iot:GetOTAUpdate",
      "iot:GetPolicy",
      "iot:GetPolicyVersion",
      "iot:GetRegistrationCode",
      "iot:GetTopicRule",
      "iot:GetV2LoggingOptions",
      "iot:ListAttachedPolicies",
      "iot:ListAuthorizers",
      "iot:ListCACertificates",
      "iot:ListCertificates",
      "iot:ListCertificatesByCA",
      "iot:ListIndices",
      "iot:ListJobExecutionsForJob",
      "iot:ListJobExecutionsForThing",
      "iot:ListJobs",
      "iot:ListOTAUpdates",
      "iot:ListOutgoingCertificates",
      "iot:ListPolicies",
      "iot:ListPolicyPrincipals",
      "iot:ListPolicyVersions",
      "iot:ListPrincipalPolicies",
      "iot:ListPrincipalThings",
      "iot:ListRoleAliases",
      "iot:ListStreams",
      "iot:ListTargetsForPolicy",
      "iot:ListThingGroups",
      "iot:ListThingGroupsForThing",
      "iot:ListThingPrincipals",
      "iot:ListThingRegistrationTaskReports",
      "iot:ListThingRegistrationTasks",
      "iot:ListThings",
      "iot:ListThingsInThingGroup",
      "iot:ListThingTypes",
      "iot:ListTopicRules",
      "iot:ListV2LoggingLevels",
      "iot:RegisterCACertificate",
      "iot:RegisterCertificate",
      "iot:RegisterThing",
      "iot:RejectCertificateTransfer",
      "iot:RemoveThingFromThingGroup",
      "iot:ReplaceTopicRule",
      "iot:SearchIndex",
      "iot:SetDefaultAuthorizer",
      "iot:SetDefaultPolicyVersion",
      "iot:SetLoggingOptions",
      "iot:SetV2LoggingLevel",
      "iot:SetV2LoggingOptions",
      "iot:StartThingRegistrationTask",
      "iot:StopThingRegistrationTask",
      "iot:TestAuthorization",
      "iot:TestInvokeAuthorizer",
      "iot:TransferCertificate",
      "iot:UpdateAuthorizer",
      "iot:UpdateCACertificate",
      "iot:UpdateCertificate",
      "iot:UpdateCertificateTag",
      "iot:UpdateEventConfigurations",
      "iot:UpdateIndexingConfiguration",
      "iot:UpdateRoleAlias",
      "iot:UpdateStream",
      "iot:UpdateThing",
      "iot:UpdateThingGroup",
      "iot:UpdateThingGroupsForThing",
      "iot:UpdateAccountAuditConfiguration",
      "iot:DescribeAccountAuditConfiguration",
      "iot:DeleteAccountAuditConfiguration",
      "iot:StartOnDemandAuditTask",
      "iot:CancelAuditTask",
      "iot:DescribeAuditTask",
      "iot:ListAuditTasks",
      "iot:CreateScheduledAudit",
      "iot:UpdateScheduledAudit",
      "iot:DeleteScheduledAudit",
      "iot:DescribeScheduledAudit",
      "iot:ListScheduledAudits",
      "iot:ListAuditFindings",
      "iot:CreateSecurityProfile",
      "iot:DescribeSecurityProfile",
      "iot:UpdateSecurityProfile",
      "iot:DeleteSecurityProfile",
      "iot:AttachSecurityProfile",
      "iot:DetachSecurityProfile",
      "iot:ListSecurityProfiles",
      "iot:ListSecurityProfilesForTarget",
      "iot:ListTargetsForSecurityProfile",
      "iot:ListActiveViolations",
      "iot:ListViolationEvents",
      "iot:ValidateSecurityProfileBehaviors"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:Describe*",
        "acm:List*",
        "application-autoscaling:Describe*",
        "appmesh:Describe*",
        "appmesh:List*",
        "appsync:List*",
        "athena:List*",
        "autoscaling:Describe*",
        "batch:DescribeComputeEnvironments",
        "batch:DescribeJobDefinitions",
        "chime:List*",
        "cloud9:Describe*",
        "cloud9:ListEnvironments",
        "clouddirectory:ListDirectories",
        "cloudformation:DescribeStack*",
        "cloudformation:GetTemplate",
        "cloudformation:ListStack*",
        "cloudformation:GetStackPolicy",
        "cloudfront:Get*",
        "cloudfront:List*",
        "cloudhsm:ListHapgs",
        "cloudhsm:ListHsms",
        "cloudhsm:ListLunaClients",
        "cloudsearch:DescribeDomains",
        "cloudsearch:DescribeServiceAccessPolicies",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudtrail:LookupEvents",
        "cloudwatch:Describe*",
        "codebuild:ListProjects",
        "codecommit:BatchGetRepositories",
        "codecommit:GetBranch",
        "codecommit:GetObjectIdentifier",
        "codecommit:GetRepository",
        "codecommit:List*",
        "codedeploy:Batch*",
        "codedeploy:Get*",
        "codedeploy:List*",
        "codepipeline:ListPipelines",
        "codestar:Describe*",
        "codestar:List*",
        "cognito-identity:ListIdentityPools",
        "cognito-idp:ListUserPools",
        "cognito-sync:Describe*",
        "cognito-sync:List*",
        "comprehend:Describe*",
        "comprehend:List*",
        "config:BatchGetAggregateResourceConfig",
        "config:BatchGetResourceConfig",
        "config:Deliver*",
        "config:Describe*",
        "config:Get*",
        "config:List*",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:EvaluateExpression",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:ListPipelines",
        "datapipeline:QueryObjects",
        "datapipeline:ValidatePipelineDefinition",
        "datasync:Describe*",
        "datasync:List*",
        "dax:Describe*",
        "dax:ListTags",
        "directconnect:Describe*",
        "dms:Describe*",
        "dms:ListTagsForResource",
        "ds:DescribeDirectories",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:DescribeGlobalTable",
        "dynamodb:DescribeTable",
        "dynamodb:DescribeTimeToLive",
        "dynamodb:ListBackups",
        "dynamodb:ListGlobalTables",
        "dynamodb:ListStreams",
        "dynamodb:ListTables",
        "ec2:Describe*",
        "ecr:DescribeRepositories",
        "ecr:GetRepositoryPolicy",
        "ecs:Describe*",
        "ecs:List*",
        "eks:DescribeCluster",
        "eks:ListClusters",
        "elasticache:Describe*",
        "elasticbeanstalk:Describe*",
        "elasticfilesystem:DescribeFileSystems",
        "elasticfilesystem:DescribeMountTargetSecurityGroups",
        "elasticfilesystem:DescribeMountTargets",
        "elasticloadbalancing:Describe*",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:ListClusters",
        "elasticmapreduce:ListInstances",
        "es:Describe*",
        "es:ListDomainNames",
        "events:Describe*",
        "events:List*",
        "firehose:Describe*",
        "firehose:List*",
        "fms:ListComplianceStatus",
        "fms:ListPolicies",
        "fsx:Describe*",
        "fsx:List*",
        "gamelift:ListBuilds",
        "gamelift:ListFleets",
        "glacier:DescribeVault",
        "glacier:GetVaultAccessPolicy",
        "glacier:ListVaults",
        "globalaccelerator:Describe*",
        "globalaccelerator:List*",
        "greengrass:List*",
        "guardduty:Get*",
        "guardduty:List*",
        "iam:GenerateCredentialReport",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:Get*",
        "iam:List*",
        "iam:SimulateCustomPolicy",
        "iam:SimulatePrincipalPolicy",
        "inspector:Describe*",
        "inspector:Get*",
        "inspector:List*",
        "inspector:Preview*",
        "iot:Describe*",
        "iot:GetPolicy",
        "iot:GetPolicyVersion",
        "iot:List*",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kinesis:ListTagsForStream",
        "kinesisanalytics:ListApplications",
        "kms:Describe*",
        "kms:Get*",
        "kms:List*",
        "lambda:GetAccountSettings",
        "lambda:GetFunctionConfiguration",
        "lambda:GetLayerVersionPolicy",
        "lambda:GetPolicy",
        "lambda:List*",
        "license-manager:List*",
        "lightsail:GetInstances",
        "lightsail:GetLoadBalancers",
        "logs:Describe*",
        "logs:ListTagsLogGroup",
        "machinelearning:DescribeMLModels",
        "mediaconnect:Describe*",
        "mediaconnect:List*",
        "mediastore:GetContainerPolicy",
        "mediastore:ListContainers",
        "opsworks:DescribeStacks",
        "opsworks-cm:DescribeServers",
        "organizations:List*",
        "organizations:Describe*",
        "quicksight:Describe*",
        "quicksight:List*",
        "ram:List*",
        "rds:Describe*",
        "rds:DownloadDBLogFilePortion",
        "rds:ListTagsForResource",
        "redshift:Describe*",
        "rekognition:Describe*",
        "rekognition:List*",
        "robomaker:Describe*",
        "robomaker:List*",
        "route53:Get*",
        "route53:List*",
        "route53domains:GetDomainDetail",
        "route53domains:GetOperationDetail",
        "route53domains:ListDomains",
        "route53domains:ListOperations",
        "route53domains:ListTagsForDomain",
        "route53resolver:List*",
        "route53resolver:Get*",
        "s3:GetAccelerateConfiguration",
        "s3:GetAccountPublicAccessBlock",
        "s3:GetAnalyticsConfiguration",
        "s3:GetBucket*",
        "s3:GetEncryptionConfiguration",
        "s3:GetInventoryConfiguration",
        "s3:GetLifecycleConfiguration",
        "s3:GetMetricsConfiguration",
        "s3:GetObjectAcl",
        "s3:GetObjectVersionAcl",
        "s3:GetReplicationConfiguration",
        "s3:ListAllMyBuckets",
        "sagemaker:Describe*",
        "sagemaker:List*",
        "sdb:DomainMetadata",
        "sdb:ListDomains",
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:ListSecrets",
        "secretsmanager:ListSecretVersionIds",
        "securityhub:Describe*",
        "securityhub:Get*",
        "securityhub:List*",
        "serverlessrepo:GetApplicationPolicy",
        "serverlessrepo:List*",
        "ses:GetIdentityDkimAttributes",
        "ses:GetIdentityVerificationAttributes",
        "ses:ListIdentities",
        "ses:ListVerifiedEmailAddresses",
        "shield:Describe*",
        "shield:List*",
        "snowball:ListClusters",
        "snowball:ListJobs",
        "sns:GetTopicAttributes",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sqs:GetQueueAttributes",
        "sqs:ListDeadLetterSourceQueues",
        "sqs:ListQueues",
        "sqs:ListQueueTags",
        "ssm:Describe*",
        "ssm:ListDocuments",
        "sso:DescribePermissionsPolicies",
        "sso:List*",
        "states:ListStateMachines",
        "storagegateway:DescribeBandwidthRateLimit",
        "storagegateway:DescribeCache",
        "storagegateway:DescribeCachediSCSIVolumes",
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:DescribeMaintenanceStartTime",
        "storagegateway:DescribeNFSFileShares",
        "storagegateway:DescribeSnapshotSchedule",
        "storagegateway:DescribeStorediSCSIVolumes",
        "storagegateway:DescribeTapeArchives",
        "storagegateway:DescribeTapeRecoveryPoints",
        "storagegateway:DescribeTapes",
        "storagegateway:DescribeUploadBuffer",
        "storagegateway:DescribeVTLDevices",
        "storagegateway:DescribeWorkingStorage",
        "storagegateway:List*",
        "tag:GetResources",
        "tag:GetTagKeys",
        "transfer:Describe*",
        "transfer:List*",
        "translate:List*",
        "trustedadvisor:Describe*",
        "waf:ListWebACLs",
        "waf-regional:ListWebACLs",
        "workspaces:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "apigateway:GET"
      ],
      "Resource": [
        "arn:aws:apigateway:*::/restapis",
        "arn:aws:apigateway:*::/restapis/*/authorizers",
        "arn:aws:apigateway:*::/restapis/*/authorizers/*",
        "arn:aws:apigateway:*::/restapis/*/resources",
        "arn:aws:apigateway:*::/restapis/*/resources/*",
        "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
        "arn:aws:apigateway:*::/vpclinks"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:Describe*",
      "acm:List*",
      "application-autoscaling:Describe*",
      "appmesh:Describe*",
      "appmesh:List*",
      "appsync:List*",
      "athena:List*",
      "autoscaling:Describe*",
      "batch:DescribeComputeEnvironments",
      "batch:DescribeJobDefinitions",
      "chime:List*",
      "cloud9:Describe*",
      "cloud9:ListEnvironments",
      "clouddirectory:ListDirectories",
      "cloudformation:DescribeStack*",
      "cloudformation:GetTemplate",
      "cloudformation:ListStack*",
      "cloudformation:GetStackPolicy",
      "cloudfront:Get*",
      "cloudfront:List*",
      "cloudhsm:ListHapgs",
      "cloudhsm:ListHsms",
      "cloudhsm:ListLunaClients",
      "cloudsearch:DescribeDomains",
      "cloudsearch:DescribeServiceAccessPolicies",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTags",
      "cloudtrail:LookupEvents",
      "cloudwatch:Describe*",
      "codebuild:ListProjects",
      "codecommit:BatchGetRepositories",
      "codecommit:GetBranch",
      "codecommit:GetObjectIdentifier",
      "codecommit:GetRepository",
      "codecommit:List*",
      "codedeploy:Batch*",
      "codedeploy:Get*",
      "codedeploy:List*",
      "codepipeline:ListPipelines",
      "codestar:Describe*",
      "codestar:List*",
      "cognito-identity:ListIdentityPools",
      "cognito-idp:ListUserPools",
      "cognito-sync:Describe*",
      "cognito-sync:List*",
      "comprehend:Describe*",
      "comprehend:List*",
      "config:BatchGetAggregateResourceConfig",
      "config:BatchGetResourceConfig",
      "config:Deliver*",
      "config:Describe*",
      "config:Get*",
      "config:List*",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:EvaluateExpression",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:QueryObjects",
      "datapipeline:ValidatePipelineDefinition",
      "datasync:Describe*",
      "datasync:List*",
      "dax:Describe*",
      "dax:ListTags",
      "directconnect:Describe*",
      "dms:Describe*",
      "dms:ListTagsForResource",
      "ds:DescribeDirectories",
      "dynamodb:DescribeContinuousBackups",
      "dynamodb:DescribeGlobalTable",
      "dynamodb:DescribeTable",
      "dynamodb:DescribeTimeToLive",
      "dynamodb:ListBackups",
      "dynamodb:ListGlobalTables",
      "dynamodb:ListStreams",
      "dynamodb:ListTables",
      "ec2:Describe*",
      "ecr:DescribeRepositories",
      "ecr:GetRepositoryPolicy",
      "ecs:Describe*",
      "ecs:List*",
      "eks:DescribeCluster",
      "eks:ListClusters",
      "elasticache:Describe*",
      "elasticbeanstalk:Describe*",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeMountTargetSecurityGroups",
      "elasticfilesystem:DescribeMountTargets",
      "elasticloadbalancing:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:ListClusters",
      "elasticmapreduce:ListInstances",
      "es:Describe*",
      "es:ListDomainNames",
      "events:Describe*",
      "events:List*",
      "firehose:Describe*",
      "firehose:List*",
      "fms:ListComplianceStatus",
      "fms:ListPolicies",
      "fsx:Describe*",
      "fsx:List*",
      "gamelift:ListBuilds",
      "gamelift:ListFleets",
      "glacier:DescribeVault",
      "glacier:GetVaultAccessPolicy",
      "glacier:ListVaults",
      "globalaccelerator:Describe*",
      "globalaccelerator:List*",
      "greengrass:List*",
      "guardduty:Get*",
      "guardduty:List*",
      "iam:GenerateCredentialReport",
      "iam:GenerateServiceLastAccessedDetails",
      "iam:Get*",
      "iam:List*",
      "iam:SimulateCustomPolicy",
      "iam:SimulatePrincipalPolicy",
      "inspector:Describe*",
      "inspector:Get*",
      "inspector:List*",
      "inspector:Preview*",
      "iot:Describe*",
      "iot:GetPolicy",
      "iot:GetPolicyVersion",
      "iot:List*",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "kinesis:ListTagsForStream",
      "kinesisanalytics:ListApplications",
      "kms:Describe*",
      "kms:Get*",
      "kms:List*",
      "lambda:GetAccountSettings",
      "lambda:GetFunctionConfiguration",
      "lambda:GetLayerVersionPolicy",
      "lambda:GetPolicy",
      "lambda:List*",
      "license-manager:List*",
      "lightsail:GetInstances",
      "lightsail:GetLoadBalancers",
      "logs:Describe*",
      "logs:ListTagsLogGroup",
      "machinelearning:DescribeMLModels",
      "mediaconnect:Describe*",
      "mediaconnect:List*",
      "mediastore:GetContainerPolicy",
      "mediastore:ListContainers",
      "opsworks:DescribeStacks",
      "opsworks-cm:DescribeServers",
      "organizations:List*",
      "organizations:Describe*",
      "quicksight:Describe*",
      "quicksight:List*",
      "ram:List*",
      "rds:Describe*",
      "rds:DownloadDBLogFilePortion",
      "rds:ListTagsForResource",
      "redshift:Describe*",
      "rekognition:Describe*",
      "rekognition:List*",
      "robomaker:Describe*",
      "robomaker:List*",
      "route53:Get*",
      "route53:List*",
      "route53domains:GetDomainDetail",
      "route53domains:GetOperationDetail",
      "route53domains:ListDomains",
      "route53domains:ListOperations",
      "route53domains:ListTagsForDomain",
      "route53resolver:List*",
      "route53resolver:Get*",
      "s3:GetAccelerateConfiguration",
      "s3:GetAccountPublicAccessBlock",
      "s3:GetAnalyticsConfiguration",
      "s3:GetBucket*",
      "s3:GetEncryptionConfiguration",
      "s3:GetInventoryConfiguration",
      "s3:GetLifecycleConfiguration",
      "s3:GetMetricsConfiguration",
      "s3:GetObjectAcl",
      "s3:GetObjectVersionAcl",
      "s3:GetReplicationConfiguration",
      "s3:ListAllMyBuckets",
      "sagemaker:Describe*",
      "sagemaker:List*",
      "sdb:DomainMetadata",
      "sdb:ListDomains",
      "secretsmanager:GetResourcePolicy",
      "secretsmanager:ListSecrets",
      "secretsmanager:ListSecretVersionIds",
      "securityhub:Describe*",
      "securityhub:Get*",
      "securityhub:List*",
      "serverlessrepo:GetApplicationPolicy",
      "serverlessrepo:List*",
      "ses:GetIdentityDkimAttributes",
      "ses:GetIdentityVerificationAttributes",
      "ses:ListIdentities",
      "ses:ListVerifiedEmailAddresses",
      "shield:Describe*",
      "shield:List*",
      "snowball:ListClusters",
      "snowball:ListJobs",
      "sns:GetTopicAttributes",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sqs:GetQueueAttributes",
      "sqs:ListDeadLetterSourceQueues",
      "sqs:ListQueues",
      "sqs:ListQueueTags",
      "ssm:Describe*",
      "ssm:ListDocuments",
      "sso:DescribePermissionsPolicies",
      "sso:List*",
      "states:ListStateMachines",
      "storagegateway:DescribeBandwidthRateLimit",
      "storagegateway:DescribeCache",
      "storagegateway:DescribeCachediSCSIVolumes",
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:DescribeMaintenanceStartTime",
      "storagegateway:DescribeNFSFileShares",
      "storagegateway:DescribeSnapshotSchedule",
      "storagegateway:DescribeStorediSCSIVolumes",
      "storagegateway:DescribeTapeArchives",
      "storagegateway:DescribeTapeRecoveryPoints",
      "storagegateway:DescribeTapes",
      "storagegateway:DescribeUploadBuffer",
      "storagegateway:DescribeVTLDevices",
      "storagegateway:DescribeWorkingStorage",
      "storagegateway:List*",
      "tag:GetResources",
      "tag:GetTagKeys",
      "transfer:Describe*",
      "transfer:List*",
      "translate:List*",
      "trustedadvisor:Describe*",
      "waf:ListWebACLs",
      "waf-regional:ListWebACLs",
      "workspaces:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "apigateway:GET"
    ],
    "Resource": [
      "arn:aws:apigateway:*::/restapis",
      "arn:aws:apigateway:*::/restapis/*/authorizers",
      "arn:aws:apigateway:*::/restapis/*/authorizers/*",
      "arn:aws:apigateway:*::/restapis/*/resources",
      "arn:aws:apigateway:*::/restapis/*/resources/*",
      "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
      "arn:aws:apigateway:*::/vpclinks"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:GetTableVersions"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:AbortMultipartUpload",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-application-discovery-service-*",
        "arn:aws:s3:::aws-application-discovery-service-*/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:PutLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose:log-stream:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "glue:GetTableVersions"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:AbortMultipartUpload",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-application-discovery-service-*",
      "arn:aws:s3:::aws-application-discovery-service-*/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:PutLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose:log-stream:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ses:SendEmail",
        "ses:SendRawEmail"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ses:List*"
      ],
      "Resource": "*",
      "Effect": "Deny"
    }
  ]
}
[
  {
    "Action": [
      "ses:SendEmail",
      "ses:SendRawEmail"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ses:List*"
    ],
    "Resource": "*",
    "Effect": "Deny"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mediaconvert:*",
        "s3:ListAllMyBuckets",
        "s3:ListBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "mediaconvert.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "mediaconvert:*",
      "s3:ListAllMyBuckets",
      "s3:ListBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "mediaconvert.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "robomaker:ListDeploymentJobs",
        "robomaker:BatchDescribeSimulationJob",
        "robomaker:DescribeFleet",
        "robomaker:DescribeSimulationApplication",
        "robomaker:DescribeRobotApplication",
        "robomaker:ListFleets",
        "robomaker:ListSimulationJobs",
        "robomaker:DescribeDeploymentJob",
        "robomaker:DescribeSimulationJob",
        "robomaker:DescribeRobot",
        "robomaker:ListRobots",
        "robomaker:ListRobotApplications",
        "robomaker:ListSimulationApplications"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "VisualEditor0"
    }
  ]
}
[
  {
    "Action": [
      "robomaker:ListDeploymentJobs",
      "robomaker:BatchDescribeSimulationJob",
      "robomaker:DescribeFleet",
      "robomaker:DescribeSimulationApplication",
      "robomaker:DescribeRobotApplication",
      "robomaker:ListFleets",
      "robomaker:ListSimulationJobs",
      "robomaker:DescribeDeploymentJob",
      "robomaker:DescribeSimulationJob",
      "robomaker:DescribeRobot",
      "robomaker:ListRobots",
      "robomaker:ListRobotApplications",
      "robomaker:ListSimulationApplications"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "VisualEditor0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "resource-groups:Get*",
        "resource-groups:List*",
        "resource-groups:Search*",
        "tag:Get*",
        "cloudformation:DescribeStacks",
        "cloudformation:ListStackResources",
        "ec2:DescribeInstances",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSnapshots",
        "ec2:DescribeVolumes",
        "ec2:DescribeVpcs",
        "elasticache:DescribeCacheClusters",
        "elasticache:DescribeSnapshots",
        "elasticache:ListTagsForResource",
        "elasticbeanstalk:DescribeEnvironments",
        "elasticmapreduce:DescribeCluster",
        "elasticmapreduce:ListClusters",
        "glacier:ListVaults",
        "glacier:DescribeVault",
        "glacier:ListTagsForVault",
        "kinesis:ListStreams",
        "kinesis:DescribeStream",
        "kinesis:ListTagsForStream",
        "opsworks:DescribeStacks",
        "opsworks:ListTags",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSnapshots",
        "rds:ListTagsForResource",
        "redshift:DescribeClusters",
        "redshift:DescribeTags",
        "route53domains:ListDomains",
        "route53:ListHealthChecks",
        "route53:GetHealthCheck",
        "route53:ListHostedZones",
        "route53:GetHostedZone",
        "route53:ListTagsForResource",
        "storagegateway:ListGateways",
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:ListTagsForResource",
        "s3:ListAllMyBuckets",
        "s3:GetBucketTagging",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTags",
        "ssm:ListDocuments"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "resource-groups:Get*",
      "resource-groups:List*",
      "resource-groups:Search*",
      "tag:Get*",
      "cloudformation:DescribeStacks",
      "cloudformation:ListStackResources",
      "ec2:DescribeInstances",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshots",
      "ec2:DescribeVolumes",
      "ec2:DescribeVpcs",
      "elasticache:DescribeCacheClusters",
      "elasticache:DescribeSnapshots",
      "elasticache:ListTagsForResource",
      "elasticbeanstalk:DescribeEnvironments",
      "elasticmapreduce:DescribeCluster",
      "elasticmapreduce:ListClusters",
      "glacier:ListVaults",
      "glacier:DescribeVault",
      "glacier:ListTagsForVault",
      "kinesis:ListStreams",
      "kinesis:DescribeStream",
      "kinesis:ListTagsForStream",
      "opsworks:DescribeStacks",
      "opsworks:ListTags",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSnapshots",
      "rds:ListTagsForResource",
      "redshift:DescribeClusters",
      "redshift:DescribeTags",
      "route53domains:ListDomains",
      "route53:ListHealthChecks",
      "route53:GetHealthCheck",
      "route53:ListHostedZones",
      "route53:GetHostedZone",
      "route53:ListTagsForResource",
      "storagegateway:ListGateways",
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:ListTagsForResource",
      "s3:ListAllMyBuckets",
      "s3:GetBucketTagging",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTags",
      "ssm:ListDocuments"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codestar:*",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "cloud9:DescribeEnvironment*",
        "cloud9:ValidateEnvironmentName"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CodeStarEC2"
    },
    {
      "Action": [
        "cloudformation:DescribeStack*",
        "cloudformation:GetTemplateSummary"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/awscodestar-*"
      ],
      "Effect": "Allow",
      "Sid": "CodeStarCF"
    }
  ]
}
[
  {
    "Action": [
      "codestar:*",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "cloud9:DescribeEnvironment*",
      "cloud9:ValidateEnvironmentName"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CodeStarEC2"
  },
  {
    "Action": [
      "cloudformation:DescribeStack*",
      "cloudformation:GetTemplateSummary"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/awscodestar-*"
    ],
    "Effect": "Allow",
    "Sid": "CodeStarCF"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:CancelCommand",
        "ssm:GetCommandInvocation",
        "ssm:ListCommandInvocations",
        "ssm:ListCommands",
        "ssm:SendCommand",
        "ssm:GetAutomationExecution",
        "ssm:GetParameters",
        "ssm:StartAutomationExecution"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:SSM*",
        "arn:aws:lambda:*:*:function:*:SSM*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "states:DescribeExecution",
        "states:StartExecution"
      ],
      "Resource": [
        "arn:aws:states:*:*:stateMachine:SSM*",
        "arn:aws:states:*:*:execution:SSM*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "resource-groups:ListGroups",
        "resource-groups:ListGroupResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ssm.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ssm:CancelCommand",
      "ssm:GetCommandInvocation",
      "ssm:ListCommandInvocations",
      "ssm:ListCommands",
      "ssm:SendCommand",
      "ssm:GetAutomationExecution",
      "ssm:GetParameters",
      "ssm:StartAutomationExecution"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:SSM*",
      "arn:aws:lambda:*:*:function:*:SSM*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "states:DescribeExecution",
      "states:StartExecution"
    ],
    "Resource": [
      "arn:aws:states:*:*:stateMachine:SSM*",
      "arn:aws:states:*:*:execution:SSM*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "resource-groups:ListGroups",
      "resource-groups:ListGroupResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ssm.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:List*",
        "dynamodb:DescribeTable",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSecurityGroups",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSecurityGroups",
        "sns:ListTopics",
        "sns:Subscribe",
        "iam:ListRoles",
        "iam:GetRolePolicy",
        "iam:GetInstanceProfile",
        "iam:ListInstanceProfiles",
        "datapipeline:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
        "arn:aws:iam::*:role/DataPipelineDefaultRole"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:List*",
      "dynamodb:DescribeTable",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSecurityGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSecurityGroups",
      "sns:ListTopics",
      "sns:Subscribe",
      "iam:ListRoles",
      "iam:GetRolePolicy",
      "iam:GetInstanceProfile",
      "iam:ListInstanceProfiles",
      "datapipeline:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
      "arn:aws:iam::*:role/DataPipelineDefaultRole"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:CreateDBCluster",
        "rds:CreateDBInstance"
      ],
      "Resource": [
        "arn:aws:rds:*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "rds:DatabaseEngine": "graphdb"
        }
      }
    },
    {
      "Action": [
        "rds:AddRoleToDBCluster",
        "rds:AddSourceIdentifierToSubscription",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:CopyDBClusterParameterGroup",
        "rds:CopyDBClusterSnapshot",
        "rds:CopyDBParameterGroup",
        "rds:CreateDBClusterParameterGroup",
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBParameterGroup",
        "rds:CreateDBSubnetGroup",
        "rds:CreateEventSubscription",
        "rds:DeleteDBCluster",
        "rds:DeleteDBClusterParameterGroup",
        "rds:DeleteDBClusterSnapshot",
        "rds:DeleteDBInstance",
        "rds:DeleteDBParameterGroup",
        "rds:DeleteDBSubnetGroup",
        "rds:DeleteEventSubscription",
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEngineDefaultClusterParameters",
        "rds:DescribeEngineDefaultParameters",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOptionGroups",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DescribeValidDBInstanceModifications",
        "rds:DownloadDBLogFilePortion",
        "rds:FailoverDBCluster",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBClusterParameterGroup",
        "rds:ModifyDBClusterSnapshotAttribute",
        "rds:ModifyDBInstance",
        "rds:ModifyDBParameterGroup",
        "rds:ModifyDBSubnetGroup",
        "rds:ModifyEventSubscription",
        "rds:PromoteReadReplicaDBCluster",
        "rds:RebootDBInstance",
        "rds:RemoveRoleFromDBCluster",
        "rds:RemoveSourceIdentifierFromSubscription",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBClusterParameterGroup",
        "rds:ResetDBParameterGroup",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "iam:PassRole",
        "kms:ListAliases",
        "kms:ListKeyPolicies",
        "kms:ListKeys",
        "kms:ListRetirableGrants",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "rds.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:CreateDBCluster",
      "rds:CreateDBInstance"
    ],
    "Resource": [
      "arn:aws:rds:*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "rds:DatabaseEngine": "graphdb"
      }
    }
  },
  {
    "Action": [
      "rds:AddRoleToDBCluster",
      "rds:AddSourceIdentifierToSubscription",
      "rds:AddTagsToResource",
      "rds:ApplyPendingMaintenanceAction",
      "rds:CopyDBClusterParameterGroup",
      "rds:CopyDBClusterSnapshot",
      "rds:CopyDBParameterGroup",
      "rds:CreateDBClusterParameterGroup",
      "rds:CreateDBClusterSnapshot",
      "rds:CreateDBParameterGroup",
      "rds:CreateDBSubnetGroup",
      "rds:CreateEventSubscription",
      "rds:DeleteDBCluster",
      "rds:DeleteDBClusterParameterGroup",
      "rds:DeleteDBClusterSnapshot",
      "rds:DeleteDBInstance",
      "rds:DeleteDBParameterGroup",
      "rds:DeleteDBSubnetGroup",
      "rds:DeleteEventSubscription",
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEngineDefaultClusterParameters",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOptionGroups",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DescribeValidDBInstanceModifications",
      "rds:DownloadDBLogFilePortion",
      "rds:FailoverDBCluster",
      "rds:ListTagsForResource",
      "rds:ModifyDBCluster",
      "rds:ModifyDBClusterParameterGroup",
      "rds:ModifyDBClusterSnapshotAttribute",
      "rds:ModifyDBInstance",
      "rds:ModifyDBParameterGroup",
      "rds:ModifyDBSubnetGroup",
      "rds:ModifyEventSubscription",
      "rds:PromoteReadReplicaDBCluster",
      "rds:RebootDBInstance",
      "rds:RemoveRoleFromDBCluster",
      "rds:RemoveSourceIdentifierFromSubscription",
      "rds:RemoveTagsFromResource",
      "rds:ResetDBClusterParameterGroup",
      "rds:ResetDBParameterGroup",
      "rds:RestoreDBClusterFromSnapshot",
      "rds:RestoreDBClusterToPointInTime"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "iam:PassRole",
      "kms:ListAliases",
      "kms:ListKeyPolicies",
      "kms:ListKeys",
      "kms:ListRetirableGrants",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "rds.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:DescribeAssociation",
        "ssm:GetDeployablePatchSnapshotForInstance",
        "ssm:GetDocument",
        "ssm:DescribeDocument",
        "ssm:GetManifest",
        "ssm:GetParameter",
        "ssm:GetParameters",
        "ssm:ListAssociations",
        "ssm:ListInstanceAssociations",
        "ssm:PutInventory",
        "ssm:PutComplianceItems",
        "ssm:PutConfigurePackageResult",
        "ssm:UpdateAssociationStatus",
        "ssm:UpdateInstanceAssociationStatus",
        "ssm:UpdateInstanceInformation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssmmessages:CreateControlChannel",
        "ssmmessages:CreateDataChannel",
        "ssmmessages:OpenControlChannel",
        "ssmmessages:OpenDataChannel"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2messages:AcknowledgeMessage",
        "ec2messages:DeleteMessage",
        "ec2messages:FailMessage",
        "ec2messages:GetEndpoint",
        "ec2messages:GetMessages",
        "ec2messages:SendReply"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ssm:DescribeAssociation",
      "ssm:GetDeployablePatchSnapshotForInstance",
      "ssm:GetDocument",
      "ssm:DescribeDocument",
      "ssm:GetManifest",
      "ssm:GetParameter",
      "ssm:GetParameters",
      "ssm:ListAssociations",
      "ssm:ListInstanceAssociations",
      "ssm:PutInventory",
      "ssm:PutComplianceItems",
      "ssm:PutConfigurePackageResult",
      "ssm:UpdateAssociationStatus",
      "ssm:UpdateInstanceAssociationStatus",
      "ssm:UpdateInstanceInformation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssmmessages:CreateControlChannel",
      "ssmmessages:CreateDataChannel",
      "ssmmessages:OpenControlChannel",
      "ssmmessages:OpenDataChannel"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2messages:AcknowledgeMessage",
      "ec2messages:DeleteMessage",
      "ec2messages:FailMessage",
      "ec2messages:GetEndpoint",
      "ec2messages:GetMessages",
      "ec2messages:SendReply"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:GetMetricData",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeScheduledActions",
        "autoscaling:BatchPutScheduledUpdateGroupAction",
        "autoscaling:BatchDeleteScheduledAction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:GetMetricData",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:BatchPutScheduledUpdateGroupAction",
      "autoscaling:BatchDeleteScheduledAction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:ListPipelines",
        "datapipeline:QueryObjects",
        "dynamodb:BatchGetItem",
        "dynamodb:Describe*",
        "dynamodb:List*",
        "dynamodb:GetItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dax:Describe*",
        "dax:List*",
        "dax:GetItem",
        "dax:BatchGetItem",
        "dax:Query",
        "dax:Scan",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "iam:GetRole",
        "iam:ListRoles",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "lambda:ListFunctions",
        "lambda:ListEventSourceMappings",
        "lambda:GetFunctionConfiguration",
        "resource-groups:ListGroups",
        "resource-groups:ListGroupResources",
        "resource-groups:GetGroup",
        "resource-groups:GetGroupQuery",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:QueryObjects",
      "dynamodb:BatchGetItem",
      "dynamodb:Describe*",
      "dynamodb:List*",
      "dynamodb:GetItem",
      "dynamodb:Query",
      "dynamodb:Scan",
      "dax:Describe*",
      "dax:List*",
      "dax:GetItem",
      "dax:BatchGetItem",
      "dax:Query",
      "dax:Scan",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "iam:GetRole",
      "iam:ListRoles",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "lambda:ListFunctions",
      "lambda:ListEventSourceMappings",
      "lambda:GetFunctionConfiguration",
      "resource-groups:ListGroups",
      "resource-groups:ListGroupResources",
      "resource-groups:GetGroup",
      "resource-groups:GetGroupQuery",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateKeyPair",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeImages",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:DescribePlacementGroups",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcClassicLink",
        "ec2:ImportKeyPair"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "autoscaling:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:ListSubscriptions",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:ListRoles",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "autoscaling.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateKeyPair",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeImages",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeLaunchTemplateVersions",
      "ec2:DescribePlacementGroups",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcClassicLink",
      "ec2:ImportKeyPair"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:ListMetrics",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "autoscaling:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:ListSubscriptions",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:ListRoles",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "autoscaling.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": "mediapackage:*",
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": "mediapackage:*",
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "kinesisvideo:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "kinesisvideo:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:GetTopicAttributes",
        "sns:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:GetTopicAttributes",
      "sns:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:RunInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:RunInstances"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Deny",
      "Condition": {
        "StringNotEquals": {
          "ec2:InstanceMarketType": "spot"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ec2.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ec2:CreateAction": "RunInstances"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:RunInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:RunInstances"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Deny",
    "Condition": {
      "StringNotEquals": {
        "ec2:InstanceMarketType": "spot"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ec2.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ec2:CreateAction": "RunInstances"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:*",
        "cloudformation:CreateStack",
        "cloudformation:DescribeStackEvents",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateRoute",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:DeleteRoute",
        "ec2:DeleteTags",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeSpotPriceHistory",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:DescribeRouteTables",
        "ec2:DescribeNetworkAcls",
        "ec2:CreateVpcEndpoint",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:RequestSpotInstances",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RunInstances",
        "ec2:TerminateInstances",
        "elasticmapreduce:*",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:ListRoles",
        "iam:PassRole",
        "kms:List*",
        "s3:*",
        "sdb:*",
        "support:CreateCase",
        "support:DescribeServices",
        "support:DescribeSeverityLevels"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "elasticmapreduce.amazonaws.com",
            "elasticmapreduce.amazonaws.com.cn"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:*",
      "cloudformation:CreateStack",
      "cloudformation:DescribeStackEvents",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:CancelSpotInstanceRequests",
      "ec2:CreateRoute",
      "ec2:CreateSecurityGroup",
      "ec2:CreateTags",
      "ec2:DeleteRoute",
      "ec2:DeleteTags",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSpotPriceHistory",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:DescribeRouteTables",
      "ec2:DescribeNetworkAcls",
      "ec2:CreateVpcEndpoint",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:RequestSpotInstances",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RunInstances",
      "ec2:TerminateInstances",
      "elasticmapreduce:*",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:ListRoles",
      "iam:PassRole",
      "kms:List*",
      "s3:*",
      "sdb:*",
      "support:CreateCase",
      "support:DescribeServices",
      "support:DescribeSeverityLevels"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "elasticmapreduce.amazonaws.com",
          "elasticmapreduce.amazonaws.com.cn"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:GetHostedZone",
        "route53:ListHostedZonesByName",
        "route53:CreateHostedZone",
        "route53:DeleteHostedZone",
        "route53:ChangeResourceRecordSets",
        "route53:CreateHealthCheck",
        "route53:GetHealthCheck",
        "route53:DeleteHealthCheck",
        "route53:UpdateHealthCheck",
        "ec2:DescribeVpcs",
        "ec2:DescribeRegions",
        "servicediscovery:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:GetHostedZone",
      "route53:ListHostedZonesByName",
      "route53:CreateHostedZone",
      "route53:DeleteHostedZone",
      "route53:ChangeResourceRecordSets",
      "route53:CreateHealthCheck",
      "route53:GetHealthCheck",
      "route53:DeleteHealthCheck",
      "route53:UpdateHealthCheck",
      "ec2:DescribeVpcs",
      "ec2:DescribeRegions",
      "servicediscovery:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateSnapshot",
        "ec2:CreateSnapshots",
        "ec2:DeleteSnapshot",
        "ec2:DescribeInstances",
        "ec2:DescribeVolumes",
        "ec2:DescribeSnapshots"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": "arn:aws:ec2:*::snapshot/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateSnapshot",
      "ec2:CreateSnapshots",
      "ec2:DeleteSnapshot",
      "ec2:DescribeInstances",
      "ec2:DescribeVolumes",
      "ec2:DescribeSnapshots"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": "arn:aws:ec2:*::snapshot/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticbeanstalk:*",
        "ec2:*",
        "ecs:*",
        "ecr:*",
        "elasticloadbalancing:*",
        "autoscaling:*",
        "cloudwatch:*",
        "s3:*",
        "sns:*",
        "cloudformation:*",
        "dynamodb:*",
        "rds:*",
        "sqs:*",
        "logs:*",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:PassRole",
        "iam:ListRolePolicies",
        "iam:ListAttachedRolePolicies",
        "iam:ListInstanceProfiles",
        "iam:ListRoles",
        "iam:ListServerCertificates",
        "acm:DescribeCertificate",
        "acm:ListCertificates",
        "codebuild:CreateProject",
        "codebuild:DeleteProject",
        "codebuild:BatchGetBuilds",
        "codebuild:StartBuild"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:AddRoleToInstanceProfile",
        "iam:CreateInstanceProfile",
        "iam:CreateRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-elasticbeanstalk*",
        "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "autoscaling.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:AttachRolePolicy"
      ],
      "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PolicyArn": [
            "arn:aws:iam::aws:policy/AWSElasticBeanstalk*",
            "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "elasticbeanstalk:*",
      "ec2:*",
      "ecs:*",
      "ecr:*",
      "elasticloadbalancing:*",
      "autoscaling:*",
      "cloudwatch:*",
      "s3:*",
      "sns:*",
      "cloudformation:*",
      "dynamodb:*",
      "rds:*",
      "sqs:*",
      "logs:*",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:PassRole",
      "iam:ListRolePolicies",
      "iam:ListAttachedRolePolicies",
      "iam:ListInstanceProfiles",
      "iam:ListRoles",
      "iam:ListServerCertificates",
      "acm:DescribeCertificate",
      "acm:ListCertificates",
      "codebuild:CreateProject",
      "codebuild:DeleteProject",
      "codebuild:BatchGetBuilds",
      "codebuild:StartBuild"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:AddRoleToInstanceProfile",
      "iam:CreateInstanceProfile",
      "iam:CreateRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-elasticbeanstalk*",
      "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "autoscaling.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:AttachRolePolicy"
    ],
    "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PolicyArn": [
          "arn:aws:iam::aws:policy/AWSElasticBeanstalk*",
          "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "workspaces:CreateWorkspaces",
        "workspaces:DescribeWorkspaces",
        "workspaces:RebootWorkspaces",
        "workspaces:RebuildWorkspaces",
        "workspaces:TerminateWorkspaces",
        "workspaces:DescribeWorkspaceDirectories",
        "workspaces:DescribeWorkspaceBundles",
        "workspaces:ModifyWorkspaceProperties",
        "workspaces:StopWorkspaces",
        "workspaces:StartWorkspaces",
        "workspaces:DescribeWorkspacesConnectionStatus",
        "workspaces:CreateTags",
        "workspaces:DeleteTags",
        "workspaces:DescribeTags",
        "kms:ListKeys",
        "kms:ListAliases",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "workspaces:CreateWorkspaces",
      "workspaces:DescribeWorkspaces",
      "workspaces:RebootWorkspaces",
      "workspaces:RebuildWorkspaces",
      "workspaces:TerminateWorkspaces",
      "workspaces:DescribeWorkspaceDirectories",
      "workspaces:DescribeWorkspaceBundles",
      "workspaces:ModifyWorkspaceProperties",
      "workspaces:StopWorkspaces",
      "workspaces:StartWorkspaces",
      "workspaces:DescribeWorkspacesConnectionStatus",
      "workspaces:CreateTags",
      "workspaces:DeleteTags",
      "workspaces:DescribeTags",
      "kms:ListKeys",
      "kms:ListAliases",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:CompleteLifecycleAction",
        "autoscaling:DeleteLifecycleHook",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeLifecycleHooks",
        "autoscaling:PutLifecycleHook",
        "autoscaling:RecordLifecycleActionHeartbeat",
        "autoscaling:CreateAutoScalingGroup",
        "autoscaling:UpdateAutoScalingGroup",
        "autoscaling:EnableMetricsCollection",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribePolicies",
        "autoscaling:DescribeScheduledActions",
        "autoscaling:DescribeNotificationConfigurations",
        "autoscaling:DescribeLifecycleHooks",
        "autoscaling:SuspendProcesses",
        "autoscaling:ResumeProcesses",
        "autoscaling:AttachLoadBalancers",
        "autoscaling:PutScalingPolicy",
        "autoscaling:PutScheduledUpdateGroupAction",
        "autoscaling:PutNotificationConfiguration",
        "autoscaling:PutLifecycleHook",
        "autoscaling:DescribeScalingActivities",
        "autoscaling:DeleteAutoScalingGroup",
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:TerminateInstances",
        "tag:GetTags",
        "tag:GetResources",
        "sns:Publish",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:PutMetricAlarm",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:RegisterTargets",
        "elasticloadbalancing:DeregisterTargets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:CompleteLifecycleAction",
      "autoscaling:DeleteLifecycleHook",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeLifecycleHooks",
      "autoscaling:PutLifecycleHook",
      "autoscaling:RecordLifecycleActionHeartbeat",
      "autoscaling:CreateAutoScalingGroup",
      "autoscaling:UpdateAutoScalingGroup",
      "autoscaling:EnableMetricsCollection",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribePolicies",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:DescribeNotificationConfigurations",
      "autoscaling:DescribeLifecycleHooks",
      "autoscaling:SuspendProcesses",
      "autoscaling:ResumeProcesses",
      "autoscaling:AttachLoadBalancers",
      "autoscaling:PutScalingPolicy",
      "autoscaling:PutScheduledUpdateGroupAction",
      "autoscaling:PutNotificationConfiguration",
      "autoscaling:PutLifecycleHook",
      "autoscaling:DescribeScalingActivities",
      "autoscaling:DeleteAutoScalingGroup",
      "ec2:DescribeInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:TerminateInstances",
      "tag:GetTags",
      "tag:GetResources",
      "sns:Publish",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:PutMetricAlarm",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticloadbalancing:RegisterTargets",
      "elasticloadbalancing:DeregisterTargets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ses:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ses:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:Describe*",
        "logs:Get*",
        "logs:List*",
        "logs:StartQuery",
        "logs:StopQuery",
        "logs:TestMetricFilter",
        "logs:FilterLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:Describe*",
      "logs:Get*",
      "logs:List*",
      "logs:StartQuery",
      "logs:StopQuery",
      "logs:TestMetricFilter",
      "logs:FilterLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifyVpcEndpoint",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:CreateVpcEndpoint",
        "ec2:DescribeVpcEndpoints",
        "ec2:DeleteVpcEndpoints"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifyVpcEndpoint",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:CreateVpcEndpoint",
      "ec2:DescribeVpcEndpoints",
      "ec2:DeleteVpcEndpoints"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:Describe*",
        "firehose:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "firehose:Describe*",
      "firehose:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "globalaccelerator:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:DescribeLoadBalancers",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "ec2:DescribeAddresses",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "globalaccelerator:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:DescribeLoadBalancers",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "ec2:DescribeAddresses",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "cloudwatch:PutMetricAlarm",
        "dynamodb:*",
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sns:SetTopicAttributes"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "DDBConsole"
    },
    {
      "Action": [
        "lambda:*",
        "iam:ListRoles"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "DDBConsoleTriggers"
    },
    {
      "Action": [
        "datapipeline:*",
        "iam:ListRoles"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "DDBConsoleImportExport"
    },
    {
      "Action": [
        "iam:GetRolePolicy",
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "IAMEDPRoles"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DescribeInstances",
        "ec2:RunInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "elasticmapreduce:*",
        "datapipeline:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "EMR"
    },
    {
      "Action": [
        "s3:DeleteObject",
        "s3:Get*",
        "s3:List*",
        "s3:Put*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "S3"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "cloudwatch:PutMetricAlarm",
      "dynamodb:*",
      "sns:CreateTopic",
      "sns:DeleteTopic",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sns:Subscribe",
      "sns:Unsubscribe",
      "sns:SetTopicAttributes"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "DDBConsole"
  },
  {
    "Action": [
      "lambda:*",
      "iam:ListRoles"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "DDBConsoleTriggers"
  },
  {
    "Action": [
      "datapipeline:*",
      "iam:ListRoles"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "DDBConsoleImportExport"
  },
  {
    "Action": [
      "iam:GetRolePolicy",
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "IAMEDPRoles"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DescribeInstances",
      "ec2:RunInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "elasticmapreduce:*",
      "datapipeline:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "EMR"
  },
  {
    "Action": [
      "s3:DeleteObject",
      "s3:Get*",
      "s3:List*",
      "s3:Put*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "S3"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotanalytics:Describe*",
        "iotanalytics:List*",
        "iotanalytics:Get*",
        "iotanalytics:SampleChannelData"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotanalytics:Describe*",
      "iotanalytics:List*",
      "iotanalytics:Get*",
      "iotanalytics:SampleChannelData"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:*",
        "datapipeline:*",
        "dynamodb:*",
        "ec2:Describe*",
        "elasticmapreduce:AddJobFlowSteps",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:ListInstance*",
        "elasticmapreduce:ModifyInstanceGroups",
        "rds:Describe*",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSecurityGroups",
        "s3:*",
        "sdb:*",
        "sns:*",
        "sqs:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:*",
      "datapipeline:*",
      "dynamodb:*",
      "ec2:Describe*",
      "elasticmapreduce:AddJobFlowSteps",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:ListInstance*",
      "elasticmapreduce:ModifyInstanceGroups",
      "rds:Describe*",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSecurityGroups",
      "s3:*",
      "sdb:*",
      "sns:*",
      "sqs:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "securityhub:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "securityhub.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "securityhub:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "securityhub.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "mediapackage:List*",
      "mediapackage:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": [
    "mediapackage:List*",
    "mediapackage:Describe*"
  ],
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:Poll",
        "ecs:StartTask",
        "ecs:StopTask",
        "ecs:DiscoverPollEndpoint",
        "ecs:StartTelemetrySession",
        "ecs:RegisterContainerInstance",
        "ecs:DeregisterContainerInstance",
        "ecs:DescribeContainerInstances",
        "ecs:Submit*",
        "ecs:DescribeTasks"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ECSAccess"
    }
  ]
}
[
  {
    "Action": [
      "ecs:Poll",
      "ecs:StartTask",
      "ecs:StopTask",
      "ecs:DiscoverPollEndpoint",
      "ecs:StartTelemetrySession",
      "ecs:RegisterContainerInstance",
      "ecs:DeregisterContainerInstance",
      "ecs:DescribeContainerInstances",
      "ecs:Submit*",
      "ecs:DescribeTasks"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ECSAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "personalize:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::*Personalize*",
        "arn:aws:s3:::*personalize*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "personalize.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "personalize:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::*Personalize*",
      "arn:aws:s3:::*personalize*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "personalize.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mgh:*",
        "discovery:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "migrationhub.amazonaws.com",
            "dmsintegration.migrationhub.amazonaws.com",
            "smsintegration.migrationhub.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "mgh:*",
      "discovery:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "migrationhub.amazonaws.com",
          "dmsintegration.migrationhub.amazonaws.com",
          "smsintegration.migrationhub.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "fsx:Describe*",
        "fsx:ListTagsForResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "fsx:Describe*",
      "fsx:ListTagsForResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:ChangePassword"
      ],
      "Resource": [
        "arn:aws:iam::*:user/${aws:username}"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetAccountPasswordPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:ChangePassword"
    ],
    "Resource": [
      "arn:aws:iam::*:user/${aws:username}"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetAccountPasswordPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/lightsail.amazonaws.com/AWSServiceRoleForLightsail*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CopySnapshot",
        "ec2:DescribeSnapshots",
        "ec2:CopyImage",
        "ec2:DescribeImages"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/lightsail.amazonaws.com/AWSServiceRoleForLightsail*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CopySnapshot",
      "ec2:DescribeSnapshots",
      "ec2:CopyImage",
      "ec2:DescribeImages"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "apigateway:*"
      ],
      "Resource": "arn:aws:apigateway:*::/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "apigateway:*"
    ],
    "Resource": "arn:aws:apigateway:*::/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeRouteTables",
        "ec2:CreateRoute",
        "ec2:DeleteRoute",
        "ec2:ReplaceRoute"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeRouteTables",
      "ec2:CreateRoute",
      "ec2:DeleteRoute",
      "ec2:ReplaceRoute"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeNetworkInterfaces",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AssignPrivateIpAddresses",
      "ec2:UnassignPrivateIpAddresses"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "catalog-user:*",
        "s3:GetObject",
        "servicecatalog:DescribeProduct",
        "servicecatalog:DescribeProductView",
        "servicecatalog:DescribeProvisioningParameters",
        "servicecatalog:ListLaunchPaths",
        "servicecatalog:SearchProducts"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "servicecatalog:ListRecordHistory",
        "servicecatalog:DescribeProvisionedProduct",
        "servicecatalog:DescribeRecord",
        "servicecatalog:ScanProvisionedProducts"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "servicecatalog:userLevel": "self"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "catalog-user:*",
      "s3:GetObject",
      "servicecatalog:DescribeProduct",
      "servicecatalog:DescribeProductView",
      "servicecatalog:DescribeProvisioningParameters",
      "servicecatalog:ListLaunchPaths",
      "servicecatalog:SearchProducts"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "servicecatalog:ListRecordHistory",
      "servicecatalog:DescribeProvisionedProduct",
      "servicecatalog:DescribeRecord",
      "servicecatalog:ScanProvisionedProducts"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "servicecatalog:userLevel": "self"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudtrail:LookupEvents",
        "iam:ListAccountAliases",
        "s3:GetBucket*",
        "s3:ListBucket",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudtrail:CreateTrail",
        "cloudtrail:StartLogging",
        "cloudtrail:StopLogging",
        "cloudtrail:UpdateTrail",
        "cloudtrail:DeleteTrail",
        "cloudtrail:PutEventSelectors"
      ],
      "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteBucketPolicy",
        "s3:DeleteBucketWebsite",
        "s3:DeleteObject",
        "s3:DeleteObjectTagging",
        "s3:DeleteObjectVersion",
        "s3:DeleteObjectVersionTagging",
        "s3:DeleteReplicationConfiguration",
        "s3:PutBucketPolicy"
      ],
      "Resource": [
        "arn:aws:s3:::awsmacie-*",
        "arn:aws:s3:::awsmacietrail-*",
        "arn:aws:s3:::*-awsmacietrail-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTags",
      "cloudtrail:LookupEvents",
      "iam:ListAccountAliases",
      "s3:GetBucket*",
      "s3:ListBucket",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudtrail:CreateTrail",
      "cloudtrail:StartLogging",
      "cloudtrail:StopLogging",
      "cloudtrail:UpdateTrail",
      "cloudtrail:DeleteTrail",
      "cloudtrail:PutEventSelectors"
    ],
    "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteBucketPolicy",
      "s3:DeleteBucketWebsite",
      "s3:DeleteObject",
      "s3:DeleteObjectTagging",
      "s3:DeleteObjectVersion",
      "s3:DeleteObjectVersionTagging",
      "s3:DeleteReplicationConfiguration",
      "s3:PutBucketPolicy"
    ],
    "Resource": [
      "arn:aws:s3:::awsmacie-*",
      "arn:aws:s3:::awsmacietrail-*",
      "arn:aws:s3:::*-awsmacietrail-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "polly:DescribeVoices",
        "polly:GetLexicon",
        "polly:GetSpeechSynthesisTask",
        "polly:ListLexicons",
        "polly:ListSpeechSynthesisTasks",
        "polly:SynthesizeSpeech"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "polly:DescribeVoices",
      "polly:GetLexicon",
      "polly:GetSpeechSynthesisTask",
      "polly:ListLexicons",
      "polly:ListSpeechSynthesisTasks",
      "polly:SynthesizeSpeech"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:PutResourcePolicy",
        "secretsmanager:PutSecretValue",
        "secretsmanager:DeleteSecret",
        "secretsmanager:DescribeSecret",
        "secretsmanager:TagResource"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
      "Effect": "Allow",
      "Sid": "SecretsManagerDbCredentialsAccess"
    },
    {
      "Action": [
        "dbqms:CreateFavoriteQuery",
        "dbqms:DescribeFavoriteQueries",
        "dbqms:UpdateFavoriteQuery",
        "dbqms:DeleteFavoriteQueries",
        "dbqms:GetQueryString",
        "dbqms:CreateQueryHistory",
        "dbqms:DescribeQueryHistory",
        "dbqms:UpdateQueryHistory",
        "dbqms:DeleteQueryHistory",
        "dbqms:DescribeQueryHistory",
        "rds-data:ExecuteSql",
        "rds-data:ExecuteStatement",
        "rds-data:BatchExecuteStatement",
        "rds-data:BeginTransaction",
        "rds-data:CommitTransaction",
        "rds-data:RollbackTransaction",
        "secretsmanager:CreateSecret",
        "secretsmanager:ListSecrets",
        "secretsmanager:GetRandomPassword",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "RDSDataServiceAccess"
    }
  ]
}
[
  {
    "Action": [
      "secretsmanager:GetSecretValue",
      "secretsmanager:PutResourcePolicy",
      "secretsmanager:PutSecretValue",
      "secretsmanager:DeleteSecret",
      "secretsmanager:DescribeSecret",
      "secretsmanager:TagResource"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*",
    "Effect": "Allow",
    "Sid": "SecretsManagerDbCredentialsAccess"
  },
  {
    "Action": [
      "dbqms:CreateFavoriteQuery",
      "dbqms:DescribeFavoriteQueries",
      "dbqms:UpdateFavoriteQuery",
      "dbqms:DeleteFavoriteQueries",
      "dbqms:GetQueryString",
      "dbqms:CreateQueryHistory",
      "dbqms:DescribeQueryHistory",
      "dbqms:UpdateQueryHistory",
      "dbqms:DeleteQueryHistory",
      "dbqms:DescribeQueryHistory",
      "rds-data:ExecuteSql",
      "rds-data:ExecuteStatement",
      "rds-data:BatchExecuteStatement",
      "rds-data:BeginTransaction",
      "rds-data:CommitTransaction",
      "rds-data:RollbackTransaction",
      "secretsmanager:CreateSecret",
      "secretsmanager:ListSecrets",
      "secretsmanager:GetRandomPassword",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "RDSDataServiceAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "mobileanalytics:PutEvents",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "mobileanalytics:PutEvents",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeImages",
        "ec2:DescribeSubnets",
        "ec2:RequestSpotInstances",
        "ec2:TerminateInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:CreateTags"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ec2.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": [
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
      ],
      "Resource": [
        "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:RegisterTargets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeImages",
      "ec2:DescribeSubnets",
      "ec2:RequestSpotInstances",
      "ec2:TerminateInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:CreateTags"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ec2.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": [
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
    ],
    "Resource": [
      "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:RegisterTargets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:*",
        "cloudwatch:*",
        "cloudformation:CreateStack",
        "cloudformation:DescribeStackEvents",
        "datapipeline:Describe*",
        "datapipeline:ListPipelines",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:QueryObjects",
        "dynamodb:*",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CancelSpotFleetRequests",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:Describe*",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifySpotFleetRequest",
        "ec2:RequestSpotInstances",
        "ec2:RequestSpotFleet",
        "elasticfilesystem:*",
        "elasticmapreduce:*",
        "es:*",
        "firehose:*",
        "fsx:DescribeFileSystems",
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:ListRoles",
        "kinesis:*",
        "kms:List*",
        "lambda:Create*",
        "lambda:Delete*",
        "lambda:Get*",
        "lambda:InvokeFunction",
        "lambda:PublishVersion",
        "lambda:Update*",
        "lambda:List*",
        "machinelearning:*",
        "sdb:*",
        "rds:*",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "redshift:*",
        "s3:CreateBucket",
        "sns:CreateTopic",
        "sns:Get*",
        "sns:List*",
        "sagemaker:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:Abort*",
        "s3:DeleteObject",
        "s3:Get*",
        "s3:List*",
        "s3:PutAccelerateConfiguration",
        "s3:PutBucketLogging",
        "s3:PutBucketNotification",
        "s3:PutBucketTagging",
        "s3:PutObject",
        "s3:Replicate*",
        "s3:RestoreObject"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:RunInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/DataPipelineDefaultRole",
        "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
        "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
        "arn:aws:iam::*:role/EMR_DefaultRole",
        "arn:aws:iam::*:role/kinesis-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "sagemaker.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:*",
      "cloudwatch:*",
      "cloudformation:CreateStack",
      "cloudformation:DescribeStackEvents",
      "datapipeline:Describe*",
      "datapipeline:ListPipelines",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:QueryObjects",
      "dynamodb:*",
      "ec2:CancelSpotInstanceRequests",
      "ec2:CancelSpotFleetRequests",
      "ec2:CreateTags",
      "ec2:DeleteTags",
      "ec2:Describe*",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:ModifySpotFleetRequest",
      "ec2:RequestSpotInstances",
      "ec2:RequestSpotFleet",
      "elasticfilesystem:*",
      "elasticmapreduce:*",
      "es:*",
      "firehose:*",
      "fsx:DescribeFileSystems",
      "iam:GetInstanceProfile",
      "iam:GetRole",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:ListRoles",
      "kinesis:*",
      "kms:List*",
      "lambda:Create*",
      "lambda:Delete*",
      "lambda:Get*",
      "lambda:InvokeFunction",
      "lambda:PublishVersion",
      "lambda:Update*",
      "lambda:List*",
      "machinelearning:*",
      "sdb:*",
      "rds:*",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "redshift:*",
      "s3:CreateBucket",
      "sns:CreateTopic",
      "sns:Get*",
      "sns:List*",
      "sagemaker:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:Abort*",
      "s3:DeleteObject",
      "s3:Get*",
      "s3:List*",
      "s3:PutAccelerateConfiguration",
      "s3:PutBucketLogging",
      "s3:PutBucketNotification",
      "s3:PutBucketTagging",
      "s3:PutObject",
      "s3:Replicate*",
      "s3:RestoreObject"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:RunInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/DataPipelineDefaultRole",
      "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
      "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
      "arn:aws:iam::*:role/EMR_DefaultRole",
      "arn:aws:iam::*:role/kinesis-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "sagemaker.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:MeterUsage"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:MeterUsage"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteObject",
        "s3:DeleteBucket",
        "s3:GetObject",
        "s3:HeadBucket",
        "s3:ListBucket",
        "s3:PutBucketPolicy",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-opsworks-cm-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:DescribeInstanceInformation",
        "ssm:GetCommandInvocation",
        "ssm:ListCommandInvocations",
        "ssm:ListCommands"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:SendCommand"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
        }
      }
    },
    {
      "Action": [
        "ssm:SendCommand"
      ],
      "Resource": [
        "arn:aws:ssm:*::document/*",
        "arn:aws:s3:::aws-opsworks-cm-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AllocateAddress",
        "ec2:AssociateAddress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateImage",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSnapshot",
        "ec2:CreateTags",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteSnapshot",
        "ec2:DeregisterImage",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeImages",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSubnets",
        "ec2:DisassociateAddress",
        "ec2:ReleaseAddress",
        "ec2:RunInstances",
        "ec2:StopInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances",
        "ec2:RebootInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
        }
      }
    },
    {
      "Action": [
        "opsworks-cm:DeleteServer",
        "opsworks-cm:StartMaintenance"
      ],
      "Resource": [
        "arn:aws:opsworks-cm:*:*:server/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:UpdateStack"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-opsworks-cm-*",
        "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteObject",
      "s3:DeleteBucket",
      "s3:GetObject",
      "s3:HeadBucket",
      "s3:ListBucket",
      "s3:PutBucketPolicy",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-opsworks-cm-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:DescribeInstanceInformation",
      "ssm:GetCommandInvocation",
      "ssm:ListCommandInvocations",
      "ssm:ListCommands"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:SendCommand"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
      }
    }
  },
  {
    "Action": [
      "ssm:SendCommand"
    ],
    "Resource": [
      "arn:aws:ssm:*::document/*",
      "arn:aws:s3:::aws-opsworks-cm-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AllocateAddress",
      "ec2:AssociateAddress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateImage",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSnapshot",
      "ec2:CreateTags",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSnapshot",
      "ec2:DeregisterImage",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeImages",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshots",
      "ec2:DescribeSubnets",
      "ec2:DisassociateAddress",
      "ec2:ReleaseAddress",
      "ec2:RunInstances",
      "ec2:StopInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances",
      "ec2:RebootInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
      }
    }
  },
  {
    "Action": [
      "opsworks-cm:DeleteServer",
      "opsworks-cm:StartMaintenance"
    ],
    "Resource": [
      "arn:aws:opsworks-cm:*:*:server/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:UpdateStack"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-opsworks-cm-*",
      "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus",
        "iam:GetRole"
      ],
      "Resource": "arn:*:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/AWSServiceRoleForFSxS3Access_*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus",
      "iam:GetRole"
    ],
    "Resource": "arn:*:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/AWSServiceRoleForFSxS3Access_*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "connect:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DeleteRole"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect_*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "connect:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DeleteRole"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect_*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:CreatePrivateMarketplace",
        "aws-marketplace:CreatePrivateMarketplaceProfile",
        "aws-marketplace:UpdatePrivateMarketplaceProfile",
        "aws-marketplace:StartPrivateMarketplace",
        "aws-marketplace:StopPrivateMarketplace",
        "aws-marketplace:AssociateProductsWithPrivateMarketplace",
        "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
        "aws-marketplace:DescribePrivateMarketplaceProfile",
        "aws-marketplace:DescribePrivateMarketplaceStatus",
        "aws-marketplace:ListPrivateMarketplaceProducts",
        "aws-marketplace:DescribePrivateMarketplaceProducts"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:CreatePrivateMarketplace",
      "aws-marketplace:CreatePrivateMarketplaceProfile",
      "aws-marketplace:UpdatePrivateMarketplaceProfile",
      "aws-marketplace:StartPrivateMarketplace",
      "aws-marketplace:StopPrivateMarketplace",
      "aws-marketplace:AssociateProductsWithPrivateMarketplace",
      "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
      "aws-marketplace:DescribePrivateMarketplaceProfile",
      "aws-marketplace:DescribePrivateMarketplaceStatus",
      "aws-marketplace:ListPrivateMarketplaceProducts",
      "aws-marketplace:DescribePrivateMarketplaceProducts"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iam:GetUser",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteObject",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:AbortMultipartUpload",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": "arn:aws:s3:::import-to-ec2-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CancelConversionTask",
        "ec2:CancelExportTask",
        "ec2:CreateImage",
        "ec2:CreateInstanceExportTask",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:DeleteTags",
        "ec2:DeleteVolume",
        "ec2:DescribeConversionTasks",
        "ec2:DescribeExportTasks",
        "ec2:DescribeImages",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances",
        "ec2:DescribeRegions",
        "ec2:DescribeTags",
        "ec2:DetachVolume",
        "ec2:ImportInstance",
        "ec2:ImportVolume",
        "ec2:ModifyInstanceAttribute",
        "ec2:RunInstances",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:ImportImage",
        "ec2:DescribeImportImageTasks",
        "ec2:DeregisterImage",
        "ec2:DescribeSnapshots",
        "ec2:DeleteSnapshot",
        "ec2:CancelImportTask",
        "ec2:ImportSnapshot",
        "ec2:DescribeImportSnapshotTasks"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "SNS:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "iam:GetUser",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteObject",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:AbortMultipartUpload",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": "arn:aws:s3:::import-to-ec2-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CancelConversionTask",
      "ec2:CancelExportTask",
      "ec2:CreateImage",
      "ec2:CreateInstanceExportTask",
      "ec2:CreateTags",
      "ec2:CreateVolume",
      "ec2:DeleteTags",
      "ec2:DeleteVolume",
      "ec2:DescribeConversionTasks",
      "ec2:DescribeExportTasks",
      "ec2:DescribeImages",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances",
      "ec2:DescribeRegions",
      "ec2:DescribeTags",
      "ec2:DetachVolume",
      "ec2:ImportInstance",
      "ec2:ImportVolume",
      "ec2:ModifyInstanceAttribute",
      "ec2:RunInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:ImportImage",
      "ec2:DescribeImportImageTasks",
      "ec2:DeregisterImage",
      "ec2:DescribeSnapshots",
      "ec2:DeleteSnapshot",
      "ec2:CancelImportTask",
      "ec2:ImportSnapshot",
      "ec2:DescribeImportSnapshotTasks"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "SNS:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DescribeServices",
        "ecs:CreateTaskSet",
        "ecs:UpdateServicePrimaryTaskSet",
        "ecs:DeleteTaskSet",
        "cloudwatch:DescribeAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:CodeDeployTopic_*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:ModifyRule"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectMetadata",
        "s3:GetObjectVersion"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/ecsTaskExecutionRole",
        "arn:aws:iam::*:role/ECSTaskExecution*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ecs-tasks.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ecs:DescribeServices",
      "ecs:CreateTaskSet",
      "ecs:UpdateServicePrimaryTaskSet",
      "ecs:DeleteTaskSet",
      "cloudwatch:DescribeAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:CodeDeployTopic_*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:ModifyListener",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:ModifyRule"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectMetadata",
      "s3:GetObjectVersion"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/ecsTaskExecutionRole",
      "arn:aws:iam::*:role/ECSTaskExecution*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ecs-tasks.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elastictranscoder:Read*",
        "elastictranscoder:List*",
        "elastictranscoder:*Job",
        "elastictranscoder:*Preset",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "iam:ListRoles",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elastictranscoder:Read*",
      "elastictranscoder:List*",
      "elastictranscoder:*Job",
      "elastictranscoder:*Preset",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "iam:ListRoles",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "backup:Get*",
        "backup:List*",
        "backup:Describe*",
        "backup:CreateBackupSelection",
        "backup:DeleteBackupSelection",
        "backup:GetRecoveryPointRestoreMetadata",
        "backup:StartBackupJob",
        "backup:StartRestoreJob"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:DescribeDBSnapshots",
        "rds:ListTagsForResource",
        "rds:DescribeDBInstances",
        "rds:describeDBSnapshots",
        "rds:describeDBEngineVersions",
        "rds:describeOptionGroups",
        "rds:describeOrderableDBInstanceOptions",
        "rds:describeDBSubnetGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "dynamodb:ListBackups",
        "dynamodb:ListTables"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticfilesystem:DescribeFilesystems"
      ],
      "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots",
        "ec2:DescribeVolumes",
        "ec2:describeAvailabilityZones"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetTagKeys",
        "tag:GetTagValues",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DescribeCachediSCSIVolumes",
        "storagegateway:DescribeStorediSCSIVolumes"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:ListGateways"
      ],
      "Resource": "arn:aws:storagegateway:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:ListVolumes",
        "storagegateway:ListLocalDisks"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:ListRoles",
        "iam:GetRole",
        "iam:GetUser"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/*AwsBackup*",
        "arn:aws:iam::*:role/*AWSBackup*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "backup.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "kms:ListKeys",
        "kms:DescribeKey",
        "kms:GenerateDataKey",
        "kms:RetireGrant",
        "kms:CreateGrant",
        "kms:ListAliases",
        "kms:Decrypt"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "backup:Get*",
      "backup:List*",
      "backup:Describe*",
      "backup:CreateBackupSelection",
      "backup:DeleteBackupSelection",
      "backup:GetRecoveryPointRestoreMetadata",
      "backup:StartBackupJob",
      "backup:StartRestoreJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:DescribeDBSnapshots",
      "rds:ListTagsForResource",
      "rds:DescribeDBInstances",
      "rds:describeDBSnapshots",
      "rds:describeDBEngineVersions",
      "rds:describeOptionGroups",
      "rds:describeOrderableDBInstanceOptions",
      "rds:describeDBSubnetGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "dynamodb:ListBackups",
      "dynamodb:ListTables"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticfilesystem:DescribeFilesystems"
    ],
    "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots",
      "ec2:DescribeVolumes",
      "ec2:describeAvailabilityZones"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetTagKeys",
      "tag:GetTagValues",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DescribeCachediSCSIVolumes",
      "storagegateway:DescribeStorediSCSIVolumes"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:ListGateways"
    ],
    "Resource": "arn:aws:storagegateway:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:ListVolumes",
      "storagegateway:ListLocalDisks"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:ListRoles",
      "iam:GetRole",
      "iam:GetUser"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/*AwsBackup*",
      "arn:aws:iam::*:role/*AWSBackup*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "backup.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "kms:ListKeys",
      "kms:DescribeKey",
      "kms:GenerateDataKey",
      "kms:RetireGrant",
      "kms:CreateGrant",
      "kms:ListAliases",
      "kms:Decrypt"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "iam:AWSServiceName": "macie.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAnyValue:StringEquals": {
        "iam:AWSServiceName": "macie.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotanalytics:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotanalytics:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "batch:*",
        "cloudwatch:GetMetricStatistics",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeVpcs",
        "ec2:DescribeImages",
        "ec2:DescribeLaunchTemplates",
        "ec2:DescribeLaunchTemplateVersions",
        "ecs:DescribeClusters",
        "ecs:Describe*",
        "ecs:List*",
        "logs:Describe*",
        "logs:Get*",
        "logs:TestMetricFilter",
        "logs:FilterLogEvents",
        "iam:ListInstanceProfiles",
        "iam:ListRoles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/AWSBatchServiceRole",
        "arn:aws:iam::*:role/service-role/AWSBatchServiceRole",
        "arn:aws:iam::*:role/ecsInstanceRole",
        "arn:aws:iam::*:instance-profile/ecsInstanceRole",
        "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role",
        "arn:aws:iam::*:role/aws-ec2-spot-fleet-role",
        "arn:aws:iam::*:role/AWSBatchJobRole*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "batch:*",
      "cloudwatch:GetMetricStatistics",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeVpcs",
      "ec2:DescribeImages",
      "ec2:DescribeLaunchTemplates",
      "ec2:DescribeLaunchTemplateVersions",
      "ecs:DescribeClusters",
      "ecs:Describe*",
      "ecs:List*",
      "logs:Describe*",
      "logs:Get*",
      "logs:TestMetricFilter",
      "logs:FilterLogEvents",
      "iam:ListInstanceProfiles",
      "iam:ListRoles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/AWSBatchServiceRole",
      "arn:aws:iam::*:role/service-role/AWSBatchServiceRole",
      "arn:aws:iam::*:role/ecsInstanceRole",
      "arn:aws:iam::*:instance-profile/ecsInstanceRole",
      "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role",
      "arn:aws:iam::*:role/aws-ec2-spot-fleet-role",
      "arn:aws:iam::*:role/AWSBatchJobRole*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:CreateComputer",
        "ds:DescribeDirectories"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ds:CreateComputer",
      "ds:DescribeDirectories"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:RegisterScalableTarget",
        "appmesh:ListMeshes",
        "appmesh:ListVirtualNodes",
        "appmesh:DescribeVirtualNode",
        "autoscaling:UpdateAutoScalingGroup",
        "autoscaling:CreateAutoScalingGroup",
        "autoscaling:CreateLaunchConfiguration",
        "autoscaling:DeleteAutoScalingGroup",
        "autoscaling:DeleteLaunchConfiguration",
        "autoscaling:Describe*",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStack*",
        "cloudformation:UpdateStack",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:PutMetricAlarm",
        "codedeploy:CreateApplication",
        "codedeploy:CreateDeployment",
        "codedeploy:CreateDeploymentGroup",
        "codedeploy:GetApplication",
        "codedeploy:GetDeployment",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:ListApplications",
        "codedeploy:ListDeploymentGroups",
        "codedeploy:ListDeployments",
        "codedeploy:StopDeployment",
        "codedeploy:GetDeploymentTarget",
        "codedeploy:ListDeploymentTargets",
        "codedeploy:GetDeploymentConfig",
        "codedeploy:GetApplicationRevision",
        "codedeploy:RegisterApplicationRevision",
        "codedeploy:BatchGetApplicationRevisions",
        "codedeploy:BatchGetDeploymentGroups",
        "codedeploy:BatchGetDeployments",
        "codedeploy:BatchGetApplications",
        "codedeploy:ListApplicationRevisions",
        "codedeploy:ListDeploymentConfigs",
        "codedeploy:ContinueDeployment",
        "sns:ListTopics",
        "lambda:ListFunctions",
        "ec2:AssociateRouteTable",
        "ec2:AttachInternetGateway",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CancelSpotFleetRequests",
        "ec2:CreateInternetGateway",
        "ec2:CreateLaunchTemplate",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateVpc",
        "ec2:DeleteLaunchTemplate",
        "ec2:DeleteSubnet",
        "ec2:DeleteVpc",
        "ec2:Describe*",
        "ec2:DetachInternetGateway",
        "ec2:DisassociateRouteTable",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:RunInstances",
        "ec2:RequestSpotFleet",
        "elasticloadbalancing:CreateListener",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:CreateRule",
        "elasticloadbalancing:CreateTargetGroup",
        "elasticloadbalancing:DeleteListener",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:DeleteRule",
        "elasticloadbalancing:DeleteTargetGroup",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:DescribeTargetGroups",
        "ecs:*",
        "events:DescribeRule",
        "events:DeleteRule",
        "events:ListRuleNamesByTarget",
        "events:ListTargetsByRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "iam:ListAttachedRolePolicies",
        "iam:ListInstanceProfiles",
        "iam:ListRoles",
        "logs:CreateLogGroup",
        "logs:DescribeLogGroups",
        "logs:FilterLogEvents",
        "route53:GetHostedZone",
        "route53:ListHostedZonesByName",
        "route53:CreateHostedZone",
        "route53:DeleteHostedZone",
        "route53:GetHealthCheck",
        "servicediscovery:CreatePrivateDnsNamespace",
        "servicediscovery:CreateService",
        "servicediscovery:GetNamespace",
        "servicediscovery:GetOperation",
        "servicediscovery:GetService",
        "servicediscovery:ListNamespaces",
        "servicediscovery:ListServices",
        "servicediscovery:UpdateService",
        "servicediscovery:DeleteService"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:GetParametersByPath",
        "ssm:GetParameters",
        "ssm:GetParameter"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DeleteInternetGateway",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteSecurityGroup"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
        }
      }
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "ecs-tasks.amazonaws.com"
        }
      }
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/ecsInstanceRole*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ec2.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/ecsAutoscaleRole*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "application-autoscaling.amazonaws.com",
            "application-autoscaling.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "ecs.amazonaws.com",
            "spot.amazonaws.com",
            "spotfleet.amazonaws.com",
            "ecs.application-autoscaling.amazonaws.com",
            "autoscaling.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:RegisterScalableTarget",
      "appmesh:ListMeshes",
      "appmesh:ListVirtualNodes",
      "appmesh:DescribeVirtualNode",
      "autoscaling:UpdateAutoScalingGroup",
      "autoscaling:CreateAutoScalingGroup",
      "autoscaling:CreateLaunchConfiguration",
      "autoscaling:DeleteAutoScalingGroup",
      "autoscaling:DeleteLaunchConfiguration",
      "autoscaling:Describe*",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStack*",
      "cloudformation:UpdateStack",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:PutMetricAlarm",
      "codedeploy:CreateApplication",
      "codedeploy:CreateDeployment",
      "codedeploy:CreateDeploymentGroup",
      "codedeploy:GetApplication",
      "codedeploy:GetDeployment",
      "codedeploy:GetDeploymentGroup",
      "codedeploy:ListApplications",
      "codedeploy:ListDeploymentGroups",
      "codedeploy:ListDeployments",
      "codedeploy:StopDeployment",
      "codedeploy:GetDeploymentTarget",
      "codedeploy:ListDeploymentTargets",
      "codedeploy:GetDeploymentConfig",
      "codedeploy:GetApplicationRevision",
      "codedeploy:RegisterApplicationRevision",
      "codedeploy:BatchGetApplicationRevisions",
      "codedeploy:BatchGetDeploymentGroups",
      "codedeploy:BatchGetDeployments",
      "codedeploy:BatchGetApplications",
      "codedeploy:ListApplicationRevisions",
      "codedeploy:ListDeploymentConfigs",
      "codedeploy:ContinueDeployment",
      "sns:ListTopics",
      "lambda:ListFunctions",
      "ec2:AssociateRouteTable",
      "ec2:AttachInternetGateway",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CancelSpotFleetRequests",
      "ec2:CreateInternetGateway",
      "ec2:CreateLaunchTemplate",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateVpc",
      "ec2:DeleteLaunchTemplate",
      "ec2:DeleteSubnet",
      "ec2:DeleteVpc",
      "ec2:Describe*",
      "ec2:DetachInternetGateway",
      "ec2:DisassociateRouteTable",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:RunInstances",
      "ec2:RequestSpotFleet",
      "elasticloadbalancing:CreateListener",
      "elasticloadbalancing:CreateLoadBalancer",
      "elasticloadbalancing:CreateRule",
      "elasticloadbalancing:CreateTargetGroup",
      "elasticloadbalancing:DeleteListener",
      "elasticloadbalancing:DeleteLoadBalancer",
      "elasticloadbalancing:DeleteRule",
      "elasticloadbalancing:DeleteTargetGroup",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeTargetGroups",
      "ecs:*",
      "events:DescribeRule",
      "events:DeleteRule",
      "events:ListRuleNamesByTarget",
      "events:ListTargetsByRule",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "iam:ListAttachedRolePolicies",
      "iam:ListInstanceProfiles",
      "iam:ListRoles",
      "logs:CreateLogGroup",
      "logs:DescribeLogGroups",
      "logs:FilterLogEvents",
      "route53:GetHostedZone",
      "route53:ListHostedZonesByName",
      "route53:CreateHostedZone",
      "route53:DeleteHostedZone",
      "route53:GetHealthCheck",
      "servicediscovery:CreatePrivateDnsNamespace",
      "servicediscovery:CreateService",
      "servicediscovery:GetNamespace",
      "servicediscovery:GetOperation",
      "servicediscovery:GetService",
      "servicediscovery:ListNamespaces",
      "servicediscovery:ListServices",
      "servicediscovery:UpdateService",
      "servicediscovery:DeleteService"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:GetParametersByPath",
      "ssm:GetParameters",
      "ssm:GetParameter"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DeleteInternetGateway",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
      }
    }
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "ecs-tasks.amazonaws.com"
      }
    }
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/ecsInstanceRole*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ec2.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/ecsAutoscaleRole*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "application-autoscaling.amazonaws.com",
          "application-autoscaling.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "ecs.amazonaws.com",
          "spot.amazonaws.com",
          "spotfleet.amazonaws.com",
          "ecs.application-autoscaling.amazonaws.com",
          "autoscaling.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "catalog-admin:DescribeConstraints",
        "catalog-admin:DescribeListingForProduct",
        "catalog-admin:DescribeListings",
        "catalog-admin:DescribePortfolios",
        "catalog-admin:DescribeProductVersions",
        "catalog-admin:GetPortfolioCount",
        "catalog-admin:GetPortfolios",
        "catalog-admin:GetProductCounts",
        "catalog-admin:ListAllPortfolioConstraints",
        "catalog-admin:ListPortfolioConstraints",
        "catalog-admin:ListPortfolios",
        "catalog-admin:ListPrincipalConstraints",
        "catalog-admin:ListProductConstraints",
        "catalog-admin:ListResourceUsers",
        "catalog-admin:ListTagsForResource",
        "catalog-admin:SearchListings",
        "catalog-user:*",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplateSummary",
        "iam:GetGroup",
        "iam:GetRole",
        "iam:GetUser",
        "iam:ListGroups",
        "iam:ListRoles",
        "iam:ListUsers",
        "s3:GetObject",
        "servicecatalog:DescribeTagOption",
        "servicecatalog:GetTagOptionMigrationStatus",
        "servicecatalog:ListResourcesForTagOption",
        "servicecatalog:ListTagOptions",
        "servicecatalog:AccountLevelDescribeRecord",
        "servicecatalog:AccountLevelListRecordHistory",
        "servicecatalog:AccountLevelScanProvisionedProducts",
        "servicecatalog:DescribeProduct",
        "servicecatalog:DescribeProductView",
        "servicecatalog:DescribeProvisioningParameters",
        "servicecatalog:DescribeProvisionedProduct",
        "servicecatalog:DescribeRecord",
        "servicecatalog:ListLaunchPaths",
        "servicecatalog:ListRecordHistory",
        "servicecatalog:ScanProvisionedProducts",
        "servicecatalog:SearchProducts",
        "servicecatalog:DescribeConstraint",
        "servicecatalog:DescribeProductAsAdmin",
        "servicecatalog:DescribePortfolio",
        "servicecatalog:DescribeProvisioningArtifact",
        "servicecatalog:ListAcceptedPortfolioShares",
        "servicecatalog:ListConstraintsForPortfolio",
        "servicecatalog:ListPortfolioAccess",
        "servicecatalog:ListPortfolios",
        "servicecatalog:ListPortfoliosForProduct",
        "servicecatalog:ListPrincipalsForPortfolio",
        "servicecatalog:ListProvisioningArtifacts",
        "servicecatalog:SearchProductsAsAdmin"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "catalog-admin:DescribeConstraints",
      "catalog-admin:DescribeListingForProduct",
      "catalog-admin:DescribeListings",
      "catalog-admin:DescribePortfolios",
      "catalog-admin:DescribeProductVersions",
      "catalog-admin:GetPortfolioCount",
      "catalog-admin:GetPortfolios",
      "catalog-admin:GetProductCounts",
      "catalog-admin:ListAllPortfolioConstraints",
      "catalog-admin:ListPortfolioConstraints",
      "catalog-admin:ListPortfolios",
      "catalog-admin:ListPrincipalConstraints",
      "catalog-admin:ListProductConstraints",
      "catalog-admin:ListResourceUsers",
      "catalog-admin:ListTagsForResource",
      "catalog-admin:SearchListings",
      "catalog-user:*",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStacks",
      "cloudformation:GetTemplateSummary",
      "iam:GetGroup",
      "iam:GetRole",
      "iam:GetUser",
      "iam:ListGroups",
      "iam:ListRoles",
      "iam:ListUsers",
      "s3:GetObject",
      "servicecatalog:DescribeTagOption",
      "servicecatalog:GetTagOptionMigrationStatus",
      "servicecatalog:ListResourcesForTagOption",
      "servicecatalog:ListTagOptions",
      "servicecatalog:AccountLevelDescribeRecord",
      "servicecatalog:AccountLevelListRecordHistory",
      "servicecatalog:AccountLevelScanProvisionedProducts",
      "servicecatalog:DescribeProduct",
      "servicecatalog:DescribeProductView",
      "servicecatalog:DescribeProvisioningParameters",
      "servicecatalog:DescribeProvisionedProduct",
      "servicecatalog:DescribeRecord",
      "servicecatalog:ListLaunchPaths",
      "servicecatalog:ListRecordHistory",
      "servicecatalog:ScanProvisionedProducts",
      "servicecatalog:SearchProducts",
      "servicecatalog:DescribeConstraint",
      "servicecatalog:DescribeProductAsAdmin",
      "servicecatalog:DescribePortfolio",
      "servicecatalog:DescribeProvisioningArtifact",
      "servicecatalog:ListAcceptedPortfolioShares",
      "servicecatalog:ListConstraintsForPortfolio",
      "servicecatalog:ListPortfolioAccess",
      "servicecatalog:ListPortfolios",
      "servicecatalog:ListPortfoliosForProduct",
      "servicecatalog:ListPrincipalsForPortfolio",
      "servicecatalog:ListProvisioningArtifacts",
      "servicecatalog:SearchProductsAsAdmin"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:AddTagsToResource",
        "rds:CreateDBInstance",
        "rds:DeleteDBInstance",
        "rds:DescribeDBClusters",
        "rds:DescribeDBInstances",
        "rds:ModifyDBCluster",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "rds.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:AddTagsToResource",
      "rds:CreateDBInstance",
      "rds:DeleteDBInstance",
      "rds:DescribeDBClusters",
      "rds:DescribeDBInstances",
      "rds:ModifyDBCluster",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "rds.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "aws:ec2sri:scheduledInstanceId"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringEquals": {
        "aws:TagKeys": [
          "aws:ec2sri:scheduledInstanceId"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DescribeAlarms",
        "lambda:UpdateAlias",
        "lambda:GetAlias",
        "sns:Publish"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion"
      ],
      "Resource": "arn:aws:s3:::*/CodeDeploy/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
        }
      }
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DescribeAlarms",
      "lambda:UpdateAlias",
      "lambda:GetAlias",
      "sns:Publish"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectVersion"
    ],
    "Resource": "arn:aws:s3:::*/CodeDeploy/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetObjectVersion"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
      }
    }
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "fms:Get*",
        "fms:List*",
        "waf:Get*",
        "waf:List*",
        "waf-regional:Get*",
        "waf-regional:List*",
        "organizations:DescribeOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "fms:Get*",
      "fms:List*",
      "waf:Get*",
      "waf:List*",
      "waf-regional:Get*",
      "waf-regional:List*",
      "organizations:DescribeOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "ds:CreateComputer",
        "ds:DescribeDirectories",
        "ec2:DescribeInstanceStatus",
        "logs:*",
        "ssm:*",
        "ec2messages:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "ssm.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData",
      "ds:CreateComputer",
      "ds:DescribeDirectories",
      "ec2:DescribeInstanceStatus",
      "logs:*",
      "ssm:*",
      "ec2messages:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "ssm.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codecommit:BatchGet*",
        "codecommit:BatchDescribe*",
        "codecommit:Get*",
        "codecommit:Describe*",
        "codecommit:List*",
        "codecommit:GitPull"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "events:DescribeRule",
        "events:ListTargetsByRule"
      ],
      "Resource": "arn:aws:events:*:*:rule/codecommit*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
    },
    {
      "Action": [
        "sns:ListTopics",
        "sns:ListSubscriptionsByTopic",
        "sns:GetTopicAttributes"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "SNSSubscriptionAccess"
    },
    {
      "Action": [
        "lambda:ListFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "LambdaReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListUsers"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyListAccess"
    },
    {
      "Action": [
        "iam:ListAccessKeys",
        "iam:ListSSHPublicKeys",
        "iam:ListServiceSpecificCredentials",
        "iam:ListAccessKeys",
        "iam:GetSSHPublicKey"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow",
      "Sid": "IAMReadOnlyConsoleAccess"
    }
  ]
}
[
  {
    "Action": [
      "codecommit:BatchGet*",
      "codecommit:BatchDescribe*",
      "codecommit:Get*",
      "codecommit:Describe*",
      "codecommit:List*",
      "codecommit:GitPull"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "events:DescribeRule",
      "events:ListTargetsByRule"
    ],
    "Resource": "arn:aws:events:*:*:rule/codecommit*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
  },
  {
    "Action": [
      "sns:ListTopics",
      "sns:ListSubscriptionsByTopic",
      "sns:GetTopicAttributes"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "SNSSubscriptionAccess"
  },
  {
    "Action": [
      "lambda:ListFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "LambdaReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListUsers"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyListAccess"
  },
  {
    "Action": [
      "iam:ListAccessKeys",
      "iam:ListSSHPublicKeys",
      "iam:ListServiceSpecificCredentials",
      "iam:ListAccessKeys",
      "iam:GetSSHPublicKey"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow",
    "Sid": "IAMReadOnlyConsoleAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:Describe*",
        "autoscaling:UpdateAutoScalingGroup",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStack*",
        "cloudformation:UpdateStack",
        "cloudwatch:GetMetricStatistics",
        "ec2:Describe*",
        "elasticloadbalancing:*",
        "ecs:*",
        "events:DescribeRule",
        "events:DeleteRule",
        "events:ListRuleNamesByTarget",
        "events:ListTargetsByRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "iam:ListInstanceProfiles",
        "iam:ListRoles",
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:Describe*",
      "autoscaling:UpdateAutoScalingGroup",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStack*",
      "cloudformation:UpdateStack",
      "cloudwatch:GetMetricStatistics",
      "ec2:Describe*",
      "elasticloadbalancing:*",
      "ecs:*",
      "events:DescribeRule",
      "events:DeleteRule",
      "events:ListRuleNamesByTarget",
      "events:ListTargetsByRule",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "iam:ListInstanceProfiles",
      "iam:ListRoles",
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "freertos:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "freertos:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:AmazonTextract*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:AmazonTextract*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cognito-identity:Describe*",
        "cognito-identity:Get*",
        "cognito-identity:List*",
        "cognito-idp:Describe*",
        "cognito-idp:AdminGet*",
        "cognito-idp:AdminList*",
        "cognito-idp:List*",
        "cognito-idp:Get*",
        "cognito-sync:Describe*",
        "cognito-sync:Get*",
        "cognito-sync:List*",
        "iam:ListOpenIdConnectProviders",
        "iam:ListRoles",
        "sns:ListPlatformApplications"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cognito-identity:Describe*",
      "cognito-identity:Get*",
      "cognito-identity:List*",
      "cognito-idp:Describe*",
      "cognito-idp:AdminGet*",
      "cognito-idp:AdminList*",
      "cognito-idp:List*",
      "cognito-idp:Get*",
      "cognito-sync:Describe*",
      "cognito-sync:Get*",
      "cognito-sync:List*",
      "iam:ListOpenIdConnectProviders",
      "iam:ListRoles",
      "sns:ListPlatformApplications"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:DescribeLogGroups"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AllowDescribeOnAllLogGroups"
    },
    {
      "Action": [
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:dms-tasks-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:dms-tasks-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowCreationOfDmsTasksLogGroups"
    },
    {
      "Action": [
        "logs:CreateLogStream"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowCreationOfDmsTaskLogStream"
    },
    {
      "Action": [
        "logs:PutLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
    }
  ]
}
[
  {
    "Action": [
      "logs:DescribeLogGroups"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AllowDescribeOnAllLogGroups"
  },
  {
    "Action": [
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:dms-tasks-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:dms-tasks-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowCreationOfDmsTasksLogGroups"
  },
  {
    "Action": [
      "logs:CreateLogStream"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowCreationOfDmsTaskLogStream"
  },
  {
    "Action": [
      "logs:PutLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mgh:*",
        "discovery:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "migrationhub.amazonaws.com",
            "dmsintegration.migrationhub.amazonaws.com",
            "smsintegration.migrationhub.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "mgh:*",
      "discovery:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "migrationhub.amazonaws.com",
          "dmsintegration.migrationhub.amazonaws.com",
          "smsintegration.migrationhub.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "servicediscovery:Get*",
        "servicediscovery:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "servicediscovery:Get*",
      "servicediscovery:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "ds:DescribeTrusts",
        "iam:ListPolicies",
        "organizations:DescribeOrganization",
        "organizations:DescribeAccount",
        "organizations:ListParents",
        "organizations:ListChildren",
        "organizations:ListAccounts",
        "organizations:ListRoots",
        "organizations:ListAccountsForParent",
        "organizations:ListOrganizationalUnitsForParent",
        "sso:DescribePermissionsPolicies",
        "sso:GetApplicationTemplate",
        "sso:GetApplicationInstance",
        "sso:GetPermissionSet",
        "sso:GetProfile",
        "sso:GetPermissionsPolicy",
        "sso:GetSSOStatus",
        "sso:GetSSOConfiguration",
        "sso:GetTrust",
        "sso:ListPermissionSets",
        "sso:ListDirectoryAssociations",
        "sso:ListProfiles",
        "sso:ListApplicationInstances",
        "sso:ListApplicationInstanceCertificates",
        "sso:ListApplicationTemplates",
        "sso:ListApplications",
        "sso:ListProfileAssociations",
        "sso:Search*",
        "sso-directory:DescribeDirectory"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AWSSSOReadOnly"
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "ds:DescribeTrusts",
      "iam:ListPolicies",
      "organizations:DescribeOrganization",
      "organizations:DescribeAccount",
      "organizations:ListParents",
      "organizations:ListChildren",
      "organizations:ListAccounts",
      "organizations:ListRoots",
      "organizations:ListAccountsForParent",
      "organizations:ListOrganizationalUnitsForParent",
      "sso:DescribePermissionsPolicies",
      "sso:GetApplicationTemplate",
      "sso:GetApplicationInstance",
      "sso:GetPermissionSet",
      "sso:GetProfile",
      "sso:GetPermissionsPolicy",
      "sso:GetSSOStatus",
      "sso:GetSSOConfiguration",
      "sso:GetTrust",
      "sso:ListPermissionSets",
      "sso:ListDirectoryAssociations",
      "sso:ListProfiles",
      "sso:ListApplicationInstances",
      "sso:ListApplicationInstanceCertificates",
      "sso:ListApplicationTemplates",
      "sso:ListApplications",
      "sso:ListProfileAssociations",
      "sso:Search*",
      "sso-directory:DescribeDirectory"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AWSSSOReadOnly"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AcceptVpcPeeringConnection",
        "ec2:AcceptVpcEndpointConnections",
        "ec2:AllocateAddress",
        "ec2:AssignIpv6Addresses",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssociateAddress",
        "ec2:AssociateDhcpOptions",
        "ec2:AssociateRouteTable",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateVpcCidrBlock",
        "ec2:AttachClassicLinkVpc",
        "ec2:AttachInternetGateway",
        "ec2:AttachNetworkInterface",
        "ec2:AttachVpnGateway",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateCustomerGateway",
        "ec2:CreateDefaultSubnet",
        "ec2:CreateDefaultVpc",
        "ec2:CreateDhcpOptions",
        "ec2:CreateEgressOnlyInternetGateway",
        "ec2:CreateFlowLogs",
        "ec2:CreateInternetGateway",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkAcl",
        "ec2:CreateNetworkAcl",
        "ec2:CreateNetworkAclEntry",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpcEndpointConnectionNotification",
        "ec2:CreateVpcEndpointServiceConfiguration",
        "ec2:CreateVpcPeeringConnection",
        "ec2:CreateVpnConnection",
        "ec2:CreateVpnConnectionRoute",
        "ec2:CreateVpnGateway",
        "ec2:DeleteCustomerGateway",
        "ec2:DeleteDhcpOptions",
        "ec2:DeleteEgressOnlyInternetGateway",
        "ec2:DeleteFlowLogs",
        "ec2:DeleteInternetGateway",
        "ec2:DeleteNatGateway",
        "ec2:DeleteNetworkAcl",
        "ec2:DeleteNetworkAclEntry",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteSubnet",
        "ec2:DeleteTags",
        "ec2:DeleteVpc",
        "ec2:DeleteVpcEndpoints",
        "ec2:DeleteVpcEndpointConnectionNotifications",
        "ec2:DeleteVpcEndpointServiceConfigurations",
        "ec2:DeleteVpcPeeringConnection",
        "ec2:DeleteVpnConnection",
        "ec2:DeleteVpnConnectionRoute",
        "ec2:DeleteVpnGateway",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeEgressOnlyInternetGateways",
        "ec2:DescribeFlowLogs",
        "ec2:DescribeInstances",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeMovingAddresses",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeStaleSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeVpcClassicLinkDnsSupport",
        "ec2:DescribeVpcEndpointConnectionNotifications",
        "ec2:DescribeVpcEndpointConnections",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcEndpointServiceConfigurations",
        "ec2:DescribeVpcEndpointServicePermissions",
        "ec2:DescribeVpcEndpointServices",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpnGateways",
        "ec2:DetachClassicLinkVpc",
        "ec2:DetachInternetGateway",
        "ec2:DetachNetworkInterface",
        "ec2:DetachVpnGateway",
        "ec2:DisableVgwRoutePropagation",
        "ec2:DisableVpcClassicLink",
        "ec2:DisableVpcClassicLinkDnsSupport",
        "ec2:DisassociateAddress",
        "ec2:DisassociateRouteTable",
        "ec2:DisassociateSubnetCidrBlock",
        "ec2:DisassociateVpcCidrBlock",
        "ec2:EnableVgwRoutePropagation",
        "ec2:EnableVpcClassicLink",
        "ec2:EnableVpcClassicLinkDnsSupport",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:ModifyVpcEndpoint",
        "ec2:ModifyVpcEndpointConnectionNotification",
        "ec2:ModifyVpcEndpointServiceConfiguration",
        "ec2:ModifyVpcEndpointServicePermissions",
        "ec2:ModifyVpcPeeringConnectionOptions",
        "ec2:ModifyVpcTenancy",
        "ec2:MoveAddressToVpc",
        "ec2:RejectVpcEndpointConnections",
        "ec2:RejectVpcPeeringConnection",
        "ec2:ReleaseAddress",
        "ec2:ReplaceNetworkAclAssociation",
        "ec2:ReplaceNetworkAclEntry",
        "ec2:ReplaceRoute",
        "ec2:ReplaceRouteTableAssociation",
        "ec2:ResetNetworkInterfaceAttribute",
        "ec2:RestoreAddressToClassic",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:UnassignIpv6Addresses",
        "ec2:UnassignPrivateIpAddresses",
        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
        "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AcceptVpcPeeringConnection",
      "ec2:AcceptVpcEndpointConnections",
      "ec2:AllocateAddress",
      "ec2:AssignIpv6Addresses",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssociateAddress",
      "ec2:AssociateDhcpOptions",
      "ec2:AssociateRouteTable",
      "ec2:AssociateSubnetCidrBlock",
      "ec2:AssociateVpcCidrBlock",
      "ec2:AttachClassicLinkVpc",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:AttachVpnGateway",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDefaultSubnet",
      "ec2:CreateDefaultVpc",
      "ec2:CreateDhcpOptions",
      "ec2:CreateEgressOnlyInternetGateway",
      "ec2:CreateFlowLogs",
      "ec2:CreateInternetGateway",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkAcl",
      "ec2:CreateNetworkAcl",
      "ec2:CreateNetworkAclEntry",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:CreateVpcEndpointConnectionNotification",
      "ec2:CreateVpcEndpointServiceConfiguration",
      "ec2:CreateVpcPeeringConnection",
      "ec2:CreateVpnConnection",
      "ec2:CreateVpnConnectionRoute",
      "ec2:CreateVpnGateway",
      "ec2:DeleteCustomerGateway",
      "ec2:DeleteDhcpOptions",
      "ec2:DeleteEgressOnlyInternetGateway",
      "ec2:DeleteFlowLogs",
      "ec2:DeleteInternetGateway",
      "ec2:DeleteNatGateway",
      "ec2:DeleteNetworkAcl",
      "ec2:DeleteNetworkAclEntry",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSubnet",
      "ec2:DeleteTags",
      "ec2:DeleteVpc",
      "ec2:DeleteVpcEndpoints",
      "ec2:DeleteVpcEndpointConnectionNotifications",
      "ec2:DeleteVpcEndpointServiceConfigurations",
      "ec2:DeleteVpcPeeringConnection",
      "ec2:DeleteVpnConnection",
      "ec2:DeleteVpnConnectionRoute",
      "ec2:DeleteVpnGateway",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeEgressOnlyInternetGateways",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeInstances",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeVpcClassicLinkDnsSupport",
      "ec2:DescribeVpcEndpointConnectionNotifications",
      "ec2:DescribeVpcEndpointConnections",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcEndpointServiceConfigurations",
      "ec2:DescribeVpcEndpointServicePermissions",
      "ec2:DescribeVpcEndpointServices",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways",
      "ec2:DetachClassicLinkVpc",
      "ec2:DetachInternetGateway",
      "ec2:DetachNetworkInterface",
      "ec2:DetachVpnGateway",
      "ec2:DisableVgwRoutePropagation",
      "ec2:DisableVpcClassicLink",
      "ec2:DisableVpcClassicLinkDnsSupport",
      "ec2:DisassociateAddress",
      "ec2:DisassociateRouteTable",
      "ec2:DisassociateSubnetCidrBlock",
      "ec2:DisassociateVpcCidrBlock",
      "ec2:EnableVgwRoutePropagation",
      "ec2:EnableVpcClassicLink",
      "ec2:EnableVpcClassicLinkDnsSupport",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ModifyVpcEndpoint",
      "ec2:ModifyVpcEndpointConnectionNotification",
      "ec2:ModifyVpcEndpointServiceConfiguration",
      "ec2:ModifyVpcEndpointServicePermissions",
      "ec2:ModifyVpcPeeringConnectionOptions",
      "ec2:ModifyVpcTenancy",
      "ec2:MoveAddressToVpc",
      "ec2:RejectVpcEndpointConnections",
      "ec2:RejectVpcPeeringConnection",
      "ec2:ReleaseAddress",
      "ec2:ReplaceNetworkAclAssociation",
      "ec2:ReplaceNetworkAclEntry",
      "ec2:ReplaceRoute",
      "ec2:ReplaceRouteTableAssociation",
      "ec2:ResetNetworkInterfaceAttribute",
      "ec2:RestoreAddressToClassic",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:UnassignIpv6Addresses",
      "ec2:UnassignPrivateIpAddresses",
      "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm-pca:IssueCertificate"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "acm-pca:TemplateArn": [
            "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
          ]
        }
      }
    },
    {
      "Action": [
        "acm-pca:IssueCertificate"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Deny",
      "Condition": {
        "StringNotLike": {
          "acm-pca:TemplateArn": [
            "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
          ]
        }
      }
    },
    {
      "Action": [
        "acm-pca:RevokeCertificate",
        "acm-pca:GetCertificate",
        "acm-pca:ListPermissions"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "acm-pca:ListCertificateAuthorities"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm-pca:IssueCertificate"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "acm-pca:TemplateArn": [
          "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
        ]
      }
    }
  },
  {
    "Action": [
      "acm-pca:IssueCertificate"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Deny",
    "Condition": {
      "StringNotLike": {
        "acm-pca:TemplateArn": [
          "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
        ]
      }
    }
  },
  {
    "Action": [
      "acm-pca:RevokeCertificate",
      "acm-pca:GetCertificate",
      "acm-pca:ListPermissions"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "acm-pca:ListCertificateAuthorities"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appsync:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "appsync.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "appsync:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "appsync.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeImages",
        "ec2:DescribeSubnets",
        "ec2:RequestSpotInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:RunInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "spot.amazonaws.com"
        }
      },
      "Sid": "EC2SpotManagement"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "ec2.amazonaws.com",
            "ec2.amazonaws.com.cn"
          ]
        }
      }
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*",
        "arn:aws:ec2:*:*:spot-instances-request/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:ec2:fleet-id": "*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeImages",
      "ec2:DescribeSubnets",
      "ec2:RequestSpotInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:RunInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "spot.amazonaws.com"
      }
    },
    "Sid": "EC2SpotManagement"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "ec2.amazonaws.com",
          "ec2.amazonaws.com.cn"
        ]
      }
    }
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*",
      "arn:aws:ec2:*:*:spot-instances-request/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:ec2:fleet-id": "*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:GetHostedZone",
        "route53:ListHostedZonesByName",
        "route53:CreateHostedZone",
        "route53:DeleteHostedZone",
        "route53:ChangeResourceRecordSets",
        "route53:CreateHealthCheck",
        "route53:GetHealthCheck",
        "route53:DeleteHealthCheck",
        "route53:UpdateHealthCheck",
        "ec2:DescribeVpcs",
        "ec2:DescribeRegions",
        "servicediscovery:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:GetHostedZone",
      "route53:ListHostedZonesByName",
      "route53:CreateHostedZone",
      "route53:DeleteHostedZone",
      "route53:ChangeResourceRecordSets",
      "route53:CreateHealthCheck",
      "route53:GetHealthCheck",
      "route53:DeleteHealthCheck",
      "route53:UpdateHealthCheck",
      "ec2:DescribeVpcs",
      "ec2:DescribeRegions",
      "servicediscovery:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "importexport:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "importexport:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:Scan",
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:DescribeTimeToLive",
        "application-autoscaling:RegisterScalableTarget",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:DescribeScalingPolicies"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "dynamodb.application-autoscaling.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:GetItem",
      "dynamodb:PutItem",
      "dynamodb:UpdateItem",
      "dynamodb:DeleteItem",
      "dynamodb:DescribeTable",
      "dynamodb:Scan",
      "dynamodb:DescribeStream",
      "dynamodb:GetRecords",
      "dynamodb:GetShardIterator",
      "dynamodb:DescribeTimeToLive",
      "application-autoscaling:RegisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:DescribeScalingPolicies"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": [
          "dynamodb.application-autoscaling.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mechanicalturk:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mechanicalturk:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetRepositoryPolicy",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecr:DescribeImages",
        "ecr:BatchGetImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload",
        "ecr:PutImage"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:DescribeImages",
      "ecr:BatchGetImage",
      "ecr:InitiateLayerUpload",
      "ecr:UploadLayerPart",
      "ecr:CompleteLayerUpload",
      "ecr:PutImage"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sso-directory:Search*",
        "sso-directory:Describe*",
        "sso-directory:List*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AWSSSODirectoryReadOnly"
    }
  ]
}
[
  {
    "Action": [
      "sso-directory:Search*",
      "sso-directory:Describe*",
      "sso-directory:List*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AWSSSODirectoryReadOnly"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:Add*",
        "machinelearning:Create*",
        "machinelearning:Delete*",
        "machinelearning:Describe*",
        "machinelearning:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:Add*",
      "machinelearning:Create*",
      "machinelearning:Delete*",
      "machinelearning:Describe*",
      "machinelearning:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesisvideo:Describe*",
        "kinesisvideo:Get*",
        "kinesisvideo:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kinesisvideo:Describe*",
      "kinesisvideo:Get*",
      "kinesisvideo:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:GetBucketLocation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudtrail:GetTrailStatus",
        "cloudtrail:DescribeTrails",
        "cloudtrail:LookupEvents",
        "cloudtrail:ListTags",
        "cloudtrail:ListPublicKeys",
        "cloudtrail:GetEventSelectors",
        "s3:ListAllMyBuckets",
        "kms:ListAliases",
        "lambda:ListFunctions"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject",
      "s3:GetBucketLocation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudtrail:GetTrailStatus",
      "cloudtrail:DescribeTrails",
      "cloudtrail:LookupEvents",
      "cloudtrail:ListTags",
      "cloudtrail:ListPublicKeys",
      "cloudtrail:GetEventSelectors",
      "s3:ListAllMyBuckets",
      "kms:ListAliases",
      "lambda:ListFunctions"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:PutRecord",
        "firehose:PutRecordBatch"
      ],
      "Resource": [
        "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "firehose:PutRecord",
      "firehose:PutRecordBatch"
    ],
    "Resource": [
      "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:*"
    ],
    "Resource": "arn:aws:logs:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": "arn:aws:s3:::*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:*",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSubnetGroups",
        "iam:ListRoles",
        "iam:ListRolePolicies",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeRouteTables",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeInstances",
        "ec2:DescribeImages",
        "ec2:CreateNetworkInterface",
        "ec2:AttachNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeNetworkInterfaces",
        "rds:DescribeDBInstances",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:GetBucketAcl",
        "s3:GetBucketLocation",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplateSummary",
        "dynamodb:ListTables",
        "kms:ListAliases",
        "kms:DescribeKey",
        "sagemaker:ListNotebookInstances",
        "sagemaker:ListNotebookInstanceLifecycleConfigs",
        "cloudformation:ListStacks",
        "cloudwatch:GetMetricData",
        "cloudwatch:ListDashboards"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*/*",
        "arn:aws:s3:::*/*aws-glue-*/*",
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:GetLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:/aws-glue/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sagemaker:CreatePresignedNotebookInstanceUrl",
        "sagemaker:CreateNotebookInstance",
        "sagemaker:DeleteNotebookInstance",
        "sagemaker:DescribeNotebookInstance",
        "sagemaker:DescribeNotebookInstanceLifecycleConfig",
        "sagemaker:DeleteNotebookInstanceLifecycleConfig",
        "sagemaker:StartNotebookInstance",
        "sagemaker:CreateNotebookInstanceLifecycleConfig",
        "sagemaker:StopNotebookInstance",
        "sagemaker:UpdateNotebookInstance",
        "sagemaker:ListTags"
      ],
      "Resource": "arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:RunInstances"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*",
        "arn:aws:ec2:*:*:key-pair/*",
        "arn:aws:ec2:*:*:image/*",
        "arn:aws:ec2:*:*:security-group/*",
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:subnet/*",
        "arn:aws:ec2:*:*:volume/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances",
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
        },
        "StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
        }
      }
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "aws:TagKeys": "aws-glue-*"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "glue.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ec2.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "sagemaker.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "glue.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "glue:*",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSubnetGroups",
      "iam:ListRoles",
      "iam:ListRolePolicies",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListAttachedRolePolicies",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeRouteTables",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeInstances",
      "ec2:DescribeImages",
      "ec2:CreateNetworkInterface",
      "ec2:AttachNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeNetworkInterfaces",
      "rds:DescribeDBInstances",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:GetBucketAcl",
      "s3:GetBucketLocation",
      "cloudformation:DescribeStacks",
      "cloudformation:GetTemplateSummary",
      "dynamodb:ListTables",
      "kms:ListAliases",
      "kms:DescribeKey",
      "sagemaker:ListNotebookInstances",
      "sagemaker:ListNotebookInstanceLifecycleConfigs",
      "cloudformation:ListStacks",
      "cloudwatch:GetMetricData",
      "cloudwatch:ListDashboards"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*/*",
      "arn:aws:s3:::*/*aws-glue-*/*",
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:GetLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:/aws-glue/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sagemaker:CreatePresignedNotebookInstanceUrl",
      "sagemaker:CreateNotebookInstance",
      "sagemaker:DeleteNotebookInstance",
      "sagemaker:DescribeNotebookInstance",
      "sagemaker:DescribeNotebookInstanceLifecycleConfig",
      "sagemaker:DeleteNotebookInstanceLifecycleConfig",
      "sagemaker:StartNotebookInstance",
      "sagemaker:CreateNotebookInstanceLifecycleConfig",
      "sagemaker:StopNotebookInstance",
      "sagemaker:UpdateNotebookInstance",
      "sagemaker:ListTags"
    ],
    "Resource": "arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:RunInstances"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*",
      "arn:aws:ec2:*:*:key-pair/*",
      "arn:aws:ec2:*:*:image/*",
      "arn:aws:ec2:*:*:security-group/*",
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:subnet/*",
      "arn:aws:ec2:*:*:volume/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances",
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
      },
      "StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
      }
    }
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "aws:TagKeys": "aws-glue-*"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "glue.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ec2.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "sagemaker.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "glue.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kafka:*",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "kms:DescribeKey",
        "kms:CreateGrant"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "kafka.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:AttachRolePolicy",
        "iam:PutRolePolicy"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kafka:*",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeSecurityGroups",
      "kms:DescribeKey",
      "kms:CreateGrant"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "kafka.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:AttachRolePolicy",
      "iam:PutRolePolicy"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "dynamodb:PutItem",
      "kinesis:PutRecord",
      "iot:Publish",
      "s3:PutObject",
      "sns:Publish",
      "sqs:SendMessage*",
      "cloudwatch:SetAlarmState",
      "cloudwatch:PutMetricData",
      "es:ESHttpPut",
      "firehose:PutRecord"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": [
    "dynamodb:PutItem",
    "kinesis:PutRecord",
    "iot:Publish",
    "s3:PutObject",
    "sns:Publish",
    "sqs:SendMessage*",
    "cloudwatch:SetAlarmState",
    "cloudwatch:PutMetricData",
    "es:ESHttpPut",
    "firehose:PutRecord"
  ],
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "iam:ListAttachedRolePolicies",
        "eks:UpdateClusterVersion"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:vpc/*",
        "arn:aws:ec2:*:*:subnet/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "route53:AssociateVPCWithHostedZone",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "logs:CreateLogGroup",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*",
      "Effect": "Allow"
    },
    {
      "Action": "logs:PutLogEvents",
      "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeInstances",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "iam:ListAttachedRolePolicies",
      "eks:UpdateClusterVersion"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:vpc/*",
      "arn:aws:ec2:*:*:subnet/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "route53:AssociateVPCWithHostedZone",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "logs:CreateLogGroup",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:DescribeLogStreams"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*",
    "Effect": "Allow"
  },
  {
    "Action": "logs:PutLogEvents",
    "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "redshift:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "redshift:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "Stmt1480452973134"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "Stmt1480452973134"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mq:Describe*",
        "mq:List*",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mq:Describe*",
      "mq:List*",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::import-to-ec2-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:ModifySnapshotAttribute",
        "ec2:CopySnapshot",
        "ec2:RegisterImage",
        "ec2:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::import-to-ec2-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:ModifySnapshotAttribute",
      "ec2:CopySnapshot",
      "ec2:RegisterImage",
      "ec2:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codepipeline:AcknowledgeJob",
        "codepipeline:GetJobDetails",
        "codepipeline:PollForJobs",
        "codepipeline:PutJobFailureResult",
        "codepipeline:PutJobSuccessResult"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codepipeline:AcknowledgeJob",
      "codepipeline:GetJobDetails",
      "codepipeline:PollForJobs",
      "codepipeline:PutJobFailureResult",
      "codepipeline:PutJobSuccessResult"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sqs:ReceiveMessage",
      "sqs:DeleteMessage",
      "sqs:GetQueueAttributes",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:RunInstances",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeInstances",
        "cloudformation:CreateStack",
        "cloudformation:DescribeStacks",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances",
        "ec2:DeleteSecurityGroup",
        "ec2:AuthorizeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:DeleteStack"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": "arn:aws:ec2:*:*:instance/*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "aws:RequestTag/Name": "aws-cloud9-*"
        }
      }
    },
    {
      "Action": [
        "ec2:StartInstances",
        "ec2:StopInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:RunInstances",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeInstances",
      "cloudformation:CreateStack",
      "cloudformation:DescribeStacks",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances",
      "ec2:DeleteSecurityGroup",
      "ec2:AuthorizeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:DeleteStack"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": "arn:aws:ec2:*:*:instance/*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "aws:RequestTag/Name": "aws-cloud9-*"
      }
    }
  },
  {
    "Action": [
      "ec2:StartInstances",
      "ec2:StopInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecs:DescribeServices",
        "ecs:UpdateService",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecs:DescribeServices",
      "ecs:UpdateService",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "opsworks:DescribeStackProvisioningParameters",
        "opsworks:DescribeStacks",
        "opsworks:RegisterInstance"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "opsworks:DescribeStackProvisioningParameters",
      "opsworks:DescribeStacks",
      "opsworks:RegisterInstance"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "clouddirectory:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "clouddirectory:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "storagegateway:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots",
        "ec2:DeleteSnapshot"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "storagegateway:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots",
      "ec2:DeleteSnapshot"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotevents:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotevents:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lex:GetBot",
        "lex:GetBotAlias",
        "lex:GetBotAliases",
        "lex:GetBots",
        "lex:GetBotChannelAssociation",
        "lex:GetBotChannelAssociations",
        "lex:GetBotVersions",
        "lex:GetBuiltinIntent",
        "lex:GetBuiltinIntents",
        "lex:GetBuiltinSlotTypes",
        "lex:GetIntent",
        "lex:GetIntents",
        "lex:GetIntentVersions",
        "lex:GetSlotType",
        "lex:GetSlotTypes",
        "lex:GetSlotTypeVersions",
        "lex:GetUtterancesView"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lex:GetBot",
      "lex:GetBotAlias",
      "lex:GetBotAliases",
      "lex:GetBots",
      "lex:GetBotChannelAssociation",
      "lex:GetBotChannelAssociations",
      "lex:GetBotVersions",
      "lex:GetBuiltinIntent",
      "lex:GetBuiltinIntents",
      "lex:GetBuiltinSlotTypes",
      "lex:GetIntent",
      "lex:GetIntents",
      "lex:GetIntentVersions",
      "lex:GetSlotType",
      "lex:GetSlotTypes",
      "lex:GetSlotTypeVersions",
      "lex:GetUtterancesView"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "organizations:ListAccounts",
        "organizations:ListAccountsForParent",
        "organizations:ListChildren",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListRoots",
        "organizations:ListParents"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "organizations:DisableAWSServiceAccess"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLike": {
          "organizations:ServicePrincipal": [
            "tagpolicies.tag.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "organizations:ListAccounts",
      "organizations:ListAccountsForParent",
      "organizations:ListChildren",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListRoots",
      "organizations:ListParents"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "organizations:DisableAWSServiceAccess"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLike": {
        "organizations:ServicePrincipal": [
          "tagpolicies.tag.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "chime:ListAccounts",
        "chime:GetAccount",
        "chime:GetAccountSettings",
        "chime:UpdateAccountSettings",
        "chime:ListUsers",
        "chime:GetUser",
        "chime:GetUserByEmail",
        "chime:InviteUsers",
        "chime:SuspendUsers",
        "chime:ActivateUsers",
        "chime:UpdateUserLicenses",
        "chime:ResetPersonalPIN",
        "chime:LogoutUser",
        "chime:ListDomains",
        "chime:GetDomain",
        "chime:ListDirectories",
        "chime:ListGroups",
        "chime:SubmitSupportRequest",
        "chime:ListDelegates",
        "chime:ListAccountUsageReportData",
        "chime:GetMeetingDetail",
        "chime:ListMeetingEvents",
        "chime:ListMeetingsReportData",
        "chime:GetUserActivityReportData",
        "chime:UpdateUser",
        "chime:BatchUpdateUser",
        "chime:BatchSuspendUser",
        "chime:BatchUnsuspendUser",
        "chime:AssociatePhoneNumberWithUser",
        "chime:DisassociatePhoneNumberFromUser",
        "chime:GetPhoneNumber",
        "chime:ListPhoneNumbers",
        "chime:GetUserSettings",
        "chime:UpdateUserSettings"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "chime:ListAccounts",
      "chime:GetAccount",
      "chime:GetAccountSettings",
      "chime:UpdateAccountSettings",
      "chime:ListUsers",
      "chime:GetUser",
      "chime:GetUserByEmail",
      "chime:InviteUsers",
      "chime:SuspendUsers",
      "chime:ActivateUsers",
      "chime:UpdateUserLicenses",
      "chime:ResetPersonalPIN",
      "chime:LogoutUser",
      "chime:ListDomains",
      "chime:GetDomain",
      "chime:ListDirectories",
      "chime:ListGroups",
      "chime:SubmitSupportRequest",
      "chime:ListDelegates",
      "chime:ListAccountUsageReportData",
      "chime:GetMeetingDetail",
      "chime:ListMeetingEvents",
      "chime:ListMeetingsReportData",
      "chime:GetUserActivityReportData",
      "chime:UpdateUser",
      "chime:BatchUpdateUser",
      "chime:BatchSuspendUser",
      "chime:BatchUnsuspendUser",
      "chime:AssociatePhoneNumberWithUser",
      "chime:DisassociatePhoneNumberFromUser",
      "chime:GetPhoneNumber",
      "chime:ListPhoneNumbers",
      "chime:GetUserSettings",
      "chime:UpdateUserSettings"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kafka:Describe*",
        "kafka:List*",
        "kafka:Get*",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kafka:Describe*",
      "kafka:List*",
      "kafka:Get*",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "datasync:*",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:ModifyNetworkInterfaceAttribute",
        "elasticfilesystem:DescribeFileSystems",
        "elasticfilesystem:DescribeMountTargets",
        "iam:GetRole",
        "iam:ListRoles",
        "logs:CreateLogGroup",
        "logs:DescribeLogGroups",
        "s3:ListAllMyBuckets",
        "s3:ListBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "datasync.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "datasync:*",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:ModifyNetworkInterfaceAttribute",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeMountTargets",
      "iam:GetRole",
      "iam:ListRoles",
      "logs:CreateLogGroup",
      "logs:DescribeLogGroups",
      "s3:ListAllMyBuckets",
      "s3:ListBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "datasync.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iotanalytics:ExecuteQuery",
      "Resource": "arn:aws:iotanalytics:*:*:datastore-index/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "greengrass:CreateCoreDefinitionVersion",
        "greengrass:CreateDeployment",
        "greengrass:CreateFunctionDefinition",
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:CreateGroupVersion",
        "greengrass:CreateLoggerDefinition",
        "greengrass:CreateLoggerDefinitionVersion",
        "greengrass:CreateResourceDefinition",
        "greengrass:CreateResourceDefinitionVersion",
        "greengrass:GetAssociatedRole",
        "greengrass:GetCoreDefinition",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetFunctionDefinition",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:GetGroup",
        "greengrass:GetGroupVersion",
        "greengrass:GetLoggerDefinition",
        "greengrass:GetLoggerDefinitionVersion",
        "greengrass:GetResourceDefinition",
        "greengrass:GetResourceDefinitionVersion",
        "greengrass:ListCoreDefinitions",
        "greengrass:UpdateCoreDefinition",
        "greengrass:UpdateFunctionDefinition",
        "greengrass:UpdateLoggerDefinition",
        "greengrass:UpdateResourceDefinition"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:CreateAlias",
        "lambda:CreateFunction",
        "lambda:GetFunction",
        "lambda:ListVersionsByFunction",
        "lambda:UpdateFunctionCode",
        "lambda:PublishVersion",
        "lambda:UpdateAlias"
      ],
      "Resource": "arn:aws:lambda:*:*:function:AWSIoTSiteWise*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iot:GetThingShadow",
        "iot:UpdateThingShadow"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "iotanalytics:ExecuteQuery",
    "Resource": "arn:aws:iotanalytics:*:*:datastore-index/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "greengrass:CreateCoreDefinitionVersion",
      "greengrass:CreateDeployment",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateLoggerDefinition",
      "greengrass:CreateLoggerDefinitionVersion",
      "greengrass:CreateResourceDefinition",
      "greengrass:CreateResourceDefinitionVersion",
      "greengrass:GetAssociatedRole",
      "greengrass:GetCoreDefinition",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetFunctionDefinition",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetGroup",
      "greengrass:GetGroupVersion",
      "greengrass:GetLoggerDefinition",
      "greengrass:GetLoggerDefinitionVersion",
      "greengrass:GetResourceDefinition",
      "greengrass:GetResourceDefinitionVersion",
      "greengrass:ListCoreDefinitions",
      "greengrass:UpdateCoreDefinition",
      "greengrass:UpdateFunctionDefinition",
      "greengrass:UpdateLoggerDefinition",
      "greengrass:UpdateResourceDefinition"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:CreateAlias",
      "lambda:CreateFunction",
      "lambda:GetFunction",
      "lambda:ListVersionsByFunction",
      "lambda:UpdateFunctionCode",
      "lambda:PublishVersion",
      "lambda:UpdateAlias"
    ],
    "Resource": "arn:aws:lambda:*:*:function:AWSIoTSiteWise*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iot:GetThingShadow",
      "iot:UpdateThingShadow"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricData",
        "cloudwatch:ListMetrics",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:GetLogEvents",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "events:DescribeRule"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudFormation:CreateStack",
        "cloudFormation:UpdateStack",
        "cloudFormation:DeleteStack"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudFormation:DescribeStacks",
        "cloudFormation:ListStackResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "resource-groups:ListGroupResources",
        "resource-groups:GetGroupQuery",
        "resource-groups:GetGroup"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTargetHealth"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "autoscaling:DescribeAutoScalingGroups"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:PutParameter",
        "ssm:DeleteParameter",
        "ssm:AddTagsToResource",
        "ssm:RemoveTagsFromResource",
        "ssm:GetParameters"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:CreateAssociation",
        "ssm:UpdateAssociation",
        "ssm:DeleteAssociation",
        "ssm:DescribeAssociation"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*",
        "arn:aws:ssm:*:*:association/*",
        "arn:aws:ssm:*:*:managed-instance/*",
        "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure",
        "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
        "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:GetOpsItem",
        "ssm:CreateOpsItem",
        "ssm:DescribeOpsItems",
        "ssm:UpdateOpsItem",
        "ssm:DescribeInstanceInformation"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:DescribeDBInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:GetMetricData",
      "cloudwatch:ListMetrics",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:GetLogEvents",
      "logs:DescribeLogStreams",
      "logs:DescribeLogGroups"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "events:DescribeRule"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudFormation:CreateStack",
      "cloudFormation:UpdateStack",
      "cloudFormation:DeleteStack"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudFormation:DescribeStacks",
      "cloudFormation:ListStackResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "resource-groups:ListGroupResources",
      "resource-groups:GetGroupQuery",
      "resource-groups:GetGroup"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "autoscaling:DescribeAutoScalingGroups"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:PutParameter",
      "ssm:DeleteParameter",
      "ssm:AddTagsToResource",
      "ssm:RemoveTagsFromResource",
      "ssm:GetParameters"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:CreateAssociation",
      "ssm:UpdateAssociation",
      "ssm:DeleteAssociation",
      "ssm:DescribeAssociation"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*",
      "arn:aws:ssm:*:*:association/*",
      "arn:aws:ssm:*:*:managed-instance/*",
      "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure",
      "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
      "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:GetOpsItem",
      "ssm:CreateOpsItem",
      "ssm:DescribeOpsItems",
      "ssm:UpdateOpsItem",
      "ssm:DescribeInstanceInformation"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:DescribeDBInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:DescribeAccountLimits",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeLaunchConfigurations",
        "cloudformation:DescribeAccountLimits",
        "cloudformation:DescribeStacks",
        "cloudformation:ListStacks",
        "cloudfront:ListDistributions",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetTrailStatus",
        "dynamodb:DescribeLimits",
        "dynamodb:DescribeTable",
        "dynamodb:ListTables",
        "ec2:DescribeAddresses",
        "ec2:DescribeReservedInstances",
        "ec2:DescribeInstances",
        "ec2:DescribeVpcs",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeImages",
        "ec2:DescribeVolumes",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeReservedInstancesOfferings",
        "ec2:DescribeSnapshots",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpnGateways",
        "ec2:DescribeLaunchTemplateVersions",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeLoadBalancerPolicies",
        "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
        "elasticloadbalancing:DescribeLoadBalancers",
        "iam:GenerateCredentialReport",
        "iam:GetAccountPasswordPolicy",
        "iam:GetAccountSummary",
        "iam:GetCredentialReport",
        "iam:GetServerCertificate",
        "iam:ListServerCertificates",
        "kinesis:DescribeLimits",
        "rds:DescribeAccountAttributes",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSnapshots",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEngineDefaultParameters",
        "rds:DescribeEvents",
        "rds:DescribeOptionGroupOptions",
        "rds:DescribeOptionGroups",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribeReservedDBInstances",
        "rds:DescribeReservedDBInstancesOfferings",
        "rds:ListTagsForResource",
        "redshift:DescribeClusters",
        "redshift:DescribeReservedNodeOfferings",
        "redshift:DescribeReservedNodes",
        "route53:GetAccountLimit",
        "route53:GetHealthCheck",
        "route53:GetHostedZone",
        "route53:ListHealthChecks",
        "route53:ListHostedZones",
        "route53:ListHostedZonesByName",
        "route53:ListResourceRecordSets",
        "s3:GetBucketAcl",
        "s3:GetBucketPolicy",
        "s3:GetBucketPolicyStatus",
        "s3:GetBucketLocation",
        "s3:GetBucketLogging",
        "s3:GetBucketVersioning",
        "s3:GetBucketPublicAccessBlock",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "ses:GetSendQuota",
        "sqs:ListQueues",
        "cloudwatch:GetMetricStatistics",
        "ce:GetReservationPurchaseRecommendation"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:DescribeAccountLimits",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeLaunchConfigurations",
      "cloudformation:DescribeAccountLimits",
      "cloudformation:DescribeStacks",
      "cloudformation:ListStacks",
      "cloudfront:ListDistributions",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrailStatus",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeTable",
      "dynamodb:ListTables",
      "ec2:DescribeAddresses",
      "ec2:DescribeReservedInstances",
      "ec2:DescribeInstances",
      "ec2:DescribeVpcs",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeImages",
      "ec2:DescribeVolumes",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeReservedInstancesOfferings",
      "ec2:DescribeSnapshots",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways",
      "ec2:DescribeLaunchTemplateVersions",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
      "elasticloadbalancing:DescribeLoadBalancers",
      "iam:GenerateCredentialReport",
      "iam:GetAccountPasswordPolicy",
      "iam:GetAccountSummary",
      "iam:GetCredentialReport",
      "iam:GetServerCertificate",
      "iam:ListServerCertificates",
      "kinesis:DescribeLimits",
      "rds:DescribeAccountAttributes",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSnapshots",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeEvents",
      "rds:DescribeOptionGroupOptions",
      "rds:DescribeOptionGroups",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribeReservedDBInstances",
      "rds:DescribeReservedDBInstancesOfferings",
      "rds:ListTagsForResource",
      "redshift:DescribeClusters",
      "redshift:DescribeReservedNodeOfferings",
      "redshift:DescribeReservedNodes",
      "route53:GetAccountLimit",
      "route53:GetHealthCheck",
      "route53:GetHostedZone",
      "route53:ListHealthChecks",
      "route53:ListHostedZones",
      "route53:ListHostedZonesByName",
      "route53:ListResourceRecordSets",
      "s3:GetBucketAcl",
      "s3:GetBucketPolicy",
      "s3:GetBucketPolicyStatus",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketVersioning",
      "s3:GetBucketPublicAccessBlock",
      "s3:ListBucket",
      "s3:ListAllMyBuckets",
      "ses:GetSendQuota",
      "sqs:ListQueues",
      "cloudwatch:GetMetricStatistics",
      "ce:GetReservationPurchaseRecommendation"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:DescribeAuthorizer",
        "iot:DescribeCACertificate",
        "iot:DescribeCertificate",
        "iot:DescribeCertificateTag",
        "iot:DescribeDefaultAuthorizer",
        "iot:DescribeEndpoint",
        "iot:DescribeEventConfigurations",
        "iot:DescribeIndex",
        "iot:DescribeJob",
        "iot:DescribeJobExecution",
        "iot:DescribeRoleAlias",
        "iot:DescribeStream",
        "iot:DescribeThing",
        "iot:DescribeThingGroup",
        "iot:DescribeThingRegistrationTask",
        "iot:DescribeThingType",
        "iot:GetEffectivePolicies",
        "iot:GetIndexingConfiguration",
        "iot:GetJobDocument",
        "iot:GetLoggingOptions",
        "iot:GetOTAUpdate",
        "iot:GetPolicy",
        "iot:GetPolicyVersion",
        "iot:GetRegistrationCode",
        "iot:GetTopicRule",
        "iot:GetV2LoggingOptions",
        "iot:ListAttachedPolicies",
        "iot:ListAuthorizers",
        "iot:ListCACertificates",
        "iot:ListCertificates",
        "iot:ListCertificatesByCA",
        "iot:ListIndices",
        "iot:ListJobExecutionsForJob",
        "iot:ListJobExecutionsForThing",
        "iot:ListJobs",
        "iot:ListOTAUpdates",
        "iot:ListOutgoingCertificates",
        "iot:ListPolicies",
        "iot:ListPolicyPrincipals",
        "iot:ListPolicyVersions",
        "iot:ListPrincipalPolicies",
        "iot:ListPrincipalThings",
        "iot:ListRoleAliases",
        "iot:ListStreams",
        "iot:ListTargetsForPolicy",
        "iot:ListThingGroups",
        "iot:ListThingGroupsForThing",
        "iot:ListThingPrincipals",
        "iot:ListThingRegistrationTaskReports",
        "iot:ListThingRegistrationTasks",
        "iot:ListThings",
        "iot:ListThingsInThingGroup",
        "iot:ListThingTypes",
        "iot:ListTopicRules",
        "iot:ListV2LoggingLevels",
        "iot:SearchIndex",
        "iot:TestAuthorization",
        "iot:TestInvokeAuthorizer",
        "iot:DescribeAccountAuditConfiguration",
        "iot:DescribeAuditTask",
        "iot:ListAuditTasks",
        "iot:DescribeScheduledAudit",
        "iot:ListScheduledAudits",
        "iot:ListAuditFindings",
        "iot:DescribeSecurityProfile",
        "iot:ListSecurityProfiles",
        "iot:ListSecurityProfilesForTarget",
        "iot:ListTargetsForSecurityProfile",
        "iot:ListActiveViolations",
        "iot:ListViolationEvents",
        "iot:ValidateSecurityProfileBehaviors"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:DescribeAuthorizer",
      "iot:DescribeCACertificate",
      "iot:DescribeCertificate",
      "iot:DescribeCertificateTag",
      "iot:DescribeDefaultAuthorizer",
      "iot:DescribeEndpoint",
      "iot:DescribeEventConfigurations",
      "iot:DescribeIndex",
      "iot:DescribeJob",
      "iot:DescribeJobExecution",
      "iot:DescribeRoleAlias",
      "iot:DescribeStream",
      "iot:DescribeThing",
      "iot:DescribeThingGroup",
      "iot:DescribeThingRegistrationTask",
      "iot:DescribeThingType",
      "iot:GetEffectivePolicies",
      "iot:GetIndexingConfiguration",
      "iot:GetJobDocument",
      "iot:GetLoggingOptions",
      "iot:GetOTAUpdate",
      "iot:GetPolicy",
      "iot:GetPolicyVersion",
      "iot:GetRegistrationCode",
      "iot:GetTopicRule",
      "iot:GetV2LoggingOptions",
      "iot:ListAttachedPolicies",
      "iot:ListAuthorizers",
      "iot:ListCACertificates",
      "iot:ListCertificates",
      "iot:ListCertificatesByCA",
      "iot:ListIndices",
      "iot:ListJobExecutionsForJob",
      "iot:ListJobExecutionsForThing",
      "iot:ListJobs",
      "iot:ListOTAUpdates",
      "iot:ListOutgoingCertificates",
      "iot:ListPolicies",
      "iot:ListPolicyPrincipals",
      "iot:ListPolicyVersions",
      "iot:ListPrincipalPolicies",
      "iot:ListPrincipalThings",
      "iot:ListRoleAliases",
      "iot:ListStreams",
      "iot:ListTargetsForPolicy",
      "iot:ListThingGroups",
      "iot:ListThingGroupsForThing",
      "iot:ListThingPrincipals",
      "iot:ListThingRegistrationTaskReports",
      "iot:ListThingRegistrationTasks",
      "iot:ListThings",
      "iot:ListThingsInThingGroup",
      "iot:ListThingTypes",
      "iot:ListTopicRules",
      "iot:ListV2LoggingLevels",
      "iot:SearchIndex",
      "iot:TestAuthorization",
      "iot:TestInvokeAuthorizer",
      "iot:DescribeAccountAuditConfiguration",
      "iot:DescribeAuditTask",
      "iot:ListAuditTasks",
      "iot:DescribeScheduledAudit",
      "iot:ListScheduledAudits",
      "iot:ListAuditFindings",
      "iot:DescribeSecurityProfile",
      "iot:ListSecurityProfiles",
      "iot:ListSecurityProfilesForTarget",
      "iot:ListTargetsForSecurityProfile",
      "iot:ListActiveViolations",
      "iot:ListViolationEvents",
      "iot:ValidateSecurityProfileBehaviors"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ses:Describe*",
        "ses:Get*",
        "workmail:Describe*",
        "workmail:Get*",
        "workmail:List*",
        "workmail:Search*",
        "lambda:ListFunctions",
        "iam:ListRoles",
        "logs:DescribeLogGroups",
        "cloudwatch:GetMetricData"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ses:Describe*",
      "ses:Get*",
      "workmail:Describe*",
      "workmail:Get*",
      "workmail:List*",
      "workmail:Search*",
      "lambda:ListFunctions",
      "iam:ListRoles",
      "logs:DescribeLogGroups",
      "cloudwatch:GetMetricData"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DeleteNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DeleteNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:DescribeStream",
        "kinesis:DescribeStreamSummary",
        "kinesis:GetRecords",
        "kinesis:GetShardIterator",
        "kinesis:ListShards",
        "kinesis:ListStreams",
        "kinesis:SubscribeToShard",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:DescribeStream",
      "kinesis:DescribeStreamSummary",
      "kinesis:GetRecords",
      "kinesis:GetShardIterator",
      "kinesis:ListShards",
      "kinesis:ListStreams",
      "kinesis:SubscribeToShard",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "s3:GetObject",
      "s3:ListBucket",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::*Comprehend*",
      "arn:aws:s3:::*comprehend*"
    ],
    "Effect": "Allow"
  }
}
{
  "Action": [
    "s3:GetObject",
    "s3:ListBucket",
    "s3:PutObject"
  ],
  "Resource": [
    "arn:aws:s3:::*Comprehend*",
    "arn:aws:s3:::*comprehend*"
  ],
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:AddRoleToDBCluster",
        "rds:AddSourceIdentifierToSubscription",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:CopyDBClusterParameterGroup",
        "rds:CopyDBClusterSnapshot",
        "rds:CopyDBParameterGroup",
        "rds:CreateDBCluster",
        "rds:CreateDBClusterParameterGroup",
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBInstance",
        "rds:CreateDBParameterGroup",
        "rds:CreateDBSubnetGroup",
        "rds:CreateEventSubscription",
        "rds:DeleteDBCluster",
        "rds:DeleteDBClusterParameterGroup",
        "rds:DeleteDBClusterSnapshot",
        "rds:DeleteDBInstance",
        "rds:DeleteDBParameterGroup",
        "rds:DeleteDBSubnetGroup",
        "rds:DeleteEventSubscription",
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEngineDefaultClusterParameters",
        "rds:DescribeEngineDefaultParameters",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOptionGroups",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DescribeValidDBInstanceModifications",
        "rds:DownloadDBLogFilePortion",
        "rds:FailoverDBCluster",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBClusterParameterGroup",
        "rds:ModifyDBClusterSnapshotAttribute",
        "rds:ModifyDBInstance",
        "rds:ModifyDBParameterGroup",
        "rds:ModifyDBSubnetGroup",
        "rds:ModifyEventSubscription",
        "rds:PromoteReadReplicaDBCluster",
        "rds:RebootDBInstance",
        "rds:RemoveRoleFromDBCluster",
        "rds:RemoveSourceIdentifierFromSubscription",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBClusterParameterGroup",
        "rds:ResetDBParameterGroup",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "ec2:AllocateAddress",
        "ec2:AssignIpv6Addresses",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssociateAddress",
        "ec2:AssociateRouteTable",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateVpcCidrBlock",
        "ec2:AttachInternetGateway",
        "ec2:AttachNetworkInterface",
        "ec2:CreateCustomerGateway",
        "ec2:CreateDefaultSubnet",
        "ec2:CreateDefaultVpc",
        "ec2:CreateInternetGateway",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkInterface",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeInstances",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:ModifyVpcEndpoint",
        "kms:DescribeKey",
        "kms:ListAliases",
        "kms:ListKeyPolicies",
        "kms:ListKeys",
        "kms:ListKeysForService",
        "kms:ListRetirableGrants",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "rds.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:AddRoleToDBCluster",
      "rds:AddSourceIdentifierToSubscription",
      "rds:AddTagsToResource",
      "rds:ApplyPendingMaintenanceAction",
      "rds:CopyDBClusterParameterGroup",
      "rds:CopyDBClusterSnapshot",
      "rds:CopyDBParameterGroup",
      "rds:CreateDBCluster",
      "rds:CreateDBClusterParameterGroup",
      "rds:CreateDBClusterSnapshot",
      "rds:CreateDBInstance",
      "rds:CreateDBParameterGroup",
      "rds:CreateDBSubnetGroup",
      "rds:CreateEventSubscription",
      "rds:DeleteDBCluster",
      "rds:DeleteDBClusterParameterGroup",
      "rds:DeleteDBClusterSnapshot",
      "rds:DeleteDBInstance",
      "rds:DeleteDBParameterGroup",
      "rds:DeleteDBSubnetGroup",
      "rds:DeleteEventSubscription",
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEngineDefaultClusterParameters",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOptionGroups",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DescribeValidDBInstanceModifications",
      "rds:DownloadDBLogFilePortion",
      "rds:FailoverDBCluster",
      "rds:ListTagsForResource",
      "rds:ModifyDBCluster",
      "rds:ModifyDBClusterParameterGroup",
      "rds:ModifyDBClusterSnapshotAttribute",
      "rds:ModifyDBInstance",
      "rds:ModifyDBParameterGroup",
      "rds:ModifyDBSubnetGroup",
      "rds:ModifyEventSubscription",
      "rds:PromoteReadReplicaDBCluster",
      "rds:RebootDBInstance",
      "rds:RemoveRoleFromDBCluster",
      "rds:RemoveSourceIdentifierFromSubscription",
      "rds:RemoveTagsFromResource",
      "rds:ResetDBClusterParameterGroup",
      "rds:ResetDBParameterGroup",
      "rds:RestoreDBClusterFromSnapshot",
      "rds:RestoreDBClusterToPointInTime"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "ec2:AllocateAddress",
      "ec2:AssignIpv6Addresses",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssociateAddress",
      "ec2:AssociateRouteTable",
      "ec2:AssociateSubnetCidrBlock",
      "ec2:AssociateVpcCidrBlock",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDefaultSubnet",
      "ec2:CreateDefaultVpc",
      "ec2:CreateInternetGateway",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkInterface",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeInstances",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ModifyVpcEndpoint",
      "kms:DescribeKey",
      "kms:ListAliases",
      "kms:ListKeyPolicies",
      "kms:ListKeys",
      "kms:ListKeysForService",
      "kms:ListRetirableGrants",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "rds.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "tag:getResources",
        "tag:getTagKeys",
        "tag:getTagValues",
        "resource-groups:Get*",
        "resource-groups:List*",
        "resource-groups:Search*",
        "cloudformation:DescribeStacks",
        "cloudformation:ListStackResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "tag:getResources",
      "tag:getTagKeys",
      "tag:getTagValues",
      "resource-groups:Get*",
      "resource-groups:List*",
      "resource-groups:Search*",
      "cloudformation:DescribeStacks",
      "cloudformation:ListStackResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:AmazonRekognition*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesisvideo:GetDataEndpoint",
        "kinesisvideo:GetMedia"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:AmazonRekognition*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesisvideo:GetDataEndpoint",
      "kinesisvideo:GetMedia"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:Automation*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateImage",
        "ec2:CopyImage",
        "ec2:DeregisterImage",
        "ec2:DescribeImages",
        "ec2:DeleteSnapshot",
        "ec2:StartInstances",
        "ec2:RunInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DescribeTags",
        "cloudformation:CreateStack",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStacks",
        "cloudformation:UpdateStack",
        "cloudformation:DeleteStack"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": [
        "arn:aws:sns:*:*:Automation*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:Automation*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateImage",
      "ec2:CopyImage",
      "ec2:DeregisterImage",
      "ec2:DescribeImages",
      "ec2:DeleteSnapshot",
      "ec2:StartInstances",
      "ec2:RunInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:CreateTags",
      "ec2:DeleteTags",
      "ec2:DescribeTags",
      "cloudformation:CreateStack",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStacks",
      "cloudformation:UpdateStack",
      "cloudformation:DeleteStack"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": [
      "arn:aws:sns:*:*:Automation*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "comprehend:DetectDominantLanguage",
        "comprehend:BatchDetectDominantLanguage",
        "comprehend:DetectEntities",
        "comprehend:BatchDetectEntities",
        "comprehend:DetectKeyPhrases",
        "comprehend:BatchDetectKeyPhrases",
        "comprehend:DetectSentiment",
        "comprehend:BatchDetectSentiment",
        "comprehend:DetectSyntax",
        "comprehend:BatchDetectSyntax",
        "comprehend:DescribeTopicsDetectionJob",
        "comprehend:ListTopicsDetectionJobs",
        "comprehend:DescribeDominantLanguageDetectionJob",
        "comprehend:ListDominantLanguageDetectionJobs",
        "comprehend:DescribeEntitiesDetectionJob",
        "comprehend:ListEntitiesDetectionJobs",
        "comprehend:DescribeKeyPhrasesDetectionJob",
        "comprehend:ListKeyPhrasesDetectionJobs",
        "comprehend:DescribeSentimentDetectionJob",
        "comprehend:ListSentimentDetectionJobs",
        "comprehend:DescribeDocumentClassifier",
        "comprehend:ListDocumentClassifiers",
        "comprehend:DescribeDocumentClassificationJob",
        "comprehend:ListDocumentClassificationJobs",
        "comprehend:DescribeEntityRecognizer",
        "comprehend:ListEntityRecognizers"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "comprehend:DetectDominantLanguage",
      "comprehend:BatchDetectDominantLanguage",
      "comprehend:DetectEntities",
      "comprehend:BatchDetectEntities",
      "comprehend:DetectKeyPhrases",
      "comprehend:BatchDetectKeyPhrases",
      "comprehend:DetectSentiment",
      "comprehend:BatchDetectSentiment",
      "comprehend:DetectSyntax",
      "comprehend:BatchDetectSyntax",
      "comprehend:DescribeTopicsDetectionJob",
      "comprehend:ListTopicsDetectionJobs",
      "comprehend:DescribeDominantLanguageDetectionJob",
      "comprehend:ListDominantLanguageDetectionJobs",
      "comprehend:DescribeEntitiesDetectionJob",
      "comprehend:ListEntitiesDetectionJobs",
      "comprehend:DescribeKeyPhrasesDetectionJob",
      "comprehend:ListKeyPhrasesDetectionJobs",
      "comprehend:DescribeSentimentDetectionJob",
      "comprehend:ListSentimentDetectionJobs",
      "comprehend:DescribeDocumentClassifier",
      "comprehend:ListDocumentClassifiers",
      "comprehend:DescribeDocumentClassificationJob",
      "comprehend:ListDocumentClassificationJobs",
      "comprehend:DescribeEntityRecognizer",
      "comprehend:ListEntityRecognizers"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "states:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:ListRoles",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*",
      "Effect": "Allow"
    },
    {
      "Action": "lambda:ListFunctions",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "states:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:ListRoles",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*",
    "Effect": "Allow"
  },
  {
    "Action": "lambda:ListFunctions",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotanalytics:ListDatasets",
        "iotanalytics:DescribeDataset",
        "iotanalytics:GetDatasetContent"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotanalytics:ListDatasets",
      "iotanalytics:DescribeDataset",
      "iotanalytics:GetDatasetContent"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codebuild:BatchGet*",
        "codebuild:Get*",
        "codebuild:List*",
        "codecommit:GetBranch",
        "codecommit:GetCommit",
        "codecommit:GetRepository",
        "cloudwatch:GetMetricStatistics",
        "events:DescribeRule",
        "events:ListTargetsByRule",
        "events:ListRuleNamesByTarget",
        "logs:GetLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codebuild:BatchGet*",
      "codebuild:Get*",
      "codebuild:List*",
      "codecommit:GetBranch",
      "codecommit:GetCommit",
      "codecommit:GetRepository",
      "cloudwatch:GetMetricStatistics",
      "events:DescribeRule",
      "events:ListTargetsByRule",
      "events:ListRuleNamesByTarget",
      "logs:GetLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "polly:SynthesizeSpeech"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "polly:SynthesizeSpeech"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "macie:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "macie.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "macie:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "macie.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "machinelearning:CreateRealtimeEndpoint",
        "machinelearning:DeleteRealtimeEndpoint"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "machinelearning:CreateRealtimeEndpoint",
      "machinelearning:DeleteRealtimeEndpoint"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kinesis:PutRecord"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsInvocationAccess"
    }
  ]
}
[
  {
    "Action": [
      "kinesis:PutRecord"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsInvocationAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:ListCertificates",
        "cloudfront:Get*",
        "cloudfront:List*",
        "iam:ListServerCertificates",
        "route53:List*",
        "waf:ListWebACLs",
        "waf:GetWebACL"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:ListCertificates",
      "cloudfront:Get*",
      "cloudfront:List*",
      "iam:ListServerCertificates",
      "route53:List*",
      "waf:ListWebACLs",
      "waf:GetWebACL"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:CreateThing",
        "iot:DeleteThing",
        "iot:DeleteThingShadow",
        "iot:DescribeThing",
        "iot:GetThingShadow",
        "iot:UpdateThing",
        "iot:UpdateThingShadow"
      ],
      "Resource": [
        "arn:aws:iot:*:*:thing/deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTThingAccess"
    },
    {
      "Action": [
        "iot:AttachThingPrincipal",
        "iot:DetachThingPrincipal",
        "iot:UpdateCertificate",
        "iot:DeleteCertificate",
        "iot:DetachPrincipalPolicy"
      ],
      "Resource": [
        "arn:aws:iot:*:*:thing/deeplens*",
        "arn:aws:iot:*:*:cert/*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTCertificateAccess"
    },
    {
      "Action": [
        "iot:CreateKeysAndCertificate",
        "iot:CreatePolicy",
        "iot:CreatePolicyVersion"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
    },
    {
      "Action": [
        "iot:AttachPrincipalPolicy"
      ],
      "Resource": [
        "arn:aws:iot:*:*:policy/deeplens*",
        "arn:aws:iot:*:*:cert/*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
    },
    {
      "Action": [
        "iot:GetThingShadow",
        "iot:UpdateThingShadow"
      ],
      "Resource": [
        "arn:aws:iot:*:*:thing/deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTDataAccess"
    },
    {
      "Action": [
        "iot:DescribeEndpoint"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensIoTEndpointAccess"
    },
    {
      "Action": [
        "deeplens:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensAccess"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensS3ObjectAccess"
    },
    {
      "Action": [
        "s3:DeleteBucket",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensS3Buckets"
    },
    {
      "Action": [
        "s3:CreateBucket"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensCreateS3Buckets"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "greengrass.amazonaws.com",
            "sagemaker.amazonaws.com"
          ]
        }
      },
      "Sid": "DeepLensIAMPassRoleAccess"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/AWSDeepLens*",
        "arn:aws:iam::*:role/service-role/AWSDeepLens*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      },
      "Sid": "DeepLensIAMLambdaPassRoleAccess"
    },
    {
      "Action": [
        "greengrass:AssociateRoleToGroup",
        "greengrass:AssociateServiceRoleToAccount",
        "greengrass:CreateResourceDefinition",
        "greengrass:CreateResourceDefinitionVersion",
        "greengrass:CreateCoreDefinition",
        "greengrass:CreateCoreDefinitionVersion",
        "greengrass:CreateDeployment",
        "greengrass:CreateFunctionDefinition",
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:CreateGroup",
        "greengrass:CreateGroupCertificateAuthority",
        "greengrass:CreateGroupVersion",
        "greengrass:CreateLoggerDefinition",
        "greengrass:CreateLoggerDefinitionVersion",
        "greengrass:CreateSubscriptionDefinition",
        "greengrass:CreateSubscriptionDefinitionVersion",
        "greengrass:DeleteCoreDefinition",
        "greengrass:DeleteFunctionDefinition",
        "greengrass:DeleteGroup",
        "greengrass:DeleteLoggerDefinition",
        "greengrass:DeleteSubscriptionDefinition",
        "greengrass:DisassociateRoleFromGroup",
        "greengrass:DisassociateServiceRoleFromAccount",
        "greengrass:GetAssociatedRole",
        "greengrass:GetConnectivityInfo",
        "greengrass:GetCoreDefinition",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetDeviceDefinition",
        "greengrass:GetDeviceDefinitionVersion",
        "greengrass:GetFunctionDefinition",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:GetGroup",
        "greengrass:GetGroupCertificateAuthority",
        "greengrass:GetGroupCertificateConfiguration",
        "greengrass:GetGroupVersion",
        "greengrass:GetLoggerDefinition",
        "greengrass:GetLoggerDefinitionVersion",
        "greengrass:GetResourceDefinition",
        "greengrass:GetServiceRoleForAccount",
        "greengrass:GetSubscriptionDefinition",
        "greengrass:GetSubscriptionDefinitionVersion",
        "greengrass:ListCoreDefinitionVersions",
        "greengrass:ListCoreDefinitions",
        "greengrass:ListDeployments",
        "greengrass:ListDeviceDefinitionVersions",
        "greengrass:ListDeviceDefinitions",
        "greengrass:ListFunctionDefinitionVersions",
        "greengrass:ListFunctionDefinitions",
        "greengrass:ListGroupCertificateAuthorities",
        "greengrass:ListGroupVersions",
        "greengrass:ListGroups",
        "greengrass:ListLoggerDefinitionVersions",
        "greengrass:ListLoggerDefinitions",
        "greengrass:ListSubscriptionDefinitionVersions",
        "greengrass:ListSubscriptionDefinitions",
        "greengrass:ResetDeployments",
        "greengrass:UpdateConnectivityInfo",
        "greengrass:UpdateCoreDefinition",
        "greengrass:UpdateDeviceDefinition",
        "greengrass:UpdateFunctionDefinition",
        "greengrass:UpdateGroup",
        "greengrass:UpdateGroupCertificateConfiguration",
        "greengrass:UpdateLoggerDefinition",
        "greengrass:UpdateSubscriptionDefinition",
        "greengrass:UpdateResourceDefinition"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensGreenGrassAccess"
    },
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:DeleteFunction",
        "lambda:GetFunction",
        "lambda:GetFunctionConfiguration",
        "lambda:ListFunctions",
        "lambda:ListVersionsByFunction",
        "lambda:PublishVersion",
        "lambda:UpdateFunctionCode",
        "lambda:UpdateFunctionConfiguration"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensLambdaAdminFunctionAccess"
    },
    {
      "Action": [
        "lambda:GetFunction",
        "lambda:GetFunctionConfiguration",
        "lambda:ListFunctions",
        "lambda:ListVersionsByFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensLambdaUsersFunctionAccess"
    },
    {
      "Action": [
        "sagemaker:CreateTrainingJob",
        "sagemaker:DescribeTrainingJob",
        "sagemaker:StopTrainingJob"
      ],
      "Resource": [
        "arn:aws:sagemaker:*:*:training-job/deeplens*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensSageMakerWriteAccess"
    },
    {
      "Action": [
        "sagemaker:DescribeTrainingJob"
      ],
      "Resource": [
        "arn:aws:sagemaker:*:*:training-job/*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensSageMakerReadAccess"
    },
    {
      "Action": [
        "acuity:CreateStream",
        "acuity:DescribeStream",
        "acuity:DeleteStream"
      ],
      "Resource": [
        "arn:aws:acuity:*:*:stream/deeplens*/*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensAcuityStreamAccess"
    },
    {
      "Action": [
        "acuity:GetDataEndpoint"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "DeepLensAcuityEndpointAccess"
    }
  ]
}
[
  {
    "Action": [
      "iot:CreateThing",
      "iot:DeleteThing",
      "iot:DeleteThingShadow",
      "iot:DescribeThing",
      "iot:GetThingShadow",
      "iot:UpdateThing",
      "iot:UpdateThingShadow"
    ],
    "Resource": [
      "arn:aws:iot:*:*:thing/deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTThingAccess"
  },
  {
    "Action": [
      "iot:AttachThingPrincipal",
      "iot:DetachThingPrincipal",
      "iot:UpdateCertificate",
      "iot:DeleteCertificate",
      "iot:DetachPrincipalPolicy"
    ],
    "Resource": [
      "arn:aws:iot:*:*:thing/deeplens*",
      "arn:aws:iot:*:*:cert/*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTCertificateAccess"
  },
  {
    "Action": [
      "iot:CreateKeysAndCertificate",
      "iot:CreatePolicy",
      "iot:CreatePolicyVersion"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
  },
  {
    "Action": [
      "iot:AttachPrincipalPolicy"
    ],
    "Resource": [
      "arn:aws:iot:*:*:policy/deeplens*",
      "arn:aws:iot:*:*:cert/*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
  },
  {
    "Action": [
      "iot:GetThingShadow",
      "iot:UpdateThingShadow"
    ],
    "Resource": [
      "arn:aws:iot:*:*:thing/deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTDataAccess"
  },
  {
    "Action": [
      "iot:DescribeEndpoint"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensIoTEndpointAccess"
  },
  {
    "Action": [
      "deeplens:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensAccess"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensS3ObjectAccess"
  },
  {
    "Action": [
      "s3:DeleteBucket",
      "s3:ListBucket"
    ],
    "Resource": [
      "arn:aws:s3:::deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensS3Buckets"
  },
  {
    "Action": [
      "s3:CreateBucket"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensCreateS3Buckets"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "greengrass.amazonaws.com",
          "sagemaker.amazonaws.com"
        ]
      }
    },
    "Sid": "DeepLensIAMPassRoleAccess"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/AWSDeepLens*",
      "arn:aws:iam::*:role/service-role/AWSDeepLens*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    },
    "Sid": "DeepLensIAMLambdaPassRoleAccess"
  },
  {
    "Action": [
      "greengrass:AssociateRoleToGroup",
      "greengrass:AssociateServiceRoleToAccount",
      "greengrass:CreateResourceDefinition",
      "greengrass:CreateResourceDefinitionVersion",
      "greengrass:CreateCoreDefinition",
      "greengrass:CreateCoreDefinitionVersion",
      "greengrass:CreateDeployment",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:CreateGroup",
      "greengrass:CreateGroupCertificateAuthority",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateLoggerDefinition",
      "greengrass:CreateLoggerDefinitionVersion",
      "greengrass:CreateSubscriptionDefinition",
      "greengrass:CreateSubscriptionDefinitionVersion",
      "greengrass:DeleteCoreDefinition",
      "greengrass:DeleteFunctionDefinition",
      "greengrass:DeleteGroup",
      "greengrass:DeleteLoggerDefinition",
      "greengrass:DeleteSubscriptionDefinition",
      "greengrass:DisassociateRoleFromGroup",
      "greengrass:DisassociateServiceRoleFromAccount",
      "greengrass:GetAssociatedRole",
      "greengrass:GetConnectivityInfo",
      "greengrass:GetCoreDefinition",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetDeviceDefinition",
      "greengrass:GetDeviceDefinitionVersion",
      "greengrass:GetFunctionDefinition",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetGroup",
      "greengrass:GetGroupCertificateAuthority",
      "greengrass:GetGroupCertificateConfiguration",
      "greengrass:GetGroupVersion",
      "greengrass:GetLoggerDefinition",
      "greengrass:GetLoggerDefinitionVersion",
      "greengrass:GetResourceDefinition",
      "greengrass:GetServiceRoleForAccount",
      "greengrass:GetSubscriptionDefinition",
      "greengrass:GetSubscriptionDefinitionVersion",
      "greengrass:ListCoreDefinitionVersions",
      "greengrass:ListCoreDefinitions",
      "greengrass:ListDeployments",
      "greengrass:ListDeviceDefinitionVersions",
      "greengrass:ListDeviceDefinitions",
      "greengrass:ListFunctionDefinitionVersions",
      "greengrass:ListFunctionDefinitions",
      "greengrass:ListGroupCertificateAuthorities",
      "greengrass:ListGroupVersions",
      "greengrass:ListGroups",
      "greengrass:ListLoggerDefinitionVersions",
      "greengrass:ListLoggerDefinitions",
      "greengrass:ListSubscriptionDefinitionVersions",
      "greengrass:ListSubscriptionDefinitions",
      "greengrass:ResetDeployments",
      "greengrass:UpdateConnectivityInfo",
      "greengrass:UpdateCoreDefinition",
      "greengrass:UpdateDeviceDefinition",
      "greengrass:UpdateFunctionDefinition",
      "greengrass:UpdateGroup",
      "greengrass:UpdateGroupCertificateConfiguration",
      "greengrass:UpdateLoggerDefinition",
      "greengrass:UpdateSubscriptionDefinition",
      "greengrass:UpdateResourceDefinition"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensGreenGrassAccess"
  },
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:DeleteFunction",
      "lambda:GetFunction",
      "lambda:GetFunctionConfiguration",
      "lambda:ListFunctions",
      "lambda:ListVersionsByFunction",
      "lambda:PublishVersion",
      "lambda:UpdateFunctionCode",
      "lambda:UpdateFunctionConfiguration"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensLambdaAdminFunctionAccess"
  },
  {
    "Action": [
      "lambda:GetFunction",
      "lambda:GetFunctionConfiguration",
      "lambda:ListFunctions",
      "lambda:ListVersionsByFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensLambdaUsersFunctionAccess"
  },
  {
    "Action": [
      "sagemaker:CreateTrainingJob",
      "sagemaker:DescribeTrainingJob",
      "sagemaker:StopTrainingJob"
    ],
    "Resource": [
      "arn:aws:sagemaker:*:*:training-job/deeplens*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensSageMakerWriteAccess"
  },
  {
    "Action": [
      "sagemaker:DescribeTrainingJob"
    ],
    "Resource": [
      "arn:aws:sagemaker:*:*:training-job/*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensSageMakerReadAccess"
  },
  {
    "Action": [
      "acuity:CreateStream",
      "acuity:DescribeStream",
      "acuity:DeleteStream"
    ],
    "Resource": [
      "arn:aws:acuity:*:*:stream/deeplens*/*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensAcuityStreamAccess"
  },
  {
    "Action": [
      "acuity:GetDataEndpoint"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "DeepLensAcuityEndpointAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:PutMetricFilter",
        "logs:PutRetentionPolicy"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:PutMetricFilter",
      "logs:PutRetentionPolicy"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "directconnect:DescribeConnections",
        "directconnect:DescribeDirectConnectGateways",
        "directconnect:DescribeDirectConnectGatewayAssociations",
        "directconnect:DescribeDirectConnectGatewayAttachments",
        "directconnect:DescribeVirtualGateways",
        "directconnect:DescribeVirtualInterfaces",
        "directconnect:DescribeTags",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeInstances",
        "ec2:DescribeTags",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRegions",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpnGateways",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:DescribeTags",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTargetHealth"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "directconnect:DescribeConnections",
      "directconnect:DescribeDirectConnectGateways",
      "directconnect:DescribeDirectConnectGatewayAssociations",
      "directconnect:DescribeDirectConnectGatewayAttachments",
      "directconnect:DescribeVirtualGateways",
      "directconnect:DescribeVirtualInterfaces",
      "directconnect:DescribeTags",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeInstances",
      "ec2:DescribeTags",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRegions",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeTags",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mobileanalytics:GetReports",
        "mobileanalytics:GetFinancialReports"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mobileanalytics:GetReports",
      "mobileanalytics:GetFinancialReports"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:*"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/awseb-*",
        "arn:aws:cloudformation:*:*:stack/eb-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
    },
    {
      "Action": [
        "logs:DeleteLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
      ],
      "Effect": "Allow",
      "Sid": "AllowDeleteCloudwatchLogGroups"
    },
    {
      "Action": [
        "s3:*"
      ],
      "Resource": [
        "arn:aws:s3:::elasticbeanstalk-*",
        "arn:aws:s3:::elasticbeanstalk-*/*"
      ],
      "Effect": "Allow",
      "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
    },
    {
      "Action": "ec2:RunInstances",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ArnLike": {
          "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
        }
      },
      "Sid": "AllowLaunchTemplateRunInstances"
    },
    {
      "Action": [
        "autoscaling:AttachInstances",
        "autoscaling:CreateAutoScalingGroup",
        "autoscaling:CreateLaunchConfiguration",
        "autoscaling:DeleteLaunchConfiguration",
        "autoscaling:DeleteAutoScalingGroup",
        "autoscaling:DeleteScheduledAction",
        "autoscaling:DescribeAccountLimits",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:DescribeLaunchConfigurations",
        "autoscaling:DescribeLoadBalancers",
        "autoscaling:DescribeNotificationConfigurations",
        "autoscaling:DescribeScalingActivities",
        "autoscaling:DescribeScheduledActions",
        "autoscaling:DetachInstances",
        "autoscaling:DeletePolicy",
        "autoscaling:PutScalingPolicy",
        "autoscaling:PutScheduledUpdateGroupAction",
        "autoscaling:PutNotificationConfiguration",
        "autoscaling:ResumeProcesses",
        "autoscaling:SetDesiredCapacity",
        "autoscaling:SuspendProcesses",
        "autoscaling:TerminateInstanceInAutoScalingGroup",
        "autoscaling:UpdateAutoScalingGroup",
        "cloudwatch:PutMetricAlarm",
        "ec2:AssociateAddress",
        "ec2:AllocateAddress",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateLaunchTemplate",
        "ec2:CreateLaunchTemplateVersion",
        "ec2:DescribeLaunchTemplates",
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:DeleteLaunchTemplate",
        "ec2:DeleteLaunchTemplateVersions",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeImages",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeSpotInstanceRequests",
        "ec2:DescribeVpcClassicLink",
        "ec2:DisassociateAddress",
        "ec2:ReleaseAddress",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:TerminateInstances",
        "ecs:CreateCluster",
        "ecs:DeleteCluster",
        "ecs:DescribeClusters",
        "ecs:RegisterTaskDefinition",
        "elasticbeanstalk:*",
        "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
        "elasticloadbalancing:ConfigureHealthCheck",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DescribeInstanceHealth",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:RegisterTargets",
        "elasticloadbalancing:DeregisterTargets",
        "iam:ListRoles",
        "iam:PassRole",
        "logs:CreateLogGroup",
        "logs:PutRetentionPolicy",
        "logs:DescribeLogGroups",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeOrderableDBInstanceOptions",
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:ListBucket",
        "sns:CreateTopic",
        "sns:GetTopicAttributes",
        "sns:ListSubscriptionsByTopic",
        "sns:Subscribe",
        "sns:SetTopicAttributes",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "codebuild:CreateProject",
        "codebuild:DeleteProject",
        "codebuild:BatchGetBuilds",
        "codebuild:StartBuild"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AllowOperations"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:*"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/awseb-*",
      "arn:aws:cloudformation:*:*:stack/eb-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
  },
  {
    "Action": [
      "logs:DeleteLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
    ],
    "Effect": "Allow",
    "Sid": "AllowDeleteCloudwatchLogGroups"
  },
  {
    "Action": [
      "s3:*"
    ],
    "Resource": [
      "arn:aws:s3:::elasticbeanstalk-*",
      "arn:aws:s3:::elasticbeanstalk-*/*"
    ],
    "Effect": "Allow",
    "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
  },
  {
    "Action": "ec2:RunInstances",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ArnLike": {
        "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
      }
    },
    "Sid": "AllowLaunchTemplateRunInstances"
  },
  {
    "Action": [
      "autoscaling:AttachInstances",
      "autoscaling:CreateAutoScalingGroup",
      "autoscaling:CreateLaunchConfiguration",
      "autoscaling:DeleteLaunchConfiguration",
      "autoscaling:DeleteAutoScalingGroup",
      "autoscaling:DeleteScheduledAction",
      "autoscaling:DescribeAccountLimits",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeLoadBalancers",
      "autoscaling:DescribeNotificationConfigurations",
      "autoscaling:DescribeScalingActivities",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:DetachInstances",
      "autoscaling:DeletePolicy",
      "autoscaling:PutScalingPolicy",
      "autoscaling:PutScheduledUpdateGroupAction",
      "autoscaling:PutNotificationConfiguration",
      "autoscaling:ResumeProcesses",
      "autoscaling:SetDesiredCapacity",
      "autoscaling:SuspendProcesses",
      "autoscaling:TerminateInstanceInAutoScalingGroup",
      "autoscaling:UpdateAutoScalingGroup",
      "cloudwatch:PutMetricAlarm",
      "ec2:AssociateAddress",
      "ec2:AllocateAddress",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateLaunchTemplate",
      "ec2:CreateLaunchTemplateVersion",
      "ec2:DescribeLaunchTemplates",
      "ec2:DescribeLaunchTemplateVersions",
      "ec2:DeleteLaunchTemplate",
      "ec2:DeleteLaunchTemplateVersions",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeImages",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshots",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeVpcClassicLink",
      "ec2:DisassociateAddress",
      "ec2:ReleaseAddress",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:TerminateInstances",
      "ecs:CreateCluster",
      "ecs:DeleteCluster",
      "ecs:DescribeClusters",
      "ecs:RegisterTaskDefinition",
      "elasticbeanstalk:*",
      "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
      "elasticloadbalancing:ConfigureHealthCheck",
      "elasticloadbalancing:CreateLoadBalancer",
      "elasticloadbalancing:DeleteLoadBalancer",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:RegisterTargets",
      "elasticloadbalancing:DeregisterTargets",
      "iam:ListRoles",
      "iam:PassRole",
      "logs:CreateLogGroup",
      "logs:PutRetentionPolicy",
      "logs:DescribeLogGroups",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeOrderableDBInstanceOptions",
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:ListBucket",
      "sns:CreateTopic",
      "sns:GetTopicAttributes",
      "sns:ListSubscriptionsByTopic",
      "sns:Subscribe",
      "sns:SetTopicAttributes",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "codebuild:CreateProject",
      "codebuild:DeleteProject",
      "codebuild:BatchGetBuilds",
      "codebuild:StartBuild"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AllowOperations"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:GenerateCredentialReport",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:Get*",
        "iam:List*",
        "iam:SimulateCustomPolicy",
        "iam:SimulatePrincipalPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:GenerateCredentialReport",
      "iam:GenerateServiceLastAccessedDetails",
      "iam:Get*",
      "iam:List*",
      "iam:SimulateCustomPolicy",
      "iam:SimulatePrincipalPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*",
        "rds:ListTagsForResource",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rds:Describe*",
      "rds:ListTagsForResource",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:GetLoggingOptions",
        "iot:GetV2LoggingOptions",
        "iot:ListCACertificates",
        "iot:ListCertificates",
        "iot:DescribeCACertificate",
        "iot:DescribeCertificate",
        "iot:ListPolicies",
        "iot:GetPolicy",
        "iot:GetEffectivePolicies",
        "cognito-identity:GetIdentityPoolRoles",
        "iam:ListRolePolicies",
        "iam:ListAttachedRolePolicies",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRolePolicy"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:GetLoggingOptions",
      "iot:GetV2LoggingOptions",
      "iot:ListCACertificates",
      "iot:ListCertificates",
      "iot:DescribeCACertificate",
      "iot:DescribeCertificate",
      "iot:ListPolicies",
      "iot:GetPolicy",
      "iot:GetEffectivePolicies",
      "cognito-identity:GetIdentityPoolRoles",
      "iam:ListRolePolicies",
      "iam:ListAttachedRolePolicies",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRolePolicy"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cognito-identity:*",
        "cognito-idp:*",
        "cognito-sync:*",
        "iam:ListRoles",
        "iam:ListOpenIdConnectProviders",
        "sns:ListPlatformApplications"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "email.cognito-idp.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cognito-identity:*",
      "cognito-idp:*",
      "cognito-sync:*",
      "iam:ListRoles",
      "iam:ListOpenIdConnectProviders",
      "sns:ListPlatformApplications"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "email.cognito-idp.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:GetHostedZone",
        "route53:ListHostedZonesByName",
        "route53:ChangeResourceRecordSets",
        "route53:CreateHealthCheck",
        "route53:GetHealthCheck",
        "route53:DeleteHealthCheck",
        "route53:UpdateHealthCheck",
        "servicediscovery:Get*",
        "servicediscovery:List*",
        "servicediscovery:RegisterInstance",
        "servicediscovery:DeregisterInstance"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:GetHostedZone",
      "route53:ListHostedZonesByName",
      "route53:ChangeResourceRecordSets",
      "route53:CreateHealthCheck",
      "route53:GetHealthCheck",
      "route53:DeleteHealthCheck",
      "route53:UpdateHealthCheck",
      "servicediscovery:Get*",
      "servicediscovery:List*",
      "servicediscovery:RegisterInstance",
      "servicediscovery:DeregisterInstance"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "elasticfilesystem:*",
        "kms:DescribeKey",
        "kms:ListAliases"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "elasticfilesystem:*",
      "kms:DescribeKey",
      "kms:ListAliases"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lex:PostText"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lex:PostText"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iam:GetUser",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sms:SendMessage",
        "sms:GetMessages"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteObject",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutLifecycleConfiguration",
        "s3:AbortMultipartUpload",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts"
      ],
      "Resource": [
        "arn:aws:s3:::sms-b-*",
        "arn:aws:s3:::import-to-ec2-*",
        "arn:aws:s3:::server-migration-service-upgrade",
        "arn:aws:s3:::server-migration-service-upgrade/*",
        "arn:aws:s3:::connector-platform-upgrade-info/*",
        "arn:aws:s3:::connector-platform-upgrade-info",
        "arn:aws:s3:::connector-platform-upgrade-bundles/*",
        "arn:aws:s3:::connector-platform-upgrade-bundles",
        "arn:aws:s3:::connector-platform-release-notes/*",
        "arn:aws:s3:::connector-platform-release-notes"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "awsconnector:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "SNS:Publish"
      ],
      "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "iam:GetUser",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sms:SendMessage",
      "sms:GetMessages"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteObject",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutLifecycleConfiguration",
      "s3:AbortMultipartUpload",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts"
    ],
    "Resource": [
      "arn:aws:s3:::sms-b-*",
      "arn:aws:s3:::import-to-ec2-*",
      "arn:aws:s3:::server-migration-service-upgrade",
      "arn:aws:s3:::server-migration-service-upgrade/*",
      "arn:aws:s3:::connector-platform-upgrade-info/*",
      "arn:aws:s3:::connector-platform-upgrade-info",
      "arn:aws:s3:::connector-platform-upgrade-bundles/*",
      "arn:aws:s3:::connector-platform-upgrade-bundles",
      "arn:aws:s3:::connector-platform-release-notes/*",
      "arn:aws:s3:::connector-platform-release-notes"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "awsconnector:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "SNS:Publish"
    ],
    "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cognito-idp:DescribeUserPool",
        "cognito-idp:CreateUserPoolClient",
        "cognito-idp:DeleteUserPoolClient",
        "cognito-idp:DescribeUserPoolClient",
        "cognito-idp:AdminInitiateAuth",
        "cognito-idp:AdminUserGlobalSignOut",
        "cognito-idp:ListUserPoolClients",
        "cognito-identity:DescribeIdentityPool",
        "cognito-identity:UpdateIdentityPool",
        "cognito-identity:SetIdentityPoolRoles",
        "cognito-identity:GetIdentityPoolRoles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "cognito-identity.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cognito-idp:DescribeUserPool",
      "cognito-idp:CreateUserPoolClient",
      "cognito-idp:DeleteUserPoolClient",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:AdminInitiateAuth",
      "cognito-idp:AdminUserGlobalSignOut",
      "cognito-idp:ListUserPoolClients",
      "cognito-identity:DescribeIdentityPool",
      "cognito-identity:UpdateIdentityPool",
      "cognito-identity:SetIdentityPoolRoles",
      "cognito-identity:GetIdentityPoolRoles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "cognito-identity.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "fms:*",
        "waf:*",
        "waf-regional:*",
        "elasticloadbalancing:SetWebACL",
        "organizations:DescribeOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "fms:*",
      "waf:*",
      "waf-regional:*",
      "elasticloadbalancing:SetWebACL",
      "organizations:DescribeOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "chime:ListAccounts",
        "chime:GetAccount",
        "chime:GetAccountSettings",
        "chime:ListUsers",
        "chime:GetUser",
        "chime:GetUserByEmail",
        "chime:ListDomains",
        "chime:GetDomain",
        "chime:ListGroups",
        "chime:ListDirectories",
        "chime:ListCDRBucket",
        "chime:GetCDRBucket",
        "chime:ListDelegates",
        "chime:GetAccountResource",
        "chime:ValidateDelegate",
        "chime:ListAccountUsageReportData",
        "chime:GetUserActivityReportData",
        "chime:GetGlobalSettings",
        "chime:GetPhoneNumber",
        "chime:GetPhoneNumberOrder",
        "chime:GetUserSettings",
        "chime:GetVoiceConnector",
        "chime:GetVoiceConnectorOrigination",
        "chime:GetVoiceConnectorTermination",
        "chime:GetVoiceConnectorTerminationHealth",
        "chime:ListPhoneNumberOrders",
        "chime:ListPhoneNumbers",
        "chime:ListVoiceConnectorTerminationCredentials",
        "chime:ListVoiceConnectors",
        "chime:SearchAvailablePhoneNumbers",
        "chime:GetTelephonyLimits",
        "chime:ListCallingRegions",
        "chime:GetBot",
        "chime:ListBots",
        "chime:GetEventsConfiguration"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "chime:ListAccounts",
      "chime:GetAccount",
      "chime:GetAccountSettings",
      "chime:ListUsers",
      "chime:GetUser",
      "chime:GetUserByEmail",
      "chime:ListDomains",
      "chime:GetDomain",
      "chime:ListGroups",
      "chime:ListDirectories",
      "chime:ListCDRBucket",
      "chime:GetCDRBucket",
      "chime:ListDelegates",
      "chime:GetAccountResource",
      "chime:ValidateDelegate",
      "chime:ListAccountUsageReportData",
      "chime:GetUserActivityReportData",
      "chime:GetGlobalSettings",
      "chime:GetPhoneNumber",
      "chime:GetPhoneNumberOrder",
      "chime:GetUserSettings",
      "chime:GetVoiceConnector",
      "chime:GetVoiceConnectorOrigination",
      "chime:GetVoiceConnectorTermination",
      "chime:GetVoiceConnectorTerminationHealth",
      "chime:ListPhoneNumberOrders",
      "chime:ListPhoneNumbers",
      "chime:ListVoiceConnectorTerminationCredentials",
      "chime:ListVoiceConnectors",
      "chime:SearchAvailablePhoneNumbers",
      "chime:GetTelephonyLimits",
      "chime:ListCallingRegions",
      "chime:GetBot",
      "chime:ListBots",
      "chime:GetEventsConfiguration"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "zocalo:*",
        "ds:*",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "zocalo:*",
      "ds:*",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVpc",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplate",
        "cloudformation:ListStackResources",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "cognito-identity:ListIdentityPools",
        "cognito-sync:GetCognitoEvents",
        "dynamodb:BatchGetItem",
        "dynamodb:DescribeStream",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:ListStreams",
        "dynamodb:ListTables",
        "dynamodb:Query",
        "dynamodb:Scan",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "events:Describe*",
        "events:List*",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "iam:ListRolePolicies",
        "iam:ListRoles",
        "iot:DescribeEndpoint",
        "iot:GetTopicRule",
        "iot:ListPolicies",
        "iot:ListThings",
        "iot:ListTopicRules",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kms:ListAliases",
        "lambda:Get*",
        "lambda:List*",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:DescribeMetricFilters",
        "logs:GetLogEvents",
        "s3:Get*",
        "s3:List*",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sqs:ListQueues",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:GetTemplate",
      "cloudformation:ListStackResources",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "cognito-identity:ListIdentityPools",
      "cognito-sync:GetCognitoEvents",
      "dynamodb:BatchGetItem",
      "dynamodb:DescribeStream",
      "dynamodb:DescribeTable",
      "dynamodb:GetItem",
      "dynamodb:ListStreams",
      "dynamodb:ListTables",
      "dynamodb:Query",
      "dynamodb:Scan",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "events:Describe*",
      "events:List*",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListAttachedRolePolicies",
      "iam:ListRolePolicies",
      "iam:ListRoles",
      "iot:DescribeEndpoint",
      "iot:GetTopicRule",
      "iot:ListPolicies",
      "iot:ListThings",
      "iot:ListTopicRules",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "kms:ListAliases",
      "lambda:Get*",
      "lambda:List*",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:DescribeMetricFilters",
      "logs:GetLogEvents",
      "s3:Get*",
      "s3:List*",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sqs:ListQueues",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotsitewise:Describe*",
        "iotsitewise:List*",
        "iotsitewise:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotsitewise:Describe*",
      "iotsitewise:List*",
      "iotsitewise:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-portal:ViewUsage"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-portal:ViewUsage"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "iot:CreateJob",
      "signer:DescribeSigningJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": [
    "iot:CreateJob",
    "signer:DescribeSigningJob"
  ],
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mq:*",
        "cloudformation:CreateStack",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DetachNetworkInterface",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:CreateSecurityGroup",
        "ec2:AuthorizeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogGroup"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mq:*",
      "cloudformation:CreateStack",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DetachNetworkInterface",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:CreateSecurityGroup",
      "ec2:AuthorizeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogGroup"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:GetEntitlements"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:GetEntitlements"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "greengrass:List*",
        "greengrass:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "greengrass:List*",
      "greengrass:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeTags",
      "ecs:CreateCluster",
      "ecs:DeregisterContainerInstance",
      "ecs:DiscoverPollEndpoint",
      "ecs:Poll",
      "ecs:RegisterContainerInstance",
      "ecs:StartTelemetrySession",
      "ecs:UpdateContainerInstancesState",
      "ecs:Submit*",
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appstream:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:RegisterScalableTarget"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:PutMetricAlarm"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcEndpoints"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:ListRoles",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "application-autoscaling.amazonaws.com"
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/appstream.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_AppStreamFleet",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "appstream.application-autoscaling.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "appstream:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:RegisterScalableTarget"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:PutMetricAlarm"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcEndpoints"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:ListRoles",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "application-autoscaling.amazonaws.com"
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/appstream.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_AppStreamFleet",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "appstream.application-autoscaling.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:Connect",
        "iot:Publish",
        "iot:Subscribe",
        "iot:Receive",
        "iot:GetThingShadow",
        "iot:UpdateThingShadow",
        "iot:DeleteThingShadow"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:Connect",
      "iot:Publish",
      "iot:Subscribe",
      "iot:Receive",
      "iot:GetThingShadow",
      "iot:UpdateThingShadow",
      "iot:DeleteThingShadow"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "worklink:*"
      ],
      "Resource": "arn:aws:worklink:*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "worklink:*"
    ],
    "Resource": "arn:aws:worklink:*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "transcribe:Get*",
        "transcribe:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "transcribe:Get*",
      "transcribe:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "es:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "es:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateChangeSet",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:ExecuteChangeSet"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLikeIfExists": {
          "cloudformation:ResourceTypes": [
            "AWS::EC2::*"
          ]
        }
      }
    },
    {
      "Action": [
        "cloudformation:DeleteChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResources",
        "cloudformation:GetTemplate"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:DescribeStacks",
        "cloudformation:ValidateTemplate",
        "cloudformation:DescribeStackResource",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteObject",
        "s3:GetBucketAcl",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutLifecycleConfiguration",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "arn:aws:s3:::sms-app-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sms:CreateReplicationJob",
        "sms:DeleteReplicationJob",
        "sms:GetReplicationJobs",
        "sms:GetReplicationRuns",
        "sms:GetServers",
        "sms:ImportServerCatalog",
        "sms:StartOnDemandReplicationRun",
        "sms:UpdateReplicationJob"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:ModifySnapshotAttribute",
        "ec2:CopySnapshot",
        "ec2:CopyImage",
        "ec2:Describe*",
        "ec2:DeleteSnapshot",
        "ec2:DeregisterImage",
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:GetRole",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateChangeSet",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:ExecuteChangeSet"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLikeIfExists": {
        "cloudformation:ResourceTypes": [
          "AWS::EC2::*"
        ]
      }
    }
  },
  {
    "Action": [
      "cloudformation:DeleteChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResources",
      "cloudformation:GetTemplate"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:DescribeStacks",
      "cloudformation:ValidateTemplate",
      "cloudformation:DescribeStackResource",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteObject",
      "s3:GetBucketAcl",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutLifecycleConfiguration",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "arn:aws:s3:::sms-app-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sms:CreateReplicationJob",
      "sms:DeleteReplicationJob",
      "sms:GetReplicationJobs",
      "sms:GetReplicationRuns",
      "sms:GetServers",
      "sms:ImportServerCatalog",
      "sms:StartOnDemandReplicationRun",
      "sms:UpdateReplicationJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:ModifySnapshotAttribute",
      "ec2:CopySnapshot",
      "ec2:CopyImage",
      "ec2:Describe*",
      "ec2:DeleteSnapshot",
      "ec2:DeregisterImage",
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:GetRole",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:CreateDatabase",
        "glue:UpdateDatabase",
        "glue:CreateTable",
        "glue:UpdateTable",
        "firehose:CreateDeliveryStream",
        "firehose:DescribeDeliveryStream",
        "logs:CreateLogGroup"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "firehose:DeleteDeliveryStream",
        "firehose:PutRecord",
        "firehose:PutRecordBatch",
        "firehose:UpdateDestination"
      ],
      "Resource": "arn:aws:firehose:*:*:deliverystream/aws-application-discovery-service*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:ListBucket",
        "s3:PutBucketLogging",
        "s3:PutEncryptionConfiguration"
      ],
      "Resource": "arn:aws:s3:::aws-application-discovery-service*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::aws-application-discovery-service*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutRetentionPolicy"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSApplicationDiscoveryServiceFirehose",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "firehose.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/service-role/AWSApplicationDiscoveryServiceFirehose",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "firehose.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "glue:CreateDatabase",
      "glue:UpdateDatabase",
      "glue:CreateTable",
      "glue:UpdateTable",
      "firehose:CreateDeliveryStream",
      "firehose:DescribeDeliveryStream",
      "logs:CreateLogGroup"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "firehose:DeleteDeliveryStream",
      "firehose:PutRecord",
      "firehose:PutRecordBatch",
      "firehose:UpdateDestination"
    ],
    "Resource": "arn:aws:firehose:*:*:deliverystream/aws-application-discovery-service*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:PutBucketLogging",
      "s3:PutEncryptionConfiguration"
    ],
    "Resource": "arn:aws:s3:::aws-application-discovery-service*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::aws-application-discovery-service*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:PutRetentionPolicy"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSApplicationDiscoveryServiceFirehose",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "firehose.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/service-role/AWSApplicationDiscoveryServiceFirehose",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "firehose.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sumerian:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sumerian:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "waf:*",
        "waf-regional:*",
        "elasticloadbalancing:SetWebACL"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "waf:*",
      "waf-regional:*",
      "elasticloadbalancing:SetWebACL"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "elasticloadbalancing:Describe*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeSecurityGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "organizations:ListAccounts",
        "organizations:DescribeOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "organizations:ListAccounts",
      "organizations:DescribeOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "firehose:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:Describe*",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "logs:Get*",
        "logs:List*",
        "logs:Describe*",
        "logs:TestMetricFilter",
        "logs:FilterLogEvents",
        "sns:Get*",
        "sns:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:Describe*",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "logs:Get*",
      "logs:List*",
      "logs:Describe*",
      "logs:TestMetricFilter",
      "logs:FilterLogEvents",
      "sns:Get*",
      "sns:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "tag:getResources",
        "tag:getTagKeys",
        "tag:getTagValues",
        "tag:TagResources",
        "tag:UntagResources",
        "tag:AddResourceTags",
        "tag:RemoveResourceTags",
        "resource-groups:*",
        "cloudformation:DescribeStacks",
        "cloudformation:ListStackResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "tag:getResources",
      "tag:getTagKeys",
      "tag:getTagValues",
      "tag:TagResources",
      "tag:UntagResources",
      "tag:AddResourceTags",
      "tag:RemoveResourceTags",
      "resource-groups:*",
      "cloudformation:DescribeStacks",
      "cloudformation:ListStackResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "kms:CreateAlias",
        "kms:CreateKey",
        "kms:DeleteAlias",
        "kms:Describe*",
        "kms:GenerateRandom",
        "kms:Get*",
        "kms:List*",
        "kms:TagResource",
        "kms:UntagResource",
        "iam:ListGroups",
        "iam:ListRoles",
        "iam:ListUsers"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "kms:CreateAlias",
      "kms:CreateKey",
      "kms:DeleteAlias",
      "kms:Describe*",
      "kms:GenerateRandom",
      "kms:Get*",
      "kms:List*",
      "kms:TagResource",
      "kms:UntagResource",
      "iam:ListGroups",
      "iam:ListRoles",
      "iam:ListUsers"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeSpotFleetRequests",
        "ec2:ModifySpotFleetRequest",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeSpotFleetRequests",
      "ec2:ModifySpotFleetRequest",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "importexport:ListJobs",
        "importexport:GetStatus"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "importexport:ListJobs",
      "importexport:GetStatus"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DescribeAlarms",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances",
        "ec2:DescribeSnapshots",
        "ec2:DescribeVolumeStatus",
        "ec2:DescribeVolumes",
        "ec2:RebootInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:CreateSnapshot"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DescribeAlarms",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances",
      "ec2:DescribeSnapshots",
      "ec2:DescribeVolumeStatus",
      "ec2:DescribeVolumes",
      "ec2:RebootInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:CreateSnapshot"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket",
        "s3:Get*",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:*MultipartUpload*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "1"
    },
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "2"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListBucket",
      "s3:Get*",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:*MultipartUpload*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "1"
  },
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "2"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "glue:*",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSubnetGroups",
        "iam:ListRoles",
        "iam:ListUsers",
        "iam:ListGroups",
        "iam:ListRolePolicies",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeRouteTables",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeInstances",
        "ec2:DescribeImages",
        "rds:DescribeDBInstances",
        "rds:DescribeDBClusters",
        "rds:DescribeDBSubnetGroups",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:GetBucketAcl",
        "s3:GetBucketLocation",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplateSummary",
        "dynamodb:ListTables",
        "kms:ListAliases",
        "kms:DescribeKey",
        "cloudwatch:GetMetricData",
        "cloudwatch:ListDashboards"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*/*",
        "arn:aws:s3:::*/*aws-glue-*/*",
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket"
      ],
      "Resource": [
        "arn:aws:s3:::aws-glue-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:GetLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:/aws-glue/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:RunInstances"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*",
        "arn:aws:ec2:*:*:key-pair/*",
        "arn:aws:ec2:*:*:image/*",
        "arn:aws:ec2:*:*:security-group/*",
        "arn:aws:ec2:*:*:network-interface/*",
        "arn:aws:ec2:*:*:subnet/*",
        "arn:aws:ec2:*:*:volume/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:TerminateInstances",
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:instance/*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
        },
        "StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "glue.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "ec2.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": [
            "glue.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "glue:*",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSubnetGroups",
      "iam:ListRoles",
      "iam:ListUsers",
      "iam:ListGroups",
      "iam:ListRolePolicies",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:ListAttachedRolePolicies",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeRouteTables",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeInstances",
      "ec2:DescribeImages",
      "rds:DescribeDBInstances",
      "rds:DescribeDBClusters",
      "rds:DescribeDBSubnetGroups",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:GetBucketAcl",
      "s3:GetBucketLocation",
      "cloudformation:DescribeStacks",
      "cloudformation:GetTemplateSummary",
      "dynamodb:ListTables",
      "kms:ListAliases",
      "kms:DescribeKey",
      "cloudwatch:GetMetricData",
      "cloudwatch:ListDashboards"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*/*",
      "arn:aws:s3:::*/*aws-glue-*/*",
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket"
    ],
    "Resource": [
      "arn:aws:s3:::aws-glue-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:GetLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:/aws-glue/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:RunInstances"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*",
      "arn:aws:ec2:*:*:key-pair/*",
      "arn:aws:ec2:*:*:image/*",
      "arn:aws:ec2:*:*:security-group/*",
      "arn:aws:ec2:*:*:network-interface/*",
      "arn:aws:ec2:*:*:subnet/*",
      "arn:aws:ec2:*:*:volume/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:TerminateInstances",
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:instance/*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
      },
      "StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "glue.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "ec2.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": [
          "glue.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:Describe*",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DeregisterTargets",
        "elasticloadbalancing:Describe*",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:RegisterTargets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:Describe*",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DeregisterTargets",
      "elasticloadbalancing:Describe*",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:RegisterTargets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "devicefarm:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "devicefarm:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ssm:Describe*",
      "ssm:Get*",
      "ssm:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "states:ListStateMachines",
        "states:ListActivities",
        "states:DescribeStateMachine",
        "states:DescribeStateMachineForExecution",
        "states:ListExecutions",
        "states:DescribeExecution",
        "states:GetExecutionHistory",
        "states:DescribeActivity"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "states:ListStateMachines",
      "states:ListActivities",
      "states:DescribeStateMachine",
      "states:DescribeStateMachineForExecution",
      "states:ListExecutions",
      "states:DescribeExecution",
      "states:GetExecutionHistory",
      "states:DescribeActivity"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:ViewSubscriptions",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeImages",
        "ec2:DescribeInstances",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "aws-marketplace:ListBuilds",
        "aws-marketplace:DescribeBuilds",
        "iam:ListRoles",
        "iam:ListInstanceProfiles",
        "sns:GetTopicAttributes",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:ViewSubscriptions",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeImages",
      "ec2:DescribeInstances",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "aws-marketplace:ListBuilds",
      "aws-marketplace:DescribeBuilds",
      "iam:ListRoles",
      "iam:ListInstanceProfiles",
      "sns:GetTopicAttributes",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:DescribeTable",
        "dynamodb:UpdateTable",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:DescribeTable",
      "dynamodb:UpdateTable",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codepipeline:*",
        "cloudformation:DescribeStacks",
        "cloudformation:ListChangeSets",
        "cloudtrail:CreateTrail",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:PutEventSelectors",
        "cloudtrail:StartLogging",
        "codebuild:BatchGetProjects",
        "codebuild:CreateProject",
        "codebuild:ListCuratedEnvironmentImages",
        "codebuild:ListProjects",
        "codecommit:GetBranch",
        "codecommit:GetRepositoryTriggers",
        "codecommit:ListBranches",
        "codecommit:ListRepositories",
        "codecommit:PutRepositoryTriggers",
        "codecommit:GetReferences",
        "codedeploy:GetApplication",
        "codedeploy:BatchGetApplications",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:BatchGetDeploymentGroups",
        "codedeploy:ListApplications",
        "codedeploy:ListDeploymentGroups",
        "devicefarm:GetDevicePool",
        "devicefarm:GetProject",
        "devicefarm:ListDevicePools",
        "devicefarm:ListProjects",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "ecs:ListClusters",
        "ecs:ListServices",
        "elasticbeanstalk:DescribeApplications",
        "elasticbeanstalk:DescribeEnvironments",
        "iam:ListRoles",
        "iam:GetRole",
        "lambda:GetFunctionConfiguration",
        "lambda:ListFunctions",
        "events:ListRules",
        "events:ListTargetsByRule",
        "events:DescribeRule",
        "opsworks:DescribeApps",
        "opsworks:DescribeLayers",
        "opsworks:DescribeStacks",
        "s3:GetBucketPolicy",
        "s3:GetBucketVersioning",
        "s3:GetObjectVersion",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:CreateBucket",
        "s3:PutBucketPolicy"
      ],
      "Resource": "arn:aws:s3::*:codepipeline-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/service-role/cwe-role-*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "events.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "codepipeline.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "events:PutRule",
        "events:PutTargets",
        "events:DeleteRule",
        "events:DisableRule",
        "events:RemoveTargets"
      ],
      "Resource": [
        "arn:aws:events:*:*:rule/codepipeline-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codepipeline:*",
      "cloudformation:DescribeStacks",
      "cloudformation:ListChangeSets",
      "cloudtrail:CreateTrail",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:PutEventSelectors",
      "cloudtrail:StartLogging",
      "codebuild:BatchGetProjects",
      "codebuild:CreateProject",
      "codebuild:ListCuratedEnvironmentImages",
      "codebuild:ListProjects",
      "codecommit:GetBranch",
      "codecommit:GetRepositoryTriggers",
      "codecommit:ListBranches",
      "codecommit:ListRepositories",
      "codecommit:PutRepositoryTriggers",
      "codecommit:GetReferences",
      "codedeploy:GetApplication",
      "codedeploy:BatchGetApplications",
      "codedeploy:GetDeploymentGroup",
      "codedeploy:BatchGetDeploymentGroups",
      "codedeploy:ListApplications",
      "codedeploy:ListDeploymentGroups",
      "devicefarm:GetDevicePool",
      "devicefarm:GetProject",
      "devicefarm:ListDevicePools",
      "devicefarm:ListProjects",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecs:ListClusters",
      "ecs:ListServices",
      "elasticbeanstalk:DescribeApplications",
      "elasticbeanstalk:DescribeEnvironments",
      "iam:ListRoles",
      "iam:GetRole",
      "lambda:GetFunctionConfiguration",
      "lambda:ListFunctions",
      "events:ListRules",
      "events:ListTargetsByRule",
      "events:DescribeRule",
      "opsworks:DescribeApps",
      "opsworks:DescribeLayers",
      "opsworks:DescribeStacks",
      "s3:GetBucketPolicy",
      "s3:GetBucketVersioning",
      "s3:GetObjectVersion",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:CreateBucket",
      "s3:PutBucketPolicy"
    ],
    "Resource": "arn:aws:s3::*:codepipeline-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/service-role/cwe-role-*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "events.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "codepipeline.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "events:PutRule",
      "events:PutTargets",
      "events:DeleteRule",
      "events:DisableRule",
      "events:RemoveTargets"
    ],
    "Resource": [
      "arn:aws:events:*:*:rule/codepipeline-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloud9:ValidateEnvironmentName",
        "cloud9:UpdateUserSettings",
        "cloud9:GetUserSettings",
        "iam:GetUser",
        "iam:ListUsers",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloud9:CreateEnvironmentEC2",
        "cloud9:CreateEnvironmentSSH"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Null": {
          "cloud9:OwnerArn": "true"
        }
      }
    },
    {
      "Action": [
        "cloud9:GetUserPublicKey"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Null": {
          "cloud9:UserArn": "true"
        }
      }
    },
    {
      "Action": [
        "cloud9:DescribeEnvironmentMemberships"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "Null": {
          "cloud9:EnvironmentId": "true",
          "cloud9:UserArn": "true"
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "cloud9.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloud9:ValidateEnvironmentName",
      "cloud9:UpdateUserSettings",
      "cloud9:GetUserSettings",
      "iam:GetUser",
      "iam:ListUsers",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloud9:CreateEnvironmentEC2",
      "cloud9:CreateEnvironmentSSH"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Null": {
        "cloud9:OwnerArn": "true"
      }
    }
  },
  {
    "Action": [
      "cloud9:GetUserPublicKey"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Null": {
        "cloud9:UserArn": "true"
      }
    }
  },
  {
    "Action": [
      "cloud9:DescribeEnvironmentMemberships"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "Null": {
        "cloud9:EnvironmentId": "true",
        "cloud9:UserArn": "true"
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "cloud9.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:DeleteThingShadow",
        "iot:GetThingShadow",
        "iot:UpdateThingShadow"
      ],
      "Resource": [
        "arn:aws:iot:*:*:thing/GG_*",
        "arn:aws:iot:*:*:thing/*-gcm",
        "arn:aws:iot:*:*:thing/*-gda",
        "arn:aws:iot:*:*:thing/*-gci"
      ],
      "Effect": "Allow",
      "Sid": "AllowGreengrassAccessToShadows"
    },
    {
      "Action": [
        "iot:DescribeThing"
      ],
      "Resource": "arn:aws:iot:*:*:thing/*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassToDescribeThings"
    },
    {
      "Action": [
        "iot:DescribeCertificate"
      ],
      "Resource": "arn:aws:iot:*:*:cert/*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassToDescribeCertificates"
    },
    {
      "Action": [
        "greengrass:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassToCallGreengrassServices"
    },
    {
      "Action": [
        "lambda:GetFunction",
        "lambda:GetFunctionConfiguration"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassToGetLambdaFunctions"
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassToGetGreengrassSecrets"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::*Greengrass*",
        "arn:aws:s3:::*GreenGrass*",
        "arn:aws:s3:::*greengrass*",
        "arn:aws:s3:::*Sagemaker*",
        "arn:aws:s3:::*SageMaker*",
        "arn:aws:s3:::*sagemaker*"
      ],
      "Effect": "Allow",
      "Sid": "AllowGreengrassAccessToS3Objects"
    },
    {
      "Action": [
        "s3:GetBucketLocation"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AllowGreengrassAccessToS3BucketLocation"
    },
    {
      "Action": [
        "sagemaker:DescribeTrainingJob"
      ],
      "Resource": [
        "arn:aws:sagemaker:*:*:training-job/*"
      ],
      "Effect": "Allow",
      "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
    }
  ]
}
[
  {
    "Action": [
      "iot:DeleteThingShadow",
      "iot:GetThingShadow",
      "iot:UpdateThingShadow"
    ],
    "Resource": [
      "arn:aws:iot:*:*:thing/GG_*",
      "arn:aws:iot:*:*:thing/*-gcm",
      "arn:aws:iot:*:*:thing/*-gda",
      "arn:aws:iot:*:*:thing/*-gci"
    ],
    "Effect": "Allow",
    "Sid": "AllowGreengrassAccessToShadows"
  },
  {
    "Action": [
      "iot:DescribeThing"
    ],
    "Resource": "arn:aws:iot:*:*:thing/*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassToDescribeThings"
  },
  {
    "Action": [
      "iot:DescribeCertificate"
    ],
    "Resource": "arn:aws:iot:*:*:cert/*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassToDescribeCertificates"
  },
  {
    "Action": [
      "greengrass:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassToCallGreengrassServices"
  },
  {
    "Action": [
      "lambda:GetFunction",
      "lambda:GetFunctionConfiguration"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassToGetLambdaFunctions"
  },
  {
    "Action": [
      "secretsmanager:GetSecretValue"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassToGetGreengrassSecrets"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::*Greengrass*",
      "arn:aws:s3:::*GreenGrass*",
      "arn:aws:s3:::*greengrass*",
      "arn:aws:s3:::*Sagemaker*",
      "arn:aws:s3:::*SageMaker*",
      "arn:aws:s3:::*sagemaker*"
    ],
    "Effect": "Allow",
    "Sid": "AllowGreengrassAccessToS3Objects"
  },
  {
    "Action": [
      "s3:GetBucketLocation"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AllowGreengrassAccessToS3BucketLocation"
  },
  {
    "Action": [
      "sagemaker:DescribeTrainingJob"
    ],
    "Resource": [
      "arn:aws:sagemaker:*:*:training-job/*"
    ],
    "Effect": "Allow",
    "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudtrail:LookupEvents",
        "iam:ListAccountAliases",
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudtrail:CreateTrail",
        "cloudtrail:StartLogging",
        "cloudtrail:StopLogging",
        "cloudtrail:UpdateTrail",
        "cloudtrail:DeleteTrail",
        "cloudtrail:PutEventSelectors"
      ],
      "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteBucketPolicy",
        "s3:DeleteBucketWebsite",
        "s3:DeleteObject",
        "s3:DeleteObjectTagging",
        "s3:DeleteObjectVersion",
        "s3:DeleteObjectVersionTagging",
        "s3:DeleteReplicationConfiguration",
        "s3:PutBucketPolicy"
      ],
      "Resource": [
        "arn:aws:s3:::awsmacie-*",
        "arn:aws:s3:::awsmacietrail-*",
        "arn:aws:s3:::*-awsmacietrail-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTags",
      "cloudtrail:LookupEvents",
      "iam:ListAccountAliases",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudtrail:CreateTrail",
      "cloudtrail:StartLogging",
      "cloudtrail:StopLogging",
      "cloudtrail:UpdateTrail",
      "cloudtrail:DeleteTrail",
      "cloudtrail:PutEventSelectors"
    ],
    "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteBucketPolicy",
      "s3:DeleteBucketWebsite",
      "s3:DeleteObject",
      "s3:DeleteObjectTagging",
      "s3:DeleteObjectVersion",
      "s3:DeleteObjectVersionTagging",
      "s3:DeleteReplicationConfiguration",
      "s3:PutBucketPolicy"
    ],
    "Resource": [
      "arn:aws:s3:::awsmacie-*",
      "arn:aws:s3:::awsmacietrail-*",
      "arn:aws:s3:::*-awsmacietrail-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:Describe*",
        "ec2:AcceptVpcEndpointConnections",
        "ec2:AllocateAddress",
        "ec2:AssignIpv6Addresses",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssociateAddress",
        "ec2:AssociateDhcpOptions",
        "ec2:AssociateRouteTable",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateVpcCidrBlock",
        "ec2:AttachInternetGateway",
        "ec2:AttachNetworkInterface",
        "ec2:AttachVpnGateway",
        "ec2:CreateCustomerGateway",
        "ec2:CreateDefaultSubnet",
        "ec2:CreateDefaultVpc",
        "ec2:CreateDhcpOptions",
        "ec2:CreateEgressOnlyInternetGateway",
        "ec2:CreateFlowLogs",
        "ec2:CreateInternetGateway",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkAcl",
        "ec2:CreateNetworkAclEntry",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:CreatePlacementGroup",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpcEndpointConnectionNotification",
        "ec2:CreateVpcEndpointServiceConfiguration",
        "ec2:CreateVpnConnection",
        "ec2:CreateVpnConnectionRoute",
        "ec2:CreateVpnGateway",
        "ec2:DeleteEgressOnlyInternetGateway",
        "ec2:DeleteFlowLogs",
        "ec2:DeleteNatGateway",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DeletePlacementGroup",
        "ec2:DeleteSubnet",
        "ec2:DeleteTags",
        "ec2:DeleteVpc",
        "ec2:DeleteVpcEndpointConnectionNotifications",
        "ec2:DeleteVpcEndpoints",
        "ec2:DeleteVpcEndpointServiceConfigurations",
        "ec2:DeleteVpnConnection",
        "ec2:DeleteVpnConnectionRoute",
        "ec2:DeleteVpnGateway",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeClassicLinkInstances",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeEgressOnlyInternetGateways",
        "ec2:DescribeFlowLogs",
        "ec2:DescribeInstances",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeMovingAddresses",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfacePermissions",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePlacementGroups",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeStaleSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcClassicLink",
        "ec2:DescribeVpcClassicLinkDnsSupport",
        "ec2:DescribeVpcEndpointConnectionNotifications",
        "ec2:DescribeVpcEndpointConnections",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcEndpointServiceConfigurations",
        "ec2:DescribeVpcEndpointServicePermissions",
        "ec2:DescribeVpcEndpointServices",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpnConnections",
        "ec2:DescribeVpnGateways",
        "ec2:DetachInternetGateway",
        "ec2:DetachNetworkInterface",
        "ec2:DetachVpnGateway",
        "ec2:DisableVgwRoutePropagation",
        "ec2:DisableVpcClassicLinkDnsSupport",
        "ec2:DisassociateAddress",
        "ec2:DisassociateRouteTable",
        "ec2:DisassociateSubnetCidrBlock",
        "ec2:DisassociateVpcCidrBlock",
        "ec2:EnableVgwRoutePropagation",
        "ec2:EnableVpcClassicLinkDnsSupport",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:ModifyVpcEndpoint",
        "ec2:ModifyVpcEndpointConnectionNotification",
        "ec2:ModifyVpcEndpointServiceConfiguration",
        "ec2:ModifyVpcEndpointServicePermissions",
        "ec2:ModifyVpcPeeringConnectionOptions",
        "ec2:ModifyVpcTenancy",
        "ec2:MoveAddressToVpc",
        "ec2:RejectVpcEndpointConnections",
        "ec2:ReleaseAddress",
        "ec2:ReplaceNetworkAclAssociation",
        "ec2:ReplaceNetworkAclEntry",
        "ec2:ReplaceRoute",
        "ec2:ReplaceRouteTableAssociation",
        "ec2:ResetNetworkInterfaceAttribute",
        "ec2:RestoreAddressToClassic",
        "ec2:UnassignIpv6Addresses",
        "ec2:UnassignPrivateIpAddresses",
        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
        "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
        "directconnect:*",
        "route53:*",
        "route53domains:*",
        "cloudfront:ListDistributions",
        "elasticloadbalancing:*",
        "elasticbeanstalk:Describe*",
        "elasticbeanstalk:List*",
        "elasticbeanstalk:RetrieveEnvironmentInfo",
        "elasticbeanstalk:RequestEnvironmentInfo",
        "sns:ListTopics",
        "sns:ListSubscriptionsByTopic",
        "sns:CreateTopic",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DeleteAlarms",
        "cloudwatch:GetMetricStatistics",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AcceptVpcPeeringConnection",
        "ec2:AttachClassicLinkVpc",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateVpcPeeringConnection",
        "ec2:DeleteCustomerGateway",
        "ec2:DeleteDhcpOptions",
        "ec2:DeleteInternetGateway",
        "ec2:DeleteNetworkAcl",
        "ec2:DeleteNetworkAclEntry",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteVolume",
        "ec2:DeleteVpcPeeringConnection",
        "ec2:DetachClassicLinkVpc",
        "ec2:DisableVpcClassicLink",
        "ec2:EnableVpcClassicLink",
        "ec2:GetConsoleScreenshot",
        "ec2:RejectVpcPeeringConnection",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:GetBucketWebsiteConfiguration"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole",
        "iam:ListRoles",
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/flow-logs-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AcceptTransitGatewayVpcAttachment",
        "ec2:AssociateTransitGatewayRouteTable",
        "ec2:CreateTransitGateway",
        "ec2:CreateTransitGatewayRoute",
        "ec2:CreateTransitGatewayRouteTable",
        "ec2:CreateTransitGatewayVpcAttachment",
        "ec2:DeleteTransitGateway",
        "ec2:DeleteTransitGatewayRoute",
        "ec2:DeleteTransitGatewayRouteTable",
        "ec2:DeleteTransitGatewayVpcAttachment",
        "ec2:DescribeTransitGatewayAttachments",
        "ec2:DescribeTransitGatewayRouteTables",
        "ec2:DescribeTransitGatewayVpcAttachments",
        "ec2:DescribeTransitGateways",
        "ec2:DisableTransitGatewayRouteTablePropagation",
        "ec2:DisassociateTransitGatewayRouteTable",
        "ec2:EnableTransitGatewayRouteTablePropagation",
        "ec2:ExportTransitGatewayRoutes",
        "ec2:GetTransitGatewayAttachmentPropagations",
        "ec2:GetTransitGatewayRouteTableAssociations",
        "ec2:GetTransitGatewayRouteTablePropagations",
        "ec2:ModifyTransitGatewayVpcAttachment",
        "ec2:RejectTransitGatewayVpcAttachment",
        "ec2:ReplaceTransitGatewayRoute",
        "ec2:SearchTransitGatewayRoutes"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:Describe*",
      "ec2:AcceptVpcEndpointConnections",
      "ec2:AllocateAddress",
      "ec2:AssignIpv6Addresses",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssociateAddress",
      "ec2:AssociateDhcpOptions",
      "ec2:AssociateRouteTable",
      "ec2:AssociateSubnetCidrBlock",
      "ec2:AssociateVpcCidrBlock",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:AttachVpnGateway",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDefaultSubnet",
      "ec2:CreateDefaultVpc",
      "ec2:CreateDhcpOptions",
      "ec2:CreateEgressOnlyInternetGateway",
      "ec2:CreateFlowLogs",
      "ec2:CreateInternetGateway",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkAcl",
      "ec2:CreateNetworkAclEntry",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:CreatePlacementGroup",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:CreateVpcEndpointConnectionNotification",
      "ec2:CreateVpcEndpointServiceConfiguration",
      "ec2:CreateVpnConnection",
      "ec2:CreateVpnConnectionRoute",
      "ec2:CreateVpnGateway",
      "ec2:DeleteEgressOnlyInternetGateway",
      "ec2:DeleteFlowLogs",
      "ec2:DeleteNatGateway",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DeletePlacementGroup",
      "ec2:DeleteSubnet",
      "ec2:DeleteTags",
      "ec2:DeleteVpc",
      "ec2:DeleteVpcEndpointConnectionNotifications",
      "ec2:DeleteVpcEndpoints",
      "ec2:DeleteVpcEndpointServiceConfigurations",
      "ec2:DeleteVpnConnection",
      "ec2:DeleteVpnConnectionRoute",
      "ec2:DeleteVpnGateway",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeEgressOnlyInternetGateways",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeInstances",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfacePermissions",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePlacementGroups",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeVpcClassicLinkDnsSupport",
      "ec2:DescribeVpcEndpointConnectionNotifications",
      "ec2:DescribeVpcEndpointConnections",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcEndpointServiceConfigurations",
      "ec2:DescribeVpcEndpointServicePermissions",
      "ec2:DescribeVpcEndpointServices",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways",
      "ec2:DetachInternetGateway",
      "ec2:DetachNetworkInterface",
      "ec2:DetachVpnGateway",
      "ec2:DisableVgwRoutePropagation",
      "ec2:DisableVpcClassicLinkDnsSupport",
      "ec2:DisassociateAddress",
      "ec2:DisassociateRouteTable",
      "ec2:DisassociateSubnetCidrBlock",
      "ec2:DisassociateVpcCidrBlock",
      "ec2:EnableVgwRoutePropagation",
      "ec2:EnableVpcClassicLinkDnsSupport",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ModifyVpcEndpoint",
      "ec2:ModifyVpcEndpointConnectionNotification",
      "ec2:ModifyVpcEndpointServiceConfiguration",
      "ec2:ModifyVpcEndpointServicePermissions",
      "ec2:ModifyVpcPeeringConnectionOptions",
      "ec2:ModifyVpcTenancy",
      "ec2:MoveAddressToVpc",
      "ec2:RejectVpcEndpointConnections",
      "ec2:ReleaseAddress",
      "ec2:ReplaceNetworkAclAssociation",
      "ec2:ReplaceNetworkAclEntry",
      "ec2:ReplaceRoute",
      "ec2:ReplaceRouteTableAssociation",
      "ec2:ResetNetworkInterfaceAttribute",
      "ec2:RestoreAddressToClassic",
      "ec2:UnassignIpv6Addresses",
      "ec2:UnassignPrivateIpAddresses",
      "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "directconnect:*",
      "route53:*",
      "route53domains:*",
      "cloudfront:ListDistributions",
      "elasticloadbalancing:*",
      "elasticbeanstalk:Describe*",
      "elasticbeanstalk:List*",
      "elasticbeanstalk:RetrieveEnvironmentInfo",
      "elasticbeanstalk:RequestEnvironmentInfo",
      "sns:ListTopics",
      "sns:ListSubscriptionsByTopic",
      "sns:CreateTopic",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DeleteAlarms",
      "cloudwatch:GetMetricStatistics",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AcceptVpcPeeringConnection",
      "ec2:AttachClassicLinkVpc",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateVpcPeeringConnection",
      "ec2:DeleteCustomerGateway",
      "ec2:DeleteDhcpOptions",
      "ec2:DeleteInternetGateway",
      "ec2:DeleteNetworkAcl",
      "ec2:DeleteNetworkAclEntry",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteVolume",
      "ec2:DeleteVpcPeeringConnection",
      "ec2:DetachClassicLinkVpc",
      "ec2:DisableVpcClassicLink",
      "ec2:EnableVpcClassicLink",
      "ec2:GetConsoleScreenshot",
      "ec2:RejectVpcPeeringConnection",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:GetBucketWebsiteConfiguration"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole",
      "iam:ListRoles",
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/flow-logs-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AcceptTransitGatewayVpcAttachment",
      "ec2:AssociateTransitGatewayRouteTable",
      "ec2:CreateTransitGateway",
      "ec2:CreateTransitGatewayRoute",
      "ec2:CreateTransitGatewayRouteTable",
      "ec2:CreateTransitGatewayVpcAttachment",
      "ec2:DeleteTransitGateway",
      "ec2:DeleteTransitGatewayRoute",
      "ec2:DeleteTransitGatewayRouteTable",
      "ec2:DeleteTransitGatewayVpcAttachment",
      "ec2:DescribeTransitGatewayAttachments",
      "ec2:DescribeTransitGatewayRouteTables",
      "ec2:DescribeTransitGatewayVpcAttachments",
      "ec2:DescribeTransitGateways",
      "ec2:DisableTransitGatewayRouteTablePropagation",
      "ec2:DisassociateTransitGatewayRouteTable",
      "ec2:EnableTransitGatewayRouteTablePropagation",
      "ec2:ExportTransitGatewayRoutes",
      "ec2:GetTransitGatewayAttachmentPropagations",
      "ec2:GetTransitGatewayRouteTableAssociations",
      "ec2:GetTransitGatewayRouteTablePropagations",
      "ec2:ModifyTransitGatewayVpcAttachment",
      "ec2:RejectTransitGatewayVpcAttachment",
      "ec2:ReplaceTransitGatewayRoute",
      "ec2:SearchTransitGatewayRoutes"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot1click:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot1click:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "wam:AuthenticatePackager",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "wam:AuthenticatePackager",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeAddresses",
        "ec2:AssociateAddress",
        "ec2:DisassociateAddress",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeAddresses",
      "ec2:AssociateAddress",
      "ec2:DisassociateAddress",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": {
    "Action": [
      "acm-pca:DescribeCertificateAuthority",
      "acm-pca:DescribeCertificateAuthorityAuditReport",
      "acm-pca:ListCertificateAuthorities",
      "acm-pca:GetCertificateAuthorityCsr",
      "acm-pca:GetCertificateAuthorityCertificate",
      "acm-pca:GetCertificate",
      "acm-pca:ListPermissions",
      "acm-pca:ListTags"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
}
{
  "Action": [
    "acm-pca:DescribeCertificateAuthority",
    "acm-pca:DescribeCertificateAuthorityAuditReport",
    "acm-pca:ListCertificateAuthorities",
    "acm-pca:GetCertificateAuthorityCsr",
    "acm-pca:GetCertificateAuthorityCertificate",
    "acm-pca:GetCertificate",
    "acm-pca:ListPermissions",
    "acm-pca:ListTags"
  ],
  "Resource": "*",
  "Effect": "Allow"
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "xray:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "xray:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "MetricsAccess"
    },
    {
      "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets",
        "xray:GetSamplingStatisticSummaries"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "XRayAccess"
    },
    {
      "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:ReceiveMessage",
        "sqs:SendMessage"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "QueueAccess"
    },
    {
      "Action": [
        "s3:Get*",
        "s3:List*",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::elasticbeanstalk-*",
        "arn:aws:s3:::elasticbeanstalk-*/*"
      ],
      "Effect": "Allow",
      "Sid": "BucketAccess"
    },
    {
      "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:DeleteItem",
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
      ],
      "Resource": [
        "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
      ],
      "Effect": "Allow",
      "Sid": "DynamoPeriodicTasks"
    },
    {
      "Action": [
        "logs:PutLogEvents",
        "logs:CreateLogStream"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
      ],
      "Effect": "Allow",
      "Sid": "CloudWatchLogsAccess"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "MetricsAccess"
  },
  {
    "Action": [
      "xray:PutTraceSegments",
      "xray:PutTelemetryRecords",
      "xray:GetSamplingRules",
      "xray:GetSamplingTargets",
      "xray:GetSamplingStatisticSummaries"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "XRayAccess"
  },
  {
    "Action": [
      "sqs:ChangeMessageVisibility",
      "sqs:DeleteMessage",
      "sqs:ReceiveMessage",
      "sqs:SendMessage"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "QueueAccess"
  },
  {
    "Action": [
      "s3:Get*",
      "s3:List*",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::elasticbeanstalk-*",
      "arn:aws:s3:::elasticbeanstalk-*/*"
    ],
    "Effect": "Allow",
    "Sid": "BucketAccess"
  },
  {
    "Action": [
      "dynamodb:BatchGetItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:DeleteItem",
      "dynamodb:GetItem",
      "dynamodb:PutItem",
      "dynamodb:Query",
      "dynamodb:Scan",
      "dynamodb:UpdateItem"
    ],
    "Resource": [
      "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
    ],
    "Effect": "Allow",
    "Sid": "DynamoPeriodicTasks"
  },
  {
    "Action": [
      "logs:PutLogEvents",
      "logs:CreateLogStream"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
    ],
    "Effect": "Allow",
    "Sid": "CloudWatchLogsAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "directconnect:*",
        "ec2:DescribeVpnGateways",
        "ec2:DescribeTransitGateways"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "directconnect:*",
      "ec2:DescribeVpnGateways",
      "ec2:DescribeTransitGateways"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codebuild:*",
        "codecommit:GetBranch",
        "codecommit:GetCommit",
        "codecommit:GetRepository",
        "codecommit:ListBranches",
        "codecommit:ListRepositories",
        "cloudwatch:GetMetricStatistics",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ecr:DescribeRepositories",
        "ecr:ListImages",
        "events:DeleteRule",
        "events:DescribeRule",
        "events:DisableRule",
        "events:EnableRule",
        "events:ListTargetsByRule",
        "events:ListRuleNamesByTarget",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "logs:GetLogEvents",
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:DeleteLogGroup"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:PutParameter"
      ],
      "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codebuild:*",
      "codecommit:GetBranch",
      "codecommit:GetCommit",
      "codecommit:GetRepository",
      "codecommit:ListBranches",
      "codecommit:ListRepositories",
      "cloudwatch:GetMetricStatistics",
      "ec2:DescribeVpcs",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "events:DeleteRule",
      "events:DescribeRule",
      "events:DisableRule",
      "events:EnableRule",
      "events:ListTargetsByRule",
      "events:ListRuleNamesByTarget",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "logs:GetLogEvents",
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:DeleteLogGroup"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:PutParameter"
    ],
    "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "kinesisanalytics:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kinesis:CreateStream",
        "kinesis:DeleteStream",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kinesis:PutRecord",
        "kinesis:PutRecords"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:ListDeliveryStreams"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "logs:GetLogEvents",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:ListPolicyVersions",
        "iam:ListRoles"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "kinesisanalytics:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kinesis:CreateStream",
      "kinesis:DeleteStream",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "kinesis:PutRecord",
      "kinesis:PutRecords"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:ListDeliveryStreams"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "logs:GetLogEvents",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:ListPolicyVersions",
      "iam:ListRoles"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:GetEventSelectors",
        "cloudwatch:DescribeAlarms",
        "logs:DescribeMetricFilters",
        "sns:ListSubscriptionsByTopic",
        "config:DescribeConfigurationRecorders",
        "config:DescribeConfigurationRecorderStatus",
        "config:DescribeConfigRules",
        "config:BatchGetResourceConfig",
        "config:SelectResourceConfig"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "config:PutConfigRule",
        "config:DeleteConfigRule",
        "config:GetComplianceDetailsByConfigRule"
      ],
      "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/*securityhub*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:GetEventSelectors",
      "cloudwatch:DescribeAlarms",
      "logs:DescribeMetricFilters",
      "sns:ListSubscriptionsByTopic",
      "config:DescribeConfigurationRecorders",
      "config:DescribeConfigurationRecorderStatus",
      "config:DescribeConfigRules",
      "config:BatchGetResourceConfig",
      "config:SelectResourceConfig"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "config:PutConfigRule",
      "config:DeleteConfigRule",
      "config:GetComplianceDetailsByConfigRule"
    ],
    "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/*securityhub*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:ExecuteChangeSet",
        "cloudformation:DeleteChangeSet",
        "cloudformation:ListChangeSets",
        "cloudformation:DescribeStacks"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/awseb-*",
        "arn:aws:cloudformation:*:*:stack/eb-*"
      ],
      "Effect": "Allow",
      "Sid": "AllowCloudformationChangeSetOperationsOnElasticBeanstalkStacks"
    },
    {
      "Action": "elasticloadbalancing:DescribeLoadBalancers",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "AllowElasticBeanstalkStacksUpdateExecuteSuccessfully"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:ExecuteChangeSet",
      "cloudformation:DeleteChangeSet",
      "cloudformation:ListChangeSets",
      "cloudformation:DescribeStacks"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/awseb-*",
      "arn:aws:cloudformation:*:*:stack/eb-*"
    ],
    "Effect": "Allow",
    "Sid": "AllowCloudformationChangeSetOperationsOnElasticBeanstalkStacks"
  },
  {
    "Action": "elasticloadbalancing:DescribeLoadBalancers",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "AllowElasticBeanstalkStacksUpdateExecuteSuccessfully"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "elasticloadbalancing:AddListenerCertificates",
        "elasticloadbalancing:RemoveListenerCertificates",
        "elasticloadbalancing:ModifyListener",
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingTargets",
        "xray:GetSamplingRules"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "firehose:DescribeDeliveryStream",
        "firehose:PutRecord",
        "firehose:PutRecordBatch"
      ],
      "Resource": "arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "acm:DescribeCertificate"
      ],
      "Resource": "arn:aws:acm:*:*:certificate/*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "elasticloadbalancing:AddListenerCertificates",
      "elasticloadbalancing:RemoveListenerCertificates",
      "elasticloadbalancing:ModifyListener",
      "xray:PutTraceSegments",
      "xray:PutTelemetryRecords",
      "xray:GetSamplingTargets",
      "xray:GetSamplingRules"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "firehose:DescribeDeliveryStream",
      "firehose:PutRecord",
      "firehose:PutRecordBatch"
    ],
    "Resource": "arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "acm:DescribeCertificate"
    ],
    "Resource": "arn:aws:acm:*:*:certificate/*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-portal:ViewBilling"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-portal:ViewBilling"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "glacier:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "glacier:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:DescribeDirectories",
        "ec2:DescribeNetworkInterfaceAttribute",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "fsx:Describe*",
        "fsx:ListTagsForResource",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ds:DescribeDirectories",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "fsx:Describe*",
      "fsx:ListTagsForResource",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ds:AuthorizeApplication",
        "ds:CheckAlias",
        "ds:CreateAlias",
        "ds:CreateDirectory",
        "ds:CreateIdentityPoolDirectory",
        "ds:CreateDomain",
        "ds:DeleteAlias",
        "ds:DeleteDirectory",
        "ds:DescribeDirectories",
        "ds:ExtendDirectory",
        "ds:GetDirectoryLimits",
        "ds:ListAuthorizedApplications",
        "ds:UnauthorizeApplication",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteSubnet",
        "ec2:DeleteVpc",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeDomains",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "kms:DescribeKey",
        "kms:ListAliases",
        "lambda:ListFunctions",
        "route53:ChangeResourceRecordSets",
        "route53:ListHostedZones",
        "route53:ListResourceRecordSets",
        "route53domains:CheckDomainAvailability",
        "route53domains:ListDomains",
        "ses:*",
        "workmail:*",
        "iam:ListRoles",
        "logs:DescribeLogGroups",
        "logs:CreateLogGroup",
        "logs:PutRetentionPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "events.workmail.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/events.workmail.amazonaws.com/AWSServiceRoleForAmazonWorkMailEvents*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/*workmail*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "events.workmail.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ds:AuthorizeApplication",
      "ds:CheckAlias",
      "ds:CreateAlias",
      "ds:CreateDirectory",
      "ds:CreateIdentityPoolDirectory",
      "ds:CreateDomain",
      "ds:DeleteAlias",
      "ds:DeleteDirectory",
      "ds:DescribeDirectories",
      "ds:ExtendDirectory",
      "ds:GetDirectoryLimits",
      "ds:ListAuthorizedApplications",
      "ds:UnauthorizeApplication",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVpc",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSubnet",
      "ec2:DeleteVpc",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeDomains",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "kms:DescribeKey",
      "kms:ListAliases",
      "lambda:ListFunctions",
      "route53:ChangeResourceRecordSets",
      "route53:ListHostedZones",
      "route53:ListResourceRecordSets",
      "route53domains:CheckDomainAvailability",
      "route53domains:ListDomains",
      "ses:*",
      "workmail:*",
      "iam:ListRoles",
      "logs:DescribeLogGroups",
      "logs:CreateLogGroup",
      "logs:PutRetentionPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "events.workmail.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/events.workmail.amazonaws.com/AWSServiceRoleForAmazonWorkMailEvents*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/*workmail*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "events.workmail.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteSecurityGroup",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateNetworkInterface",
      "ec2:CreateSecurityGroup",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteSecurityGroup",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "comprehendmedical:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "comprehendmedical:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:ViewSubscriptions",
        "aws-marketplace:Subscribe",
        "aws-marketplace:Unsubscribe"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:ViewSubscriptions",
      "aws-marketplace:Subscribe",
      "aws-marketplace:Unsubscribe"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AttachVolume",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CopyImage",
        "ec2:CreateImage",
        "ec2:CreateKeypair",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSnapshot",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:DeleteKeypair",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteSnapshot",
        "ec2:DeleteVolume",
        "ec2:DeregisterImage",
        "ec2:DescribeImageAttribute",
        "ec2:DescribeImages",
        "ec2:DescribeInstances",
        "ec2:DescribeRegions",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVolumes",
        "ec2:DetachVolume",
        "ec2:GetPasswordData",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifySnapshotAttribute",
        "ec2:RegisterImage",
        "ec2:RunInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "EC2Access"
    },
    {
      "Action": [
        "s3:Get*",
        "s3:List*",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::elasticbeanstalk-*",
        "arn:aws:s3:::elasticbeanstalk-*/*"
      ],
      "Effect": "Allow",
      "Sid": "BucketAccess"
    },
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*",
      "Effect": "Allow",
      "Sid": "CloudWatchLogsAccess"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AttachVolume",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CopyImage",
      "ec2:CreateImage",
      "ec2:CreateKeypair",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSnapshot",
      "ec2:CreateTags",
      "ec2:CreateVolume",
      "ec2:DeleteKeypair",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSnapshot",
      "ec2:DeleteVolume",
      "ec2:DeregisterImage",
      "ec2:DescribeImageAttribute",
      "ec2:DescribeImages",
      "ec2:DescribeInstances",
      "ec2:DescribeRegions",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshots",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVolumes",
      "ec2:DetachVolume",
      "ec2:GetPasswordData",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:ModifySnapshotAttribute",
      "ec2:RegisterImage",
      "ec2:RunInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "EC2Access"
  },
  {
    "Action": [
      "s3:Get*",
      "s3:List*",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::elasticbeanstalk-*",
      "arn:aws:s3:::elasticbeanstalk-*/*"
    ],
    "Effect": "Allow",
    "Sid": "BucketAccess"
  },
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*",
    "Effect": "Allow",
    "Sid": "CloudWatchLogsAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "datasync:Describe*",
        "datasync:List*",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "elasticfilesystem:DescribeFileSystems",
        "elasticfilesystem:DescribeMountTargets",
        "iam:GetRole",
        "iam:ListRoles",
        "logs:DescribeLogGroups",
        "s3:ListAllMyBuckets",
        "s3:ListBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "datasync:Describe*",
      "datasync:List*",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeMountTargets",
      "iam:GetRole",
      "iam:ListRoles",
      "logs:DescribeLogGroups",
      "s3:ListAllMyBuckets",
      "s3:ListBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface",
        "ec2:CreateNetworkInterfacePermission"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "0"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface",
      "ec2:CreateNetworkInterfacePermission"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DownloadDBLogFilePortion",
        "rds:ListTagsForResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "kms:ListKeys",
        "kms:ListRetirableGrants",
        "kms:ListAliases",
        "kms:ListKeyPolicies"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
        "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DownloadDBLogFilePortion",
      "rds:ListTagsForResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcs"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "kms:ListKeys",
      "kms:ListRetirableGrants",
      "kms:ListAliases",
      "kms:ListKeyPolicies"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
      "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "support:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "support:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:DescribeAlarms",
        "elasticmapreduce:ListInstanceGroups",
        "elasticmapreduce:ModifyInstanceGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:DescribeAlarms",
      "elasticmapreduce:ListInstanceGroups",
      "elasticmapreduce:ModifyInstanceGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mediaconvert:Get*",
        "mediaconvert:List*",
        "mediaconvert:DescribeEndpoints",
        "s3:ListAllMyBuckets",
        "s3:ListBucket"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "mediaconvert:Get*",
      "mediaconvert:List*",
      "mediaconvert:DescribeEndpoints",
      "s3:ListAllMyBuckets",
      "s3:ListBucket"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:ListStreams"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "dynamodb:DescribeStream",
      "dynamodb:GetRecords",
      "dynamodb:GetShardIterator",
      "dynamodb:ListStreams"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStacks",
        "cloudformation:SetStackPolicy",
        "cloudformation:ValidateTemplate",
        "cloudformation:UpdateStack",
        "cloudformation:CreateChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:ExecuteChangeSet",
        "cloudformation:ListChangeSets",
        "cloudformation:DeleteChangeSet",
        "cloudformation:TagResource",
        "cloudformation:CreateStackSet",
        "cloudformation:CreateStackInstances",
        "cloudformation:UpdateStackSet",
        "cloudformation:UpdateStackInstances",
        "cloudformation:DeleteStackSet",
        "cloudformation:DeleteStackInstances",
        "cloudformation:DescribeStackSet",
        "cloudformation:DescribeStackInstance",
        "cloudformation:DescribeStackSetOperation",
        "cloudformation:ListStackInstances",
        "cloudformation:ListStackResources",
        "cloudformation:ListStackSetOperations",
        "cloudformation:ListStackSetOperationResults"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/SC-*",
        "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
        "arn:aws:cloudformation:*:*:changeSet/SC-*",
        "arn:aws:cloudformation:*:*:stackset/SC-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:GetTemplateSummary",
        "servicecatalog:DescribeProduct",
        "servicecatalog:DescribeProductView",
        "servicecatalog:DescribeProvisioningParameters",
        "servicecatalog:ListLaunchPaths",
        "servicecatalog:ProvisionProduct",
        "servicecatalog:SearchProducts",
        "ssm:DescribeDocument",
        "ssm:GetAutomationExecution",
        "config:DescribeConfigurationRecorders",
        "config:DescribeConfigurationRecorderStatus"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "servicecatalog:DescribeProvisionedProduct",
        "servicecatalog:DescribeRecord",
        "servicecatalog:ListRecordHistory",
        "servicecatalog:ListStackInstancesForProvisionedProduct",
        "servicecatalog:ScanProvisionedProducts",
        "servicecatalog:TerminateProvisionedProduct",
        "servicecatalog:UpdateProvisionedProduct",
        "servicecatalog:SearchProvisionedProducts",
        "servicecatalog:CreateProvisionedProductPlan",
        "servicecatalog:DescribeProvisionedProductPlan",
        "servicecatalog:ExecuteProvisionedProductPlan",
        "servicecatalog:DeleteProvisionedProductPlan",
        "servicecatalog:ListProvisionedProductPlans",
        "servicecatalog:ListServiceActionsForProvisioningArtifact",
        "servicecatalog:ExecuteProvisionedProductServiceAction",
        "servicecatalog:DescribeServiceActionExecutionParameters"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "servicecatalog:userLevel": "self"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStacks",
      "cloudformation:SetStackPolicy",
      "cloudformation:ValidateTemplate",
      "cloudformation:UpdateStack",
      "cloudformation:CreateChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:ExecuteChangeSet",
      "cloudformation:ListChangeSets",
      "cloudformation:DeleteChangeSet",
      "cloudformation:TagResource",
      "cloudformation:CreateStackSet",
      "cloudformation:CreateStackInstances",
      "cloudformation:UpdateStackSet",
      "cloudformation:UpdateStackInstances",
      "cloudformation:DeleteStackSet",
      "cloudformation:DeleteStackInstances",
      "cloudformation:DescribeStackSet",
      "cloudformation:DescribeStackInstance",
      "cloudformation:DescribeStackSetOperation",
      "cloudformation:ListStackInstances",
      "cloudformation:ListStackResources",
      "cloudformation:ListStackSetOperations",
      "cloudformation:ListStackSetOperationResults"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/SC-*",
      "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
      "arn:aws:cloudformation:*:*:changeSet/SC-*",
      "arn:aws:cloudformation:*:*:stackset/SC-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:GetTemplateSummary",
      "servicecatalog:DescribeProduct",
      "servicecatalog:DescribeProductView",
      "servicecatalog:DescribeProvisioningParameters",
      "servicecatalog:ListLaunchPaths",
      "servicecatalog:ProvisionProduct",
      "servicecatalog:SearchProducts",
      "ssm:DescribeDocument",
      "ssm:GetAutomationExecution",
      "config:DescribeConfigurationRecorders",
      "config:DescribeConfigurationRecorderStatus"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "servicecatalog:DescribeProvisionedProduct",
      "servicecatalog:DescribeRecord",
      "servicecatalog:ListRecordHistory",
      "servicecatalog:ListStackInstancesForProvisionedProduct",
      "servicecatalog:ScanProvisionedProducts",
      "servicecatalog:TerminateProvisionedProduct",
      "servicecatalog:UpdateProvisionedProduct",
      "servicecatalog:SearchProvisionedProducts",
      "servicecatalog:CreateProvisionedProductPlan",
      "servicecatalog:DescribeProvisionedProductPlan",
      "servicecatalog:ExecuteProvisionedProductPlan",
      "servicecatalog:DeleteProvisionedProductPlan",
      "servicecatalog:ListProvisionedProductPlans",
      "servicecatalog:ListServiceActionsForProvisioningArtifact",
      "servicecatalog:ExecuteProvisionedProductServiceAction",
      "servicecatalog:DescribeServiceActionExecutionParameters"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "servicecatalog:userLevel": "self"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:DeleteSSHPublicKey",
        "iam:GetSSHPublicKey",
        "iam:ListSSHPublicKeys",
        "iam:UpdateSSHPublicKey",
        "iam:UploadSSHPublicKey"
      ],
      "Resource": "arn:aws:iam::*:user/${aws:username}",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:DeleteSSHPublicKey",
      "iam:GetSSHPublicKey",
      "iam:ListSSHPublicKeys",
      "iam:UpdateSSHPublicKey",
      "iam:UploadSSHPublicKey"
    ],
    "Resource": "arn:aws:iam::*:user/${aws:username}",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "deepracer:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "robomaker:*",
        "sagemaker:*",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:ListStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DetectStackDrift",
        "cloudformation:DescribeStackDriftDetectionStatus",
        "cloudformation:DescribeStackResourceDrifts"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "robomaker.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/AWSDeepRacer*",
        "arn:aws:iam::*:role/service-role/AWSDeepRacer*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricData",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:DeleteFunction",
        "lambda:GetFunction",
        "lambda:InvokeFunction",
        "lambda:UpdateFunctionCode"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:*DeepRacer*",
        "arn:aws:lambda:*:*:function:*Deepracer*",
        "arn:aws:lambda:*:*:function:*deepracer*",
        "arn:aws:lambda:*:*:function:*dr-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:GetBucketLocation",
        "s3:DeleteObject",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutBucketPolicy",
        "s3:GetBucketAcl"
      ],
      "Resource": [
        "arn:aws:s3:::*DeepRacer*",
        "arn:aws:s3:::*Deepracer*",
        "arn:aws:s3:::*deepracer*",
        "arn:aws:s3:::dr-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "s3:ExistingObjectTag/DeepRacer": "true"
        }
      }
    },
    {
      "Action": [
        "kinesisvideo:CreateStream",
        "kinesisvideo:DeleteStream",
        "kinesisvideo:DescribeStream",
        "kinesisvideo:GetDataEndpoint",
        "kinesisvideo:GetHLSStreamingSessionURL",
        "kinesisvideo:GetMedia",
        "kinesisvideo:PutMedia",
        "kinesisvideo:TagStream"
      ],
      "Resource": [
        "arn:aws:kinesisvideo:*:*:stream/dr-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "deepracer:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "robomaker:*",
      "sagemaker:*",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:ListStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DetectStackDrift",
      "cloudformation:DescribeStackDriftDetectionStatus",
      "cloudformation:DescribeStackResourceDrifts"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "robomaker.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/AWSDeepRacer*",
      "arn:aws:iam::*:role/service-role/AWSDeepRacer*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricData",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:DeleteFunction",
      "lambda:GetFunction",
      "lambda:InvokeFunction",
      "lambda:UpdateFunctionCode"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:*DeepRacer*",
      "arn:aws:lambda:*:*:function:*Deepracer*",
      "arn:aws:lambda:*:*:function:*deepracer*",
      "arn:aws:lambda:*:*:function:*dr-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:GetBucketLocation",
      "s3:DeleteObject",
      "s3:ListBucket",
      "s3:PutObject",
      "s3:PutBucketPolicy",
      "s3:GetBucketAcl"
    ],
    "Resource": [
      "arn:aws:s3:::*DeepRacer*",
      "arn:aws:s3:::*Deepracer*",
      "arn:aws:s3:::*deepracer*",
      "arn:aws:s3:::dr-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIgnoreCase": {
        "s3:ExistingObjectTag/DeepRacer": "true"
      }
    }
  },
  {
    "Action": [
      "kinesisvideo:CreateStream",
      "kinesisvideo:DeleteStream",
      "kinesisvideo:DescribeStream",
      "kinesisvideo:GetDataEndpoint",
      "kinesisvideo:GetHLSStreamingSessionURL",
      "kinesisvideo:GetMedia",
      "kinesisvideo:PutMedia",
      "kinesisvideo:TagStream"
    ],
    "Resource": [
      "arn:aws:kinesisvideo:*:*:stream/dr-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:DescribeScheduledActions",
        "aws-marketplace:ViewSubscriptions",
        "cloudwatch:DescribeAlarms",
        "cognito-idp:DescribeUserPool",
        "cognito-idp:DescribeUserPoolClient",
        "cognito-idp:ListGroups",
        "cognito-idp:ListIdentityProviders",
        "cognito-idp:ListUserPoolClients",
        "cognito-idp:ListUserPools",
        "cognito-idp:ListUsers",
        "cognito-idp:ListUsersInGroup",
        "ecr:Describe*",
        "sagemaker:Describe*",
        "sagemaker:GetSearchSuggestions",
        "sagemaker:List*",
        "sagemaker:Search"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:DescribeScheduledActions",
      "aws-marketplace:ViewSubscriptions",
      "cloudwatch:DescribeAlarms",
      "cognito-idp:DescribeUserPool",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:ListGroups",
      "cognito-idp:ListIdentityProviders",
      "cognito-idp:ListUserPoolClients",
      "cognito-idp:ListUserPools",
      "cognito-idp:ListUsers",
      "cognito-idp:ListUsersInGroup",
      "ecr:Describe*",
      "sagemaker:Describe*",
      "sagemaker:GetSearchSuggestions",
      "sagemaker:List*",
      "sagemaker:Search"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "rds:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:DescribeOrganizationalUnit",
        "organizations:ListAccounts",
        "organizations:ListAccountsForParent",
        "organizations:ListChildren",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListParents",
        "organizations:ListRoots"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DeleteRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/ram.amazonaws.com/*"
      ],
      "Effect": "Allow",
      "Sid": "AllowDeletionOfServiceLinkedRoleForResourceAccessManager"
    }
  ]
}
[
  {
    "Action": [
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:DescribeOrganizationalUnit",
      "organizations:ListAccounts",
      "organizations:ListAccountsForParent",
      "organizations:ListChildren",
      "organizations:ListOrganizationalUnitsForParent",
      "organizations:ListParents",
      "organizations:ListRoots"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DeleteRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/ram.amazonaws.com/*"
    ],
    "Effect": "Allow",
    "Sid": "AllowDeletionOfServiceLinkedRoleForResourceAccessManager"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "config:Put*",
        "config:Get*",
        "config:List*",
        "config:Describe*",
        "config:BatchGet*",
        "config:Select*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "config:Put*",
      "config:Get*",
      "config:List*",
      "config:Describe*",
      "config:BatchGet*",
      "config:Select*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:DescribeCertificate",
        "acm:ListCertificates",
        "acm:ListTagsForCertificate",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingPolicies",
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeLaunchConfigurations",
        "autoscaling:DescribeLifecycleHooks",
        "autoscaling:DescribePolicies",
        "autoscaling:DescribeScheduledActions",
        "autoscaling:DescribeTags",
        "cloudfront:ListTagsForResource",
        "cloudtrail:DescribeTrails",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudwatch:DescribeAlarms",
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:ListPipelines",
        "config:BatchGet*",
        "config:Describe*",
        "config:Get*",
        "config:List*",
        "config:Put*",
        "config:Select*",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:DescribeLimits",
        "dynamodb:DescribeTable",
        "dynamodb:ListTables",
        "dynamodb:ListTagsOfResource",
        "ec2:Describe*",
        "elasticache:DescribeCacheClusters",
        "elasticache:DescribeReplicationGroups",
        "elasticfilesystem:DescribeFileSystems",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeLoadBalancerPolicies",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:DescribeTags",
        "elasticmapreduce:DescribeCluster",
        "elasticmapreduce:DescribeSecurityConfiguration",
        "elasticmapreduce:ListClusters",
        "es:DescribeElasticsearchDomains",
        "es:ListDomainNames",
        "guardduty:GetDetector",
        "guardduty:GetMasterAccount",
        "guardduty:ListDetectors",
        "iam:GenerateCredentialReport",
        "iam:GetAccountAuthorizationDetails",
        "iam:GetAccountPasswordPolicy",
        "iam:GetAccountSummary",
        "iam:GetCredentialReport",
        "iam:GetGroup",
        "iam:GetGroupPolicy",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:GetUser",
        "iam:GetUserPolicy",
        "iam:ListAttachedGroupPolicies",
        "iam:ListAttachedRolePolicies",
        "iam:ListAttachedUserPolicies",
        "iam:ListEntitiesForPolicy",
        "iam:ListGroupPolicies",
        "iam:ListGroupsForUser",
        "iam:ListInstanceProfilesForRole",
        "iam:ListPolicyVersions",
        "iam:ListRolePolicies",
        "iam:ListUserPolicies",
        "iam:ListVirtualMFADevices",
        "kms:DescribeKey",
        "kms:GetKeyRotationStatus",
        "kms:ListKeys",
        "lambda:GetAlias",
        "lambda:GetFunction",
        "lambda:GetPolicy",
        "lambda:ListAliases",
        "lambda:ListFunctions",
        "logs:DescribeLogGroups",
        "rds:DescribeDBClusters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSnapshotAttributes",
        "rds:DescribeDBSnapshots",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEventSubscriptions",
        "rds:ListTagsForResource",
        "redshift:DescribeClusterParameterGroups",
        "redshift:DescribeClusterParameters",
        "redshift:DescribeClusterSecurityGroups",
        "redshift:DescribeClusterSnapshots",
        "redshift:DescribeClusterSubnetGroups",
        "redshift:DescribeClusters",
        "redshift:DescribeEventSubscriptions",
        "redshift:DescribeLoggingStatus",
        "s3:GetAccelerateConfiguration",
        "s3:GetAccountPublicAccessBlock",
        "s3:GetBucketAcl",
        "s3:GetBucketCORS",
        "s3:GetBucketLocation",
        "s3:GetBucketLogging",
        "s3:GetBucketNotification",
        "s3:GetBucketObjectLockConfiguration",
        "s3:GetBucketPolicy",
        "s3:GetBucketPublicAccessBlock",
        "s3:GetBucketRequestPayment",
        "s3:GetBucketTagging",
        "s3:GetBucketVersioning",
        "s3:GetBucketWebsite",
        "s3:GetEncryptionConfiguration",
        "s3:GetLifecycleConfiguration",
        "s3:GetReplicationConfiguration",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "shield:DescribeDRTAccess",
        "shield:DescribeProtection",
        "shield:DescribeSubscription",
        "sns:ListSubscriptions",
        "ssm:DescribeAutomationExecutions",
        "ssm:DescribeDocument",
        "ssm:GetAutomationExecution",
        "ssm:GetDocument",
        "waf-regional:GetWebACL",
        "waf-regional:GetWebACLForResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:DescribeCertificate",
      "acm:ListCertificates",
      "acm:ListTagsForCertificate",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingPolicies",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeLifecycleHooks",
      "autoscaling:DescribePolicies",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:DescribeTags",
      "cloudfront:ListTagsForResource",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTags",
      "cloudwatch:DescribeAlarms",
      "codepipeline:GetPipeline",
      "codepipeline:GetPipelineState",
      "codepipeline:ListPipelines",
      "config:BatchGet*",
      "config:Describe*",
      "config:Get*",
      "config:List*",
      "config:Put*",
      "config:Select*",
      "dynamodb:DescribeContinuousBackups",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeTable",
      "dynamodb:ListTables",
      "dynamodb:ListTagsOfResource",
      "ec2:Describe*",
      "elasticache:DescribeCacheClusters",
      "elasticache:DescribeReplicationGroups",
      "elasticfilesystem:DescribeFileSystems",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeTags",
      "elasticmapreduce:DescribeCluster",
      "elasticmapreduce:DescribeSecurityConfiguration",
      "elasticmapreduce:ListClusters",
      "es:DescribeElasticsearchDomains",
      "es:ListDomainNames",
      "guardduty:GetDetector",
      "guardduty:GetMasterAccount",
      "guardduty:ListDetectors",
      "iam:GenerateCredentialReport",
      "iam:GetAccountAuthorizationDetails",
      "iam:GetAccountPasswordPolicy",
      "iam:GetAccountSummary",
      "iam:GetCredentialReport",
      "iam:GetGroup",
      "iam:GetGroupPolicy",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:GetUser",
      "iam:GetUserPolicy",
      "iam:ListAttachedGroupPolicies",
      "iam:ListAttachedRolePolicies",
      "iam:ListAttachedUserPolicies",
      "iam:ListEntitiesForPolicy",
      "iam:ListGroupPolicies",
      "iam:ListGroupsForUser",
      "iam:ListInstanceProfilesForRole",
      "iam:ListPolicyVersions",
      "iam:ListRolePolicies",
      "iam:ListUserPolicies",
      "iam:ListVirtualMFADevices",
      "kms:DescribeKey",
      "kms:GetKeyRotationStatus",
      "kms:ListKeys",
      "lambda:GetAlias",
      "lambda:GetFunction",
      "lambda:GetPolicy",
      "lambda:ListAliases",
      "lambda:ListFunctions",
      "logs:DescribeLogGroups",
      "rds:DescribeDBClusters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBInstances",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSnapshotAttributes",
      "rds:DescribeDBSnapshots",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEventSubscriptions",
      "rds:ListTagsForResource",
      "redshift:DescribeClusterParameterGroups",
      "redshift:DescribeClusterParameters",
      "redshift:DescribeClusterSecurityGroups",
      "redshift:DescribeClusterSnapshots",
      "redshift:DescribeClusterSubnetGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeEventSubscriptions",
      "redshift:DescribeLoggingStatus",
      "s3:GetAccelerateConfiguration",
      "s3:GetAccountPublicAccessBlock",
      "s3:GetBucketAcl",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketNotification",
      "s3:GetBucketObjectLockConfiguration",
      "s3:GetBucketPolicy",
      "s3:GetBucketPublicAccessBlock",
      "s3:GetBucketRequestPayment",
      "s3:GetBucketTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketWebsite",
      "s3:GetEncryptionConfiguration",
      "s3:GetLifecycleConfiguration",
      "s3:GetReplicationConfiguration",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "shield:DescribeDRTAccess",
      "shield:DescribeProtection",
      "shield:DescribeSubscription",
      "sns:ListSubscriptions",
      "ssm:DescribeAutomationExecutions",
      "ssm:DescribeDocument",
      "ssm:GetAutomationExecution",
      "ssm:GetDocument",
      "waf-regional:GetWebACL",
      "waf-regional:GetWebACLForResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "es:Describe*",
        "es:List*",
        "es:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "es:Describe*",
      "es:List*",
      "es:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codedeploy:Batch*",
        "codedeploy:CreateDeployment",
        "codedeploy:Get*",
        "codedeploy:List*",
        "codedeploy:RegisterApplicationRevision"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "codedeploy:Batch*",
      "codedeploy:CreateDeployment",
      "codedeploy:Get*",
      "codedeploy:List*",
      "codedeploy:RegisterApplicationRevision"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:AttachNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DetachNetworkInterface",
        "acm-pca:GetCertificateAuthorityCertificate"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:AttachNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DetachNetworkInterface",
      "acm-pca:GetCertificateAuthorityCertificate"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "polly:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "polly:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:GetAutomationExecution",
        "ssm:GetParameters",
        "ssm:ListCommands",
        "ssm:SendCommand",
        "ssm:StartAutomationExecution"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:SSM*",
        "arn:aws:lambda:*:*:function:*:SSM*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "states:DescribeExecution",
        "states:StartExecution"
      ],
      "Resource": [
        "arn:aws:states:*:*:stateMachine:SSM*",
        "arn:aws:states:*:*:execution:SSM*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "resource-groups:ListGroups",
        "resource-groups:ListGroupResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ssm:GetAutomationExecution",
      "ssm:GetParameters",
      "ssm:ListCommands",
      "ssm:SendCommand",
      "ssm:StartAutomationExecution"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:SSM*",
      "arn:aws:lambda:*:*:function:*:SSM*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "states:DescribeExecution",
      "states:StartExecution"
    ],
    "Resource": [
      "arn:aws:states:*:*:stateMachine:SSM*",
      "arn:aws:states:*:*:execution:SSM*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "resource-groups:ListGroups",
      "resource-groups:ListGroupResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:PutRetentionPolicy"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:RDS*"
      ],
      "Effect": "Allow",
      "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
      ],
      "Effect": "Allow",
      "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:PutRetentionPolicy"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:RDS*"
    ],
    "Effect": "Allow",
    "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
  },
  {
    "Action": [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
    ],
    "Effect": "Allow",
    "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DescribeAlarmsForMetric",
        "kms:DescribeKey",
        "kms:ListAliases",
        "lambda:GetPolicy",
        "lambda:ListFunctions",
        "lex:*",
        "polly:DescribeVoices",
        "polly:SynthesizeSpeech"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:AddPermission",
        "lambda:RemovePermission"
      ],
      "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "lambda:Principal": "lex.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:GetRole",
        "iam:DeleteRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "lex.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DetachRolePolicy"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "channels.lex.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DetachRolePolicy"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "kms:DescribeKey",
      "kms:ListAliases",
      "lambda:GetPolicy",
      "lambda:ListFunctions",
      "lex:*",
      "polly:DescribeVoices",
      "polly:SynthesizeSpeech"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:AddPermission",
      "lambda:RemovePermission"
    ],
    "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "lambda:Principal": "lex.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:GetRole",
      "iam:DeleteRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
      "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "lex.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DetachRolePolicy"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "channels.lex.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:DeleteServiceLinkedRole",
      "iam:GetServiceLinkedRoleDeletionStatus"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DetachRolePolicy"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lex:PostContent",
        "lex:PostText"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lex:PostContent",
      "lex:PostText"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm-pca:CreateCertificateAuthorityAuditReport",
        "acm-pca:DescribeCertificateAuthority",
        "acm-pca:DescribeCertificateAuthorityAuditReport",
        "acm-pca:GetCertificateAuthorityCsr",
        "acm-pca:GetCertificateAuthorityCertificate",
        "acm-pca:GetCertificate",
        "acm-pca:ListPermissions",
        "acm-pca:ListTags"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "acm-pca:ListCertificateAuthorities"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm-pca:CreateCertificateAuthorityAuditReport",
      "acm-pca:DescribeCertificateAuthority",
      "acm-pca:DescribeCertificateAuthorityAuditReport",
      "acm-pca:GetCertificateAuthorityCsr",
      "acm-pca:GetCertificateAuthorityCertificate",
      "acm-pca:GetCertificate",
      "acm-pca:ListPermissions",
      "acm-pca:ListTags"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "acm-pca:ListCertificateAuthorities"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "backup:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "backup-storage:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:DescribeDBSnapshots",
        "rds:ListTagsForResource",
        "rds:DescribeDBInstances",
        "rds:describeDBSnapshots",
        "rds:describeDBEngineVersions",
        "rds:describeOptionGroups",
        "rds:describeOrderableDBInstanceOptions",
        "rds:describeDBSubnetGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "dynamodb:ListBackups",
        "dynamodb:ListTables"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticfilesystem:DescribeFilesystems"
      ],
      "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots",
        "ec2:DescribeVolumes",
        "ec2:describeAvailabilityZones"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetTagKeys",
        "tag:GetTagValues",
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DescribeCachediSCSIVolumes",
        "storagegateway:DescribeStorediSCSIVolumes"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:ListGateways"
      ],
      "Resource": "arn:aws:storagegateway:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:ListVolumes",
        "storagegateway:ListLocalDisks"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:ListRoles",
        "iam:GetRole",
        "iam:GetUser"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": [
        "arn:aws:iam::*:role/*AwsBackup*",
        "arn:aws:iam::*:role/*AWSBackup*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "backup.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "kms:ListKeys",
        "kms:DescribeKey",
        "kms:GenerateDataKey",
        "kms:RetireGrant",
        "kms:CreateGrant",
        "kms:ListAliases",
        "kms:Decrypt"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "backup:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "backup-storage:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:DescribeDBSnapshots",
      "rds:ListTagsForResource",
      "rds:DescribeDBInstances",
      "rds:describeDBSnapshots",
      "rds:describeDBEngineVersions",
      "rds:describeOptionGroups",
      "rds:describeOrderableDBInstanceOptions",
      "rds:describeDBSubnetGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "dynamodb:ListBackups",
      "dynamodb:ListTables"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticfilesystem:DescribeFilesystems"
    ],
    "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots",
      "ec2:DescribeVolumes",
      "ec2:describeAvailabilityZones"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetTagKeys",
      "tag:GetTagValues",
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DescribeCachediSCSIVolumes",
      "storagegateway:DescribeStorediSCSIVolumes"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:ListGateways"
    ],
    "Resource": "arn:aws:storagegateway:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:ListVolumes",
      "storagegateway:ListLocalDisks"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:ListRoles",
      "iam:GetRole",
      "iam:GetUser"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": [
      "arn:aws:iam::*:role/*AwsBackup*",
      "arn:aws:iam::*:role/*AWSBackup*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "backup.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "kms:ListKeys",
      "kms:DescribeKey",
      "kms:GenerateDataKey",
      "kms:RetireGrant",
      "kms:CreateGrant",
      "kms:ListAliases",
      "kms:Decrypt"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AssignPrivateIpAddresses",
        "ec2:AttachNetworkInterface",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:DescribeTags",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DetachNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags"
      ],
      "Resource": [
        "arn:aws:ec2:*:*:network-interface/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AssignPrivateIpAddresses",
      "ec2:AttachNetworkInterface",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeInstances",
      "ec2:DescribeTags",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DetachNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:UnassignPrivateIpAddresses"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags"
    ],
    "Resource": [
      "arn:aws:ec2:*:*:network-interface/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStacks",
        "cloudformation:SetStackPolicy",
        "cloudformation:UpdateStack",
        "cloudformation:CreateChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:ExecuteChangeSet",
        "cloudformation:ListChangeSets",
        "cloudformation:DeleteChangeSet",
        "cloudformation:ListStackResources",
        "cloudformation:TagResource",
        "cloudformation:CreateStackSet",
        "cloudformation:CreateStackInstances",
        "cloudformation:UpdateStackSet",
        "cloudformation:UpdateStackInstances",
        "cloudformation:DeleteStackSet",
        "cloudformation:DeleteStackInstances",
        "cloudformation:DescribeStackSet",
        "cloudformation:DescribeStackInstance",
        "cloudformation:DescribeStackSetOperation",
        "cloudformation:ListStackInstances",
        "cloudformation:ListStackSetOperations",
        "cloudformation:ListStackSetOperationResults"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/SC-*",
        "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
        "arn:aws:cloudformation:*:*:changeSet/SC-*",
        "arn:aws:cloudformation:*:*:stackset/SC-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:CreateUploadBucket",
        "cloudformation:GetTemplateSummary",
        "cloudformation:ValidateTemplate",
        "iam:GetGroup",
        "iam:GetRole",
        "iam:GetUser",
        "iam:ListGroups",
        "iam:ListRoles",
        "iam:ListUsers",
        "servicecatalog:*",
        "ssm:DescribeDocument",
        "ssm:GetAutomationExecution",
        "ssm:ListDocuments",
        "ssm:ListDocumentVersions",
        "config:DescribeConfigurationRecorders",
        "config:DescribeConfigurationRecorderStatus"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "servicecatalog.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStacks",
      "cloudformation:SetStackPolicy",
      "cloudformation:UpdateStack",
      "cloudformation:CreateChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:ExecuteChangeSet",
      "cloudformation:ListChangeSets",
      "cloudformation:DeleteChangeSet",
      "cloudformation:ListStackResources",
      "cloudformation:TagResource",
      "cloudformation:CreateStackSet",
      "cloudformation:CreateStackInstances",
      "cloudformation:UpdateStackSet",
      "cloudformation:UpdateStackInstances",
      "cloudformation:DeleteStackSet",
      "cloudformation:DeleteStackInstances",
      "cloudformation:DescribeStackSet",
      "cloudformation:DescribeStackInstance",
      "cloudformation:DescribeStackSetOperation",
      "cloudformation:ListStackInstances",
      "cloudformation:ListStackSetOperations",
      "cloudformation:ListStackSetOperationResults"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/SC-*",
      "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
      "arn:aws:cloudformation:*:*:changeSet/SC-*",
      "arn:aws:cloudformation:*:*:stackset/SC-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:CreateUploadBucket",
      "cloudformation:GetTemplateSummary",
      "cloudformation:ValidateTemplate",
      "iam:GetGroup",
      "iam:GetRole",
      "iam:GetUser",
      "iam:ListGroups",
      "iam:ListRoles",
      "iam:ListUsers",
      "servicecatalog:*",
      "ssm:DescribeDocument",
      "ssm:GetAutomationExecution",
      "ssm:ListDocuments",
      "ssm:ListDocumentVersions",
      "config:DescribeConfigurationRecorders",
      "config:DescribeConfigurationRecorderStatus"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "servicecatalog.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudfront:List*",
        "elasticloadbalancing:List*",
        "route53:List*",
        "cloudfront:Describe*",
        "elasticloadbalancing:Describe*",
        "route53:Describe*",
        "cloudwatch:Describe*",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "cloudfront:GetDistribution*",
        "globalaccelerator:ListAccelerators",
        "globalaccelerator:DescribeAccelerator"
      ],
      "Resource": [
        "arn:aws:elasticloadbalancing:*:*:*",
        "arn:aws:cloudfront::*:*",
        "arn:aws:route53:::hostedzone/*",
        "arn:aws:cloudwatch:*:*:*:*",
        "arn:aws:globalaccelerator::*:*"
      ],
      "Effect": "Allow",
      "Sid": "DRTAccessProtectedResources"
    },
    {
      "Action": [
        "waf:*",
        "waf-regional:*"
      ],
      "Resource": [
        "arn:aws:waf:*",
        "arn:aws:waf-regional:*"
      ],
      "Effect": "Allow",
      "Sid": "DRTManageMitigations"
    },
    {
      "Action": [
        "shield:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "DRTManageProtections"
    }
  ]
}
[
  {
    "Action": [
      "cloudfront:List*",
      "elasticloadbalancing:List*",
      "route53:List*",
      "cloudfront:Describe*",
      "elasticloadbalancing:Describe*",
      "route53:Describe*",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "cloudfront:GetDistribution*",
      "globalaccelerator:ListAccelerators",
      "globalaccelerator:DescribeAccelerator"
    ],
    "Resource": [
      "arn:aws:elasticloadbalancing:*:*:*",
      "arn:aws:cloudfront::*:*",
      "arn:aws:route53:::hostedzone/*",
      "arn:aws:cloudwatch:*:*:*:*",
      "arn:aws:globalaccelerator::*:*"
    ],
    "Effect": "Allow",
    "Sid": "DRTAccessProtectedResources"
  },
  {
    "Action": [
      "waf:*",
      "waf-regional:*"
    ],
    "Resource": [
      "arn:aws:waf:*",
      "arn:aws:waf-regional:*"
    ],
    "Effect": "Allow",
    "Sid": "DRTManageMitigations"
  },
  {
    "Action": [
      "shield:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "DRTManageProtections"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudsearch:Describe*",
        "cloudsearch:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudsearch:Describe*",
      "cloudsearch:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "greengrass:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "greengrass:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:CreateDBCluster",
        "rds:CreateDBInstance"
      ],
      "Resource": [
        "arn:aws:rds:*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "rds:DatabaseEngine": "graphdb"
        }
      }
    },
    {
      "Action": [
        "rds:AddRoleToDBCluster",
        "rds:AddSourceIdentifierToSubscription",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:CopyDBClusterParameterGroup",
        "rds:CopyDBClusterSnapshot",
        "rds:CopyDBParameterGroup",
        "rds:CreateDBClusterParameterGroup",
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBParameterGroup",
        "rds:CreateDBSubnetGroup",
        "rds:CreateEventSubscription",
        "rds:DeleteDBCluster",
        "rds:DeleteDBClusterParameterGroup",
        "rds:DeleteDBClusterSnapshot",
        "rds:DeleteDBInstance",
        "rds:DeleteDBParameterGroup",
        "rds:DeleteDBSubnetGroup",
        "rds:DeleteEventSubscription",
        "rds:DescribeAccountAttributes",
        "rds:DescribeCertificates",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBEngineVersions",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:DescribeDBSecurityGroups",
        "rds:DescribeDBSubnetGroups",
        "rds:DescribeEngineDefaultClusterParameters",
        "rds:DescribeEngineDefaultParameters",
        "rds:DescribeEventCategories",
        "rds:DescribeEventSubscriptions",
        "rds:DescribeEvents",
        "rds:DescribeOptionGroups",
        "rds:DescribeOrderableDBInstanceOptions",
        "rds:DescribePendingMaintenanceActions",
        "rds:DescribeValidDBInstanceModifications",
        "rds:DownloadDBLogFilePortion",
        "rds:FailoverDBCluster",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBClusterParameterGroup",
        "rds:ModifyDBClusterSnapshotAttribute",
        "rds:ModifyDBInstance",
        "rds:ModifyDBParameterGroup",
        "rds:ModifyDBSubnetGroup",
        "rds:ModifyEventSubscription",
        "rds:PromoteReadReplicaDBCluster",
        "rds:RebootDBInstance",
        "rds:RemoveRoleFromDBCluster",
        "rds:RemoveSourceIdentifierFromSubscription",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBClusterParameterGroup",
        "rds:ResetDBParameterGroup",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "ec2:AllocateAddress",
        "ec2:AssignIpv6Addresses",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssociateAddress",
        "ec2:AssociateRouteTable",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateVpcCidrBlock",
        "ec2:AttachInternetGateway",
        "ec2:AttachNetworkInterface",
        "ec2:CreateCustomerGateway",
        "ec2:CreateDefaultSubnet",
        "ec2:CreateDefaultVpc",
        "ec2:CreateInternetGateway",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkInterface",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpcEndpoint",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeCustomerGateways",
        "ec2:DescribeInstances",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribePrefixLists",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcs",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:ModifyVpcEndpoint",
        "iam:ListRoles",
        "iam:PassRole",
        "kms:ListAliases",
        "kms:ListKeyPolicies",
        "kms:ListKeys",
        "kms:ListRetirableGrants",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "sns:ListSubscriptions",
        "sns:ListTopics",
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "rds.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "rds:CreateDBCluster",
      "rds:CreateDBInstance"
    ],
    "Resource": [
      "arn:aws:rds:*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "rds:DatabaseEngine": "graphdb"
      }
    }
  },
  {
    "Action": [
      "rds:AddRoleToDBCluster",
      "rds:AddSourceIdentifierToSubscription",
      "rds:AddTagsToResource",
      "rds:ApplyPendingMaintenanceAction",
      "rds:CopyDBClusterParameterGroup",
      "rds:CopyDBClusterSnapshot",
      "rds:CopyDBParameterGroup",
      "rds:CreateDBClusterParameterGroup",
      "rds:CreateDBClusterSnapshot",
      "rds:CreateDBParameterGroup",
      "rds:CreateDBSubnetGroup",
      "rds:CreateEventSubscription",
      "rds:DeleteDBCluster",
      "rds:DeleteDBClusterParameterGroup",
      "rds:DeleteDBClusterSnapshot",
      "rds:DeleteDBInstance",
      "rds:DeleteDBParameterGroup",
      "rds:DeleteDBSubnetGroup",
      "rds:DeleteEventSubscription",
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshotAttributes",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEngineDefaultClusterParameters",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeEventCategories",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeEvents",
      "rds:DescribeOptionGroups",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DescribeValidDBInstanceModifications",
      "rds:DownloadDBLogFilePortion",
      "rds:FailoverDBCluster",
      "rds:ListTagsForResource",
      "rds:ModifyDBCluster",
      "rds:ModifyDBClusterParameterGroup",
      "rds:ModifyDBClusterSnapshotAttribute",
      "rds:ModifyDBInstance",
      "rds:ModifyDBParameterGroup",
      "rds:ModifyDBSubnetGroup",
      "rds:ModifyEventSubscription",
      "rds:PromoteReadReplicaDBCluster",
      "rds:RebootDBInstance",
      "rds:RemoveRoleFromDBCluster",
      "rds:RemoveSourceIdentifierFromSubscription",
      "rds:RemoveTagsFromResource",
      "rds:ResetDBClusterParameterGroup",
      "rds:ResetDBParameterGroup",
      "rds:RestoreDBClusterFromSnapshot",
      "rds:RestoreDBClusterToPointInTime"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "ec2:AllocateAddress",
      "ec2:AssignIpv6Addresses",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssociateAddress",
      "ec2:AssociateRouteTable",
      "ec2:AssociateSubnetCidrBlock",
      "ec2:AssociateVpcCidrBlock",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDefaultSubnet",
      "ec2:CreateDefaultVpc",
      "ec2:CreateInternetGateway",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkInterface",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:CreateVpcEndpoint",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeInstances",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroupReferences",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcs",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ModifyVpcEndpoint",
      "iam:ListRoles",
      "iam:PassRole",
      "kms:ListAliases",
      "kms:ListKeyPolicies",
      "kms:ListKeys",
      "kms:ListRetirableGrants",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "sns:ListSubscriptions",
      "sns:ListTopics",
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "rds.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:Describe*",
        "cloudformation:EstimateTemplateCost",
        "cloudformation:Get*",
        "cloudformation:List*",
        "cloudformation:ValidateTemplate",
        "cloudformation:DetectStackDrift",
        "cloudformation:DetectStackResourceDrift"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:Describe*",
      "cloudformation:EstimateTemplateCost",
      "cloudformation:Get*",
      "cloudformation:List*",
      "cloudformation:ValidateTemplate",
      "cloudformation:DetectStackDrift",
      "cloudformation:DetectStackResourceDrift"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53:*",
        "route53domains:*",
        "cloudfront:ListDistributions",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticbeanstalk:DescribeEnvironments",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:GetBucketWebsite",
        "ec2:DescribeVpcs",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeRegions",
        "sns:ListTopics",
        "sns:ListSubscriptionsByTopic",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricStatistics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "apigateway:GET",
      "Resource": "arn:aws:apigateway:*::/domainnames",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53:*",
      "route53domains:*",
      "cloudfront:ListDistributions",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticbeanstalk:DescribeEnvironments",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:GetBucketWebsite",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeRegions",
      "sns:ListTopics",
      "sns:ListSubscriptionsByTopic",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:GetMetricStatistics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "apigateway:GET",
    "Resource": "arn:aws:apigateway:*::/domainnames",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"
    ],
    "Resource": [
      "arn:aws:logs:*:*:*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appstream:Get*",
        "appstream:List*",
        "appstream:Describe*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appstream:Get*",
      "appstream:List*",
      "appstream:Describe*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "states:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "states:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudtrail:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudTrailFullAccess"
    },
    {
      "Action": [
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAccounts",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "AwsOrgsAccess"
    }
  ]
}
[
  {
    "Action": [
      "cloudtrail:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudTrailFullAccess"
  },
  {
    "Action": [
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAccounts",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "AwsOrgsAccess"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "inspector:Describe*",
        "inspector:Get*",
        "inspector:List*",
        "inspector:LocalizeText",
        "inspector:Preview*",
        "ec2:DescribeInstances",
        "ec2:DescribeTags",
        "sns:ListTopics",
        "events:DescribeRule",
        "events:ListRuleNamesByTarget"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "inspector:Describe*",
      "inspector:Get*",
      "inspector:List*",
      "inspector:LocalizeText",
      "inspector:Preview*",
      "ec2:DescribeInstances",
      "ec2:DescribeTags",
      "sns:ListTopics",
      "events:DescribeRule",
      "events:ListRuleNamesByTarget"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "organizations:Describe*",
        "organizations:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "organizations:Describe*",
      "organizations:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "translate:TranslateText",
        "translate:GetTerminology",
        "translate:ListTerminologies",
        "comprehend:DetectDominantLanguage",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "translate:TranslateText",
      "translate:GetTerminology",
      "translate:ListTerminologies",
      "comprehend:DetectDominantLanguage",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:AllocateAddress",
        "ec2:AttachInternetGateway",
        "ec2:AssociateRouteTable",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateInternetGateway",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkAcl",
        "ec2:CreateNetworkAclEntry",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteInternetGateway",
        "ec2:DeleteNatGateway",
        "ec2:DeleteNetworkAcl",
        "ec2:DeleteNetworkAclEntry",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteSubnet",
        "ec2:DeleteTags",
        "ec2:DeleteVpc",
        "ec2:DeleteVpcEndpoints",
        "ec2:DescribeAddresses",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeNatGateways",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeTags",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcs",
        "ec2:DetachInternetGateway",
        "ec2:DisassociateRouteTable",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyVpcAttribute",
        "ec2:ReleaseAddress",
        "ec2:ReplaceNetworkAclAssociation",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/service-role/AWSDeepRacerLambdaAccessRole",
      "Effect": "Allow",
      "Condition": {
        "StringLikeIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "lambda:CreateFunction",
        "lambda:GetFunction",
        "lambda:DeleteFunction",
        "lambda:TagResource",
        "lambda:UpdateFunctionCode"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:*DeepRacer*",
        "arn:aws:lambda:*:*:function:*Deepracer*",
        "arn:aws:lambda:*:*:function:*deepracer*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:PutBucketPolicy",
        "s3:CreateBucket",
        "s3:ListBucket",
        "s3:GetBucketAcl",
        "s3:DeleteBucket"
      ],
      "Resource": [
        "arn:aws:s3:::*DeepRacer*",
        "arn:aws:s3:::*Deepracer*",
        "arn:aws:s3:::*deepracer*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "robomaker:CreateSimulationApplication",
        "robomaker:CreateSimulationApplicationVersion",
        "robomaker:DeleteSimulationApplication",
        "robomaker:DescribeSimulationApplication",
        "robomaker:ListSimulationApplications",
        "robomaker:TagResource",
        "robomaker:UpdateSimulationApplication"
      ],
      "Resource": [
        "arn:aws:robomaker:*:*:/createSimulationApplication",
        "arn:aws:robomaker:*:*:simulation-application/deepracer*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:AllocateAddress",
      "ec2:AttachInternetGateway",
      "ec2:AssociateRouteTable",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateInternetGateway",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkAcl",
      "ec2:CreateNetworkAclEntry",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:DeleteInternetGateway",
      "ec2:DeleteNatGateway",
      "ec2:DeleteNetworkAcl",
      "ec2:DeleteNetworkAclEntry",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSubnet",
      "ec2:DeleteTags",
      "ec2:DeleteVpc",
      "ec2:DeleteVpcEndpoints",
      "ec2:DescribeAddresses",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcs",
      "ec2:DetachInternetGateway",
      "ec2:DisassociateRouteTable",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ReleaseAddress",
      "ec2:ReplaceNetworkAclAssociation",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/service-role/AWSDeepRacerLambdaAccessRole",
    "Effect": "Allow",
    "Condition": {
      "StringLikeIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "lambda:CreateFunction",
      "lambda:GetFunction",
      "lambda:DeleteFunction",
      "lambda:TagResource",
      "lambda:UpdateFunctionCode"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:*DeepRacer*",
      "arn:aws:lambda:*:*:function:*Deepracer*",
      "arn:aws:lambda:*:*:function:*deepracer*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:PutBucketPolicy",
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:GetBucketAcl",
      "s3:DeleteBucket"
    ],
    "Resource": [
      "arn:aws:s3:::*DeepRacer*",
      "arn:aws:s3:::*Deepracer*",
      "arn:aws:s3:::*deepracer*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "robomaker:CreateSimulationApplication",
      "robomaker:CreateSimulationApplicationVersion",
      "robomaker:DeleteSimulationApplication",
      "robomaker:DescribeSimulationApplication",
      "robomaker:ListSimulationApplications",
      "robomaker:TagResource",
      "robomaker:UpdateSimulationApplication"
    ],
    "Resource": [
      "arn:aws:robomaker:*:*:/createSimulationApplication",
      "arn:aws:robomaker:*:*:simulation-application/deepracer*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iotevents:Describe*",
        "iotevents:List*",
        "iotevents:Get*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iotevents:Describe*",
      "iotevents:List*",
      "iotevents:Get*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "greengrass:CreateDeployment",
        "greengrass:CreateGroupVersion",
        "greengrass:CreateFunctionDefinition",
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetGroup",
        "greengrass:GetGroupVersion",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:GetAssociatedRole",
        "lambda:CreateFunction"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lambda:UpdateFunctionCode",
        "lambda:GetFunction",
        "lambda:UpdateFunctionConfiguration",
        "lambda:DeleteFunction",
        "lambda:ListVersionsByFunction",
        "lambda:GetAlias",
        "lambda:UpdateAlias",
        "lambda:CreateAlias",
        "lambda:DeleteAlias"
      ],
      "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIfExists": {
          "iam:PassedToService": "lambda.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:DescribeSecurityGroups",
      "greengrass:CreateDeployment",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetGroup",
      "greengrass:GetGroupVersion",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetAssociatedRole",
      "lambda:CreateFunction"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lambda:UpdateFunctionCode",
      "lambda:GetFunction",
      "lambda:UpdateFunctionConfiguration",
      "lambda:DeleteFunction",
      "lambda:ListVersionsByFunction",
      "lambda:GetAlias",
      "lambda:UpdateAlias",
      "lambda:CreateAlias",
      "lambda:DeleteAlias"
    ],
    "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIfExists": {
        "iam:PassedToService": "lambda.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "NotAction": [
        "iam:*",
        "organizations:*",
        "account:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole",
        "iam:DeleteServiceLinkedRole",
        "iam:ListRoles",
        "organizations:DescribeOrganization",
        "account:ListRegions"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "NotAction": [
      "iam:*",
      "organizations:*",
      "account:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole",
      "iam:DeleteServiceLinkedRole",
      "iam:ListRoles",
      "organizations:DescribeOrganization",
      "account:ListRegions"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "execute-api:Invoke",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "execute-api:Invoke",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "globalaccelerator:Describe*",
        "globalaccelerator:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "globalaccelerator:Describe*",
      "globalaccelerator:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sagemaker:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DeleteScheduledAction",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:DescribeScalableTargets",
        "application-autoscaling:DescribeScalingActivities",
        "application-autoscaling:DescribeScalingPolicies",
        "application-autoscaling:DescribeScheduledActions",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:PutScheduledAction",
        "application-autoscaling:RegisterScalableTarget",
        "aws-marketplace:ViewSubscriptions",
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:ListMetrics",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:PutMetricData",
        "codecommit:BatchGetRepositories",
        "codecommit:CreateRepository",
        "codecommit:GetRepository",
        "codecommit:ListBranches",
        "codecommit:ListRepositories",
        "cognito-idp:AdminAddUserToGroup",
        "cognito-idp:AdminCreateUser",
        "cognito-idp:AdminDeleteUser",
        "cognito-idp:AdminDisableUser",
        "cognito-idp:AdminEnableUser",
        "cognito-idp:AdminRemoveUserFromGroup",
        "cognito-idp:CreateGroup",
        "cognito-idp:CreateUserPool",
        "cognito-idp:CreateUserPoolClient",
        "cognito-idp:CreateUserPoolDomain",
        "cognito-idp:DescribeUserPool",
        "cognito-idp:DescribeUserPoolClient",
        "cognito-idp:ListGroups",
        "cognito-idp:ListIdentityProviders",
        "cognito-idp:ListUserPoolClients",
        "cognito-idp:ListUserPools",
        "cognito-idp:ListUsers",
        "cognito-idp:ListUsersInGroup",
        "cognito-idp:UpdateUserPool",
        "cognito-idp:UpdateUserPoolClient",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DescribeDhcpOptions",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeRouteTables",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeVpcs",
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:CreateRepository",
        "ecr:Describe*",
        "ecr:GetAuthorizationToken",
        "ecr:GetDownloadUrlForLayer",
        "elastic-inference:Connect",
        "elasticfilesystem:DescribeFileSystems",
        "elasticfilesystem:DescribeMountTargets",
        "fsx:DescribeFileSystems",
        "glue:CreateJob",
        "glue:DeleteJob",
        "glue:GetJob",
        "glue:GetJobRun",
        "glue:GetJobRuns",
        "glue:GetJobs",
        "glue:ResetJobBookmark",
        "glue:StartJobRun",
        "glue:UpdateJob",
        "groundtruthlabeling:*",
        "iam:ListRoles",
        "kms:DescribeKey",
        "kms:ListAliases",
        "lambda:ListFunctions",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:GetLogEvents",
        "logs:PutLogEvents",
        "sns:ListTopics"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ecr:SetRepositoryPolicy",
        "ecr:CompleteLayerUpload",
        "ecr:BatchDeleteImage",
        "ecr:UploadLayerPart",
        "ecr:DeleteRepositoryPolicy",
        "ecr:InitiateLayerUpload",
        "ecr:DeleteRepository",
        "ecr:PutImage"
      ],
      "Resource": "arn:aws:ecr:*:*:repository/*sagemaker*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "codecommit:GitPull",
        "codecommit:GitPush"
      ],
      "Resource": [
        "arn:aws:codecommit:*:*:*sagemaker*",
        "arn:aws:codecommit:*:*:*SageMaker*",
        "arn:aws:codecommit:*:*:*Sagemaker*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:ListSecrets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue",
        "secretsmanager:CreateSecret"
      ],
      "Resource": [
        "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "secretsmanager:ResourceTag/SageMaker": "true"
        }
      }
    },
    {
      "Action": [
        "robomaker:CreateSimulationApplication",
        "robomaker:DescribeSimulationApplication",
        "robomaker:DeleteSimulationApplication"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "robomaker:CreateSimulationJob",
        "robomaker:DescribeSimulationJob",
        "robomaker:CancelSimulationJob"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::*SageMaker*",
        "arn:aws:s3:::*Sagemaker*",
        "arn:aws:s3:::*sagemaker*",
        "arn:aws:s3:::*aws-glue*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:GetBucketLocation",
        "s3:ListBucket",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "s3:ExistingObjectTag/SageMaker": "true"
        }
      }
    },
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:*SageMaker*",
        "arn:aws:lambda:*:*:function:*sagemaker*",
        "arn:aws:lambda:*:*:function:*Sagemaker*",
        "arn:aws:lambda:*:*:function:*LabelingFunction*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
        }
      }
    },
    {
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "robomaker.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "sns:Subscribe",
        "sns:CreateTopic"
      ],
      "Resource": [
        "arn:aws:sns:*:*:*SageMaker*",
        "arn:aws:sns:*:*:*Sagemaker*",
        "arn:aws:sns:*:*:*sagemaker*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "sagemaker.amazonaws.com",
            "glue.amazonaws.com",
            "robomaker.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "sagemaker:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DeleteScheduledAction",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:DescribeScheduledActions",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:PutScheduledAction",
      "application-autoscaling:RegisterScalableTarget",
      "aws-marketplace:ViewSubscriptions",
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "codecommit:BatchGetRepositories",
      "codecommit:CreateRepository",
      "codecommit:GetRepository",
      "codecommit:ListBranches",
      "codecommit:ListRepositories",
      "cognito-idp:AdminAddUserToGroup",
      "cognito-idp:AdminCreateUser",
      "cognito-idp:AdminDeleteUser",
      "cognito-idp:AdminDisableUser",
      "cognito-idp:AdminEnableUser",
      "cognito-idp:AdminRemoveUserFromGroup",
      "cognito-idp:CreateGroup",
      "cognito-idp:CreateUserPool",
      "cognito-idp:CreateUserPoolClient",
      "cognito-idp:CreateUserPoolDomain",
      "cognito-idp:DescribeUserPool",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:ListGroups",
      "cognito-idp:ListIdentityProviders",
      "cognito-idp:ListUserPoolClients",
      "cognito-idp:ListUserPools",
      "cognito-idp:ListUsers",
      "cognito-idp:ListUsersInGroup",
      "cognito-idp:UpdateUserPool",
      "cognito-idp:UpdateUserPoolClient",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:CreateVpcEndpoint",
      "ec2:DeleteNetworkInterface",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcs",
      "ecr:BatchCheckLayerAvailability",
      "ecr:BatchGetImage",
      "ecr:CreateRepository",
      "ecr:Describe*",
      "ecr:GetAuthorizationToken",
      "ecr:GetDownloadUrlForLayer",
      "elastic-inference:Connect",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeMountTargets",
      "fsx:DescribeFileSystems",
      "glue:CreateJob",
      "glue:DeleteJob",
      "glue:GetJob",
      "glue:GetJobRun",
      "glue:GetJobRuns",
      "glue:GetJobs",
      "glue:ResetJobBookmark",
      "glue:StartJobRun",
      "glue:UpdateJob",
      "groundtruthlabeling:*",
      "iam:ListRoles",
      "kms:DescribeKey",
      "kms:ListAliases",
      "lambda:ListFunctions",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "logs:PutLogEvents",
      "sns:ListTopics"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ecr:SetRepositoryPolicy",
      "ecr:CompleteLayerUpload",
      "ecr:BatchDeleteImage",
      "ecr:UploadLayerPart",
      "ecr:DeleteRepositoryPolicy",
      "ecr:InitiateLayerUpload",
      "ecr:DeleteRepository",
      "ecr:PutImage"
    ],
    "Resource": "arn:aws:ecr:*:*:repository/*sagemaker*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "codecommit:GitPull",
      "codecommit:GitPush"
    ],
    "Resource": [
      "arn:aws:codecommit:*:*:*sagemaker*",
      "arn:aws:codecommit:*:*:*SageMaker*",
      "arn:aws:codecommit:*:*:*Sagemaker*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:ListSecrets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:DescribeSecret",
      "secretsmanager:GetSecretValue",
      "secretsmanager:CreateSecret"
    ],
    "Resource": [
      "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:DescribeSecret",
      "secretsmanager:GetSecretValue"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "secretsmanager:ResourceTag/SageMaker": "true"
      }
    }
  },
  {
    "Action": [
      "robomaker:CreateSimulationApplication",
      "robomaker:DescribeSimulationApplication",
      "robomaker:DeleteSimulationApplication"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "robomaker:CreateSimulationJob",
      "robomaker:DescribeSimulationJob",
      "robomaker:CancelSimulationJob"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ],
    "Resource": [
      "arn:aws:s3:::*SageMaker*",
      "arn:aws:s3:::*Sagemaker*",
      "arn:aws:s3:::*sagemaker*",
      "arn:aws:s3:::*aws-glue*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEqualsIgnoreCase": {
        "s3:ExistingObjectTag/SageMaker": "true"
      }
    }
  },
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:*SageMaker*",
      "arn:aws:lambda:*:*:function:*sagemaker*",
      "arn:aws:lambda:*:*:function:*Sagemaker*",
      "arn:aws:lambda:*:*:function:*LabelingFunction*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
      }
    }
  },
  {
    "Action": "iam:CreateServiceLinkedRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "robomaker.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "sns:Subscribe",
      "sns:CreateTopic"
    ],
    "Resource": [
      "arn:aws:sns:*:*:*SageMaker*",
      "arn:aws:sns:*:*:*Sagemaker*",
      "arn:aws:sns:*:*:*sagemaker*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "sagemaker.amazonaws.com",
          "glue.amazonaws.com",
          "robomaker.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "firehose:PutRecord",
        "firehose:PutRecordBatch"
      ],
      "Resource": [
        "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "firehose:PutRecord",
      "firehose:PutRecordBatch"
    ],
    "Resource": [
      "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:Scan",
        "dynamodb:Query",
        "dynamodb:UpdateItem",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:DeleteItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:DescribeTable"
      ],
      "Resource": "arn:aws:dynamodb:*:*:table/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "dynamodb:RestoreTableFromBackup"
      ],
      "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateVolume",
        "ec2:DeleteVolume"
      ],
      "Resource": [
        "arn:aws:ec2:*::snapshot/*",
        "arn:aws:ec2:*:*:volume/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeSnapshots",
        "ec2:DescribeVolumes"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DeleteVolume",
        "storagegateway:DescribeCachediSCSIVolumes",
        "storagegateway:DescribeStorediSCSIVolumes"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:CreateStorediSCSIVolume",
        "storagegateway:CreateCachediSCSIVolume"
      ],
      "Resource": "arn:aws:storagegateway:*:*:gateway/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "storagegateway:ListVolumes"
      ],
      "Resource": "arn:aws:storagegateway:*:*:*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "rds:DescribeDBInstances",
        "rds:DescribeDBSnapshots",
        "rds:ListTagsForResource",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:DeleteDBInstance",
        "rds:AddTagsToResource"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "elasticfilesystem:Restore",
        "elasticfilesystem:CreateFilesystem",
        "elasticfilesystem:DescribeFilesystems",
        "elasticfilesystem:DeleteFilesystem"
      ],
      "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
      "Effect": "Allow"
    },
    {
      "Action": "kms:DescribeKey",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "kms:CreateGrant",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Bool": {
          "kms:GrantIsForAWSResource": "true"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "dynamodb:Scan",
      "dynamodb:Query",
      "dynamodb:UpdateItem",
      "dynamodb:PutItem",
      "dynamodb:GetItem",
      "dynamodb:DeleteItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:DescribeTable"
    ],
    "Resource": "arn:aws:dynamodb:*:*:table/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "dynamodb:RestoreTableFromBackup"
    ],
    "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateVolume",
      "ec2:DeleteVolume"
    ],
    "Resource": [
      "arn:aws:ec2:*::snapshot/*",
      "arn:aws:ec2:*:*:volume/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeSnapshots",
      "ec2:DescribeVolumes"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DeleteVolume",
      "storagegateway:DescribeCachediSCSIVolumes",
      "storagegateway:DescribeStorediSCSIVolumes"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:CreateStorediSCSIVolume",
      "storagegateway:CreateCachediSCSIVolume"
    ],
    "Resource": "arn:aws:storagegateway:*:*:gateway/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "storagegateway:ListVolumes"
    ],
    "Resource": "arn:aws:storagegateway:*:*:*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "rds:DescribeDBInstances",
      "rds:DescribeDBSnapshots",
      "rds:ListTagsForResource",
      "rds:RestoreDBInstanceFromDBSnapshot",
      "rds:DeleteDBInstance",
      "rds:AddTagsToResource"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "elasticfilesystem:Restore",
      "elasticfilesystem:CreateFilesystem",
      "elasticfilesystem:DescribeFilesystems",
      "elasticfilesystem:DeleteFilesystem"
    ],
    "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
    "Effect": "Allow"
  },
  {
    "Action": "kms:DescribeKey",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "kms:CreateGrant",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Bool": {
        "kms:GrantIsForAWSResource": "true"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "mediastore:*"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Bool": {
          "aws:SecureTransport": "true"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "mediastore:*"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Bool": {
        "aws:SecureTransport": "true"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "events:*",
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudWatchEventsFullAccess"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets",
      "Effect": "Allow",
      "Sid": "IAMPassRoleForCloudWatchEvents"
    }
  ]
}
[
  {
    "Action": "events:*",
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudWatchEventsFullAccess"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets",
    "Effect": "Allow",
    "Sid": "IAMPassRoleForCloudWatchEvents"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "license-manager:UpdateLicenseSpecificationsForResource"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "LicenseManagerPermissions"
    },
    {
      "Action": [
        "ssm:ListInventoryEntries",
        "ssm:GetInventory",
        "ssm:CreateAssociation",
        "ssm:CreateResourceDataSync",
        "ssm:DeleteResourceDataSync",
        "ssm:ListResourceDataSync",
        "ssm:ListAssociations"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "SSMPermissions"
    },
    {
      "Action": [
        "ram:AcceptResourceShareInvitation",
        "ram:GetResourceShareInvitations"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Sid": "RAMPermissions"
    }
  ]
}
[
  {
    "Action": [
      "license-manager:UpdateLicenseSpecificationsForResource"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "LicenseManagerPermissions"
  },
  {
    "Action": [
      "ssm:ListInventoryEntries",
      "ssm:GetInventory",
      "ssm:CreateAssociation",
      "ssm:CreateResourceDataSync",
      "ssm:DeleteResourceDataSync",
      "ssm:ListResourceDataSync",
      "ssm:ListAssociations"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "SSMPermissions"
  },
  {
    "Action": [
      "ram:AcceptResourceShareInvitation",
      "ram:GetResourceShareInvitations"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Sid": "RAMPermissions"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "organizations:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "organizations:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "servicediscovery:DiscoverInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudMapServiceDiscovery"
    }
  ]
}
[
  {
    "Action": [
      "servicediscovery:DiscoverInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudMapServiceDiscovery"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ssm:GetDocument",
        "ssm:DescribeDocument",
        "ssm:StartAutomationExecution"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "ssm.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "ssm:GetDocument",
      "ssm:DescribeDocument",
      "ssm:StartAutomationExecution"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "ssm.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "config:PutConfigRule",
        "config:DeleteConfigRule",
        "config:DescribeConfigRules"
      ],
      "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-conforms.amazonaws.com*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:GetStackPolicy",
        "cloudformation:SetStackPolicy",
        "cloudformation:UpdateStack",
        "cloudformation:UpdateTerminationProtection",
        "cloudformation:ValidateTemplate"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/awsconfigconforms-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "config:PutConfigRule",
      "config:DeleteConfigRule",
      "config:DescribeConfigRules"
    ],
    "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-conforms.amazonaws.com*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:GetStackPolicy",
      "cloudformation:SetStackPolicy",
      "cloudformation:UpdateStack",
      "cloudformation:UpdateTerminationProtection",
      "cloudformation:ValidateTemplate"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/awsconfigconforms-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "events:DescribeRule",
        "events:DescribeEventBus",
        "events:DescribeEventSource",
        "events:ListEventBuses",
        "events:ListEventSources",
        "events:ListRuleNamesByTarget",
        "events:ListRules",
        "events:ListTargetsByRule",
        "events:TestEventPattern"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "events:DescribeRule",
      "events:DescribeEventBus",
      "events:DescribeEventSource",
      "events:ListEventBuses",
      "events:ListEventSources",
      "events:ListRuleNamesByTarget",
      "events:ListRules",
      "events:ListTargetsByRule",
      "events:TestEventPattern"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "events:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "arn:aws:iam::*:role/*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:PassedToService": "events.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "events:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "arn:aws:iam::*:role/*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:PassedToService": "events.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53resolver:Get*",
        "route53resolver:List*",
        "ec2:DescribeNetworkInterface",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53resolver:Get*",
      "route53resolver:List*",
      "ec2:DescribeNetworkInterface",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs",
      "ec2:DescribeSubnets"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "managedblockchain:*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "managedblockchain:*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:DescribeAccountLimits",
        "cloudformation:DescribeAccountLimits",
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:PutMetricAlarm",
        "dynamodb:DescribeLimits",
        "elasticloadbalancing:DescribeAccountLimits",
        "iam:GetAccountSummary",
        "kinesis:DescribeLimits",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAWSServiceAccessForOrganization",
        "rds:DescribeAccountAttributes",
        "route53:GetAccountLimit",
        "servicequotas:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudwatch:DeleteAlarms"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "Null": {
          "cloudwatch:ResourceTag/ServiceQuotaMonitor": "false"
        }
      }
    },
    {
      "Action": [
        "organizations:EnableAWSServiceAccess"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLike": {
          "organizations:ServicePrincipal": [
            "servicequotas.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "servicequotas.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:DescribeAccountLimits",
      "cloudformation:DescribeAccountLimits",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:PutMetricAlarm",
      "dynamodb:DescribeLimits",
      "elasticloadbalancing:DescribeAccountLimits",
      "iam:GetAccountSummary",
      "kinesis:DescribeLimits",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAWSServiceAccessForOrganization",
      "rds:DescribeAccountAttributes",
      "route53:GetAccountLimit",
      "servicequotas:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudwatch:DeleteAlarms"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "Null": {
        "cloudwatch:ResourceTag/ServiceQuotaMonitor": "false"
      }
    }
  },
  {
    "Action": [
      "organizations:EnableAWSServiceAccess"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLike": {
        "organizations:ServicePrincipal": [
          "servicequotas.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "servicequotas.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "aesop:*",
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "aesop:*",
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:ListChangeSets",
        "aws-marketplace:DescribeChangeSet",
        "aws-marketplace:StartChangeSet",
        "aws-marketplace:CancelChangeSet",
        "aws-marketplace:ListEntities",
        "aws-marketplace:DescribeEntity",
        "ec2:DescribeImages",
        "ec2:DescribeSnapshots",
        "ec2:ModifyImageAttribute",
        "ec2:ModifySnapshotAttribute"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:ListChangeSets",
      "aws-marketplace:DescribeChangeSet",
      "aws-marketplace:StartChangeSet",
      "aws-marketplace:CancelChangeSet",
      "aws-marketplace:ListEntities",
      "aws-marketplace:DescribeEntity",
      "ec2:DescribeImages",
      "ec2:DescribeSnapshots",
      "ec2:ModifyImageAttribute",
      "ec2:ModifySnapshotAttribute"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:Subscribe"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:Subscribe"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "ec2:DeleteSecurityGroup",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "ec2:ResourceTag/AWSServiceName": "GlobalAccelerator"
        }
      }
    },
    {
      "Action": [
        "ec2:CreateSecurityGroup",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "elasticloadbalancing:DescribeLoadBalancers",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "ec2:CreateTags",
      "Resource": [
        "arn:aws:ec2:*:*:security-group/*",
        "arn:aws:ec2:*:*:network-interface/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DeleteNetworkInterface"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "ec2:DeleteSecurityGroup",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "ec2:ResourceTag/AWSServiceName": "GlobalAccelerator"
      }
    }
  },
  {
    "Action": [
      "ec2:CreateSecurityGroup",
      "ec2:DescribeSecurityGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "elasticloadbalancing:DescribeLoadBalancers",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "ec2:CreateTags",
    "Resource": [
      "arn:aws:ec2:*:*:security-group/*",
      "arn:aws:ec2:*:*:network-interface/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm:ExportCertificate",
        "acm:DescribeCertificate",
        "acm:ListCertificates",
        "acm-pca:DescribeCertificateAuthority"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "0"
    }
  ]
}
[
  {
    "Action": [
      "acm:ExportCertificate",
      "acm:DescribeCertificate",
      "acm:ListCertificates",
      "acm-pca:DescribeCertificateAuthority"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "0"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "acm-pca:IssueCertificate"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "acm-pca:TemplateArn": [
            "arn:aws:acm-pca:::template/*CACertificate*/V*"
          ]
        }
      }
    },
    {
      "Action": [
        "acm-pca:IssueCertificate"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Deny",
      "Condition": {
        "StringNotLike": {
          "acm-pca:TemplateArn": [
            "arn:aws:acm-pca:::template/*CACertificate*/V*"
          ]
        }
      }
    },
    {
      "Action": [
        "acm-pca:RevokeCertificate",
        "acm-pca:GetCertificate",
        "acm-pca:ListPermissions"
      ],
      "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "acm-pca:ListCertificateAuthorities"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "acm-pca:IssueCertificate"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "acm-pca:TemplateArn": [
          "arn:aws:acm-pca:::template/*CACertificate*/V*"
        ]
      }
    }
  },
  {
    "Action": [
      "acm-pca:IssueCertificate"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Deny",
    "Condition": {
      "StringNotLike": {
        "acm-pca:TemplateArn": [
          "arn:aws:acm-pca:::template/*CACertificate*/V*"
        ]
      }
    }
  },
  {
    "Action": [
      "acm-pca:RevokeCertificate",
      "acm-pca:GetCertificate",
      "acm-pca:ListPermissions"
    ],
    "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "acm-pca:ListCertificateAuthorities"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "opsworks:AssignInstance",
        "opsworks:CreateLayer",
        "opsworks:DeregisterInstance",
        "opsworks:DescribeInstances",
        "opsworks:DescribeStackProvisioningParameters",
        "opsworks:DescribeStacks",
        "opsworks:UnassignInstance"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateGroup",
        "iam:AddUserToGroup"
      ],
      "Resource": [
        "arn:aws:iam::*:group/AWS/OpsWorks/OpsWorks-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateUser",
        "iam:CreateAccessKey"
      ],
      "Resource": [
        "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:AttachUserPolicy"
      ],
      "Resource": [
        "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
      ],
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "opsworks:AssignInstance",
      "opsworks:CreateLayer",
      "opsworks:DeregisterInstance",
      "opsworks:DescribeInstances",
      "opsworks:DescribeStackProvisioningParameters",
      "opsworks:DescribeStacks",
      "opsworks:UnassignInstance"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateGroup",
      "iam:AddUserToGroup"
    ],
    "Resource": [
      "arn:aws:iam::*:group/AWS/OpsWorks/OpsWorks-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateUser",
      "iam:CreateAccessKey"
    ],
    "Resource": [
      "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:AttachUserPolicy"
    ],
    "Resource": [
      "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
    ],
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "servicediscovery:DiscoverInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "CloudMapServiceDiscovery"
    },
    {
      "Action": [
        "acm:DescribeCertificate"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "ACMCertificateVerification"
    }
  ]
}
[
  {
    "Action": [
      "servicediscovery:DiscoverInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "CloudMapServiceDiscovery"
  },
  {
    "Action": [
      "acm:DescribeCertificate"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "ACMCertificateVerification"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "support:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "support:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:PutProcurementSystemConfiguration",
        "aws-marketplace:DescribeProcurementSystemConfiguration",
        "organizations:Describe*",
        "organizations:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:PutProcurementSystemConfiguration",
      "aws-marketplace:DescribeProcurementSystemConfiguration",
      "organizations:Describe*",
      "organizations:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:ListRoles",
        "iam:ListUsers",
        "iam:ListGroups",
        "iam:ListPolicies",
        "iam:ListPoliciesGrantingServiceAccess",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:GenerateOrganizationsAccessReport",
        "iam:GenerateCredentialReport",
        "iam:GetRole",
        "iam:GetPolicy",
        "iam:GetServiceLastAccessedDetails",
        "iam:GetServiceLastAccessedDetailsWithEntities",
        "iam:GetOrganizationsAccessReport",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:DescribeOrganizationalUnit",
        "organizations:DescribePolicy",
        "organizations:ListChildren",
        "organizations:ListParents",
        "organizations:ListPoliciesForTarget",
        "organizations:ListRoots",
        "organizations:ListPolicies",
        "organizations:ListTargetsForPolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:ListRoles",
      "iam:ListUsers",
      "iam:ListGroups",
      "iam:ListPolicies",
      "iam:ListPoliciesGrantingServiceAccess",
      "iam:GenerateServiceLastAccessedDetails",
      "iam:GenerateOrganizationsAccessReport",
      "iam:GenerateCredentialReport",
      "iam:GetRole",
      "iam:GetPolicy",
      "iam:GetServiceLastAccessedDetails",
      "iam:GetServiceLastAccessedDetailsWithEntities",
      "iam:GetOrganizationsAccessReport",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:DescribeOrganizationalUnit",
      "organizations:DescribePolicy",
      "organizations:ListChildren",
      "organizations:ListParents",
      "organizations:ListPoliciesForTarget",
      "organizations:ListRoots",
      "organizations:ListPolicies",
      "organizations:ListTargetsForPolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ram:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ram:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:SetV2LoggingOptions"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "iot.amazonaws.com"
          ]
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "iot:SetV2LoggingOptions"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": [
          "iot.amazonaws.com"
        ]
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sns:Publish"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sns:Publish"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:ListPrincipalThings",
        "iot:AddThingToThingGroup"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:ListPrincipalThings",
      "iot:AddThingToThingGroup"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:CreatePolicyVersion"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:CreatePolicyVersion"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appmesh:Describe*",
        "appmesh:List*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:DescribeStack*"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appmesh:Describe*",
      "appmesh:List*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:DescribeStack*"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appmesh:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/appmesh.amazonaws.com/AWSServiceRoleForAppMesh",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": [
            "appmesh.amazonaws.com"
          ]
        }
      }
    },
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStack*",
        "cloudformation:UpdateStack"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appmesh:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/appmesh.amazonaws.com/AWSServiceRoleForAppMesh",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AWSServiceName": [
          "appmesh.amazonaws.com"
        ]
      }
    }
  },
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeStack*",
      "cloudformation:UpdateStack"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:DescribeAccountLimits",
        "cloudformation:DescribeAccountLimits",
        "cloudwatch:DescribeAlarmsForMetric",
        "cloudwatch:GetMetricData",
        "cloudwatch:GetMetricStatistics",
        "dynamodb:DescribeLimits",
        "elasticloadbalancing:DescribeAccountLimits",
        "iam:GetAccountSummary",
        "kinesis:DescribeLimits",
        "organizations:DescribeAccount",
        "organizations:DescribeOrganization",
        "organizations:ListAWSServiceAccessForOrganization",
        "rds:DescribeAccountAttributes",
        "route53:GetAccountLimit",
        "servicequotas:GetAssociationForServiceQuotaTemplate",
        "servicequotas:GetAWSDefaultServiceQuota",
        "servicequotas:GetRequestedServiceQuotaChange",
        "servicequotas:GetServiceQuota",
        "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
        "servicequotas:ListAWSDefaultServiceQuotas",
        "servicequotas:ListRequestedServiceQuotaChangeHistory",
        "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
        "servicequotas:ListServices",
        "servicequotas:ListServiceQuotas",
        "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:DescribeAccountLimits",
      "cloudformation:DescribeAccountLimits",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "dynamodb:DescribeLimits",
      "elasticloadbalancing:DescribeAccountLimits",
      "iam:GetAccountSummary",
      "kinesis:DescribeLimits",
      "organizations:DescribeAccount",
      "organizations:DescribeOrganization",
      "organizations:ListAWSServiceAccessForOrganization",
      "rds:DescribeAccountAttributes",
      "route53:GetAccountLimit",
      "servicequotas:GetAssociationForServiceQuotaTemplate",
      "servicequotas:GetAWSDefaultServiceQuota",
      "servicequotas:GetRequestedServiceQuotaChange",
      "servicequotas:GetServiceQuota",
      "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
      "servicequotas:ListAWSDefaultServiceQuotas",
      "servicequotas:ListRequestedServiceQuotaChangeHistory",
      "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
      "servicequotas:ListServices",
      "servicequotas:ListServiceQuotas",
      "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "mgh:CreateProgressUpdateStream",
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:DescribeMigrationTask",
        "mgh:AssociateDiscoveredResource",
        "mgh:ListDiscoveredResources",
        "mgh:ImportMigrationTask",
        "mgh:ListCreatedArtifacts",
        "mgh:DisassociateDiscoveredResource",
        "mgh:AssociateCreatedArtifact",
        "mgh:NotifyMigrationTaskState",
        "mgh:DisassociateCreatedArtifact",
        "mgh:PutResourceAttributes"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/migrationTask/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:ListMigrationTasks",
        "mgh:NotifyApplicationState",
        "mgh:DescribeApplicationState"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "mgh:CreateProgressUpdateStream",
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:DescribeMigrationTask",
      "mgh:AssociateDiscoveredResource",
      "mgh:ListDiscoveredResources",
      "mgh:ImportMigrationTask",
      "mgh:ListCreatedArtifacts",
      "mgh:DisassociateDiscoveredResource",
      "mgh:AssociateCreatedArtifact",
      "mgh:NotifyMigrationTaskState",
      "mgh:DisassociateCreatedArtifact",
      "mgh:PutResourceAttributes"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/migrationTask/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:ListMigrationTasks",
      "mgh:NotifyApplicationState",
      "mgh:DescribeApplicationState"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iam:DeleteRole",
        "iam:ListAttachedRolePolicies"
      ],
      "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:AttachRolePolicy"
      ],
      "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
      "Effect": "Allow",
      "Condition": {
        "ArnEquals": {
          "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSDenyAll"
        }
      }
    },
    {
      "Action": [
        "iam:DetachRolePolicy"
      ],
      "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iam:DeleteRole",
      "iam:ListAttachedRolePolicies"
    ],
    "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:AttachRolePolicy"
    ],
    "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
    "Effect": "Allow",
    "Condition": {
      "ArnEquals": {
        "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSDenyAll"
      }
    }
  },
  {
    "Action": [
      "iam:DetachRolePolicy"
    ],
    "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "mgh:CreateProgressUpdateStream",
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:DescribeMigrationTask",
        "mgh:AssociateDiscoveredResource",
        "mgh:ListDiscoveredResources",
        "mgh:ImportMigrationTask",
        "mgh:ListCreatedArtifacts",
        "mgh:DisassociateDiscoveredResource",
        "mgh:AssociateCreatedArtifact",
        "mgh:NotifyMigrationTaskState",
        "mgh:DisassociateCreatedArtifact",
        "mgh:PutResourceAttributes"
      ],
      "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/migrationTask/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "mgh:ListMigrationTasks",
        "mgh:NotifyApplicationState",
        "mgh:DescribeApplicationState"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": "mgh:CreateProgressUpdateStream",
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:DescribeMigrationTask",
      "mgh:AssociateDiscoveredResource",
      "mgh:ListDiscoveredResources",
      "mgh:ImportMigrationTask",
      "mgh:ListCreatedArtifacts",
      "mgh:DisassociateDiscoveredResource",
      "mgh:AssociateCreatedArtifact",
      "mgh:NotifyMigrationTaskState",
      "mgh:DisassociateCreatedArtifact",
      "mgh:PutResourceAttributes"
    ],
    "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/migrationTask/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "mgh:ListMigrationTasks",
      "mgh:NotifyApplicationState",
      "mgh:DescribeApplicationState"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace-management:uploadFiles",
        "aws-marketplace-management:viewMarketing",
        "aws-marketplace-management:viewReports",
        "aws-marketplace-management:viewSupport",
        "aws-marketplace-management:viewSettings",
        "aws-marketplace:ListChangeSets",
        "aws-marketplace:DescribeChangeSet",
        "aws-marketplace:StartChangeSet",
        "aws-marketplace:CancelChangeSet",
        "aws-marketplace:ListEntities",
        "aws-marketplace:DescribeEntity",
        "ec2:DescribeImages",
        "ec2:DescribeSnapshots",
        "ec2:ModifyImageAttribute",
        "ec2:ModifySnapshotAttribute"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace-management:uploadFiles",
      "aws-marketplace-management:viewMarketing",
      "aws-marketplace-management:viewReports",
      "aws-marketplace-management:viewSupport",
      "aws-marketplace-management:viewSettings",
      "aws-marketplace:ListChangeSets",
      "aws-marketplace:DescribeChangeSet",
      "aws-marketplace:StartChangeSet",
      "aws-marketplace:CancelChangeSet",
      "aws-marketplace:ListEntities",
      "aws-marketplace:DescribeEntity",
      "ec2:DescribeImages",
      "ec2:DescribeSnapshots",
      "ec2:ModifyImageAttribute",
      "ec2:ModifySnapshotAttribute"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "cloudfront:GetDistribution",
        "cloudfront:ListDistributions",
        "dynamodb:DescribeTable",
        "dynamodb:ListTables",
        "ec2:DescribeInstances",
        "ec2:DescribeVolumes",
        "ecs:DescribeClusters",
        "ecs:DescribeContainerInstances",
        "ecs:ListClusters",
        "ecs:ListContainerInstances",
        "ecs:ListServices",
        "elasticache:DescribeCacheClusters",
        "elasticbeanstalk:DescribeEnvironments",
        "elasticfilesystem:DescribeFileSystems",
        "elasticloadbalancing:DescribeLoadBalancers",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "lambda:GetFunction",
        "lambda:ListFunctions",
        "rds:DescribeDBClusters",
        "rds:DescribeDBInstances",
        "resource-groups:ListGroupResources",
        "resource-groups:ListGroups",
        "route53:GetHealthCheck",
        "route53:ListHealthChecks",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "sns:ListTopics",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ListQueues"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "apigateway:GET"
      ],
      "Resource": [
        "arn:aws:apigateway:us-east-1::/restapis/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "autoscaling:DescribeAutoScalingGroups",
      "cloudfront:GetDistribution",
      "cloudfront:ListDistributions",
      "dynamodb:DescribeTable",
      "dynamodb:ListTables",
      "ec2:DescribeInstances",
      "ec2:DescribeVolumes",
      "ecs:DescribeClusters",
      "ecs:DescribeContainerInstances",
      "ecs:ListClusters",
      "ecs:ListContainerInstances",
      "ecs:ListServices",
      "elasticache:DescribeCacheClusters",
      "elasticbeanstalk:DescribeEnvironments",
      "elasticfilesystem:DescribeFileSystems",
      "elasticloadbalancing:DescribeLoadBalancers",
      "kinesis:DescribeStream",
      "kinesis:ListStreams",
      "lambda:GetFunction",
      "lambda:ListFunctions",
      "rds:DescribeDBClusters",
      "rds:DescribeDBInstances",
      "resource-groups:ListGroupResources",
      "resource-groups:ListGroups",
      "route53:GetHealthCheck",
      "route53:ListHealthChecks",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "sns:ListTopics",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "sqs:ListQueues"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "apigateway:GET"
    ],
    "Resource": [
      "arn:aws:apigateway:us-east-1::/restapis/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudwatch:PutMetricData"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": [
        "arn:aws:secretsmanager:*:*:secret:everest-*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-sixthsense-*/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "logs:*"
      ],
      "Resource": [
        "arn:aws:logs:*:*:/aws-sixthsense/*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudwatch:PutMetricData"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:GetSecretValue"
    ],
    "Resource": [
      "arn:aws:secretsmanager:*:*:secret:everest-*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-sixthsense-*/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "logs:*"
    ],
    "Resource": [
      "arn:aws:logs:*:*:/aws-sixthsense/*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "aws-marketplace:ListChangeSets",
        "aws-marketplace:DescribeChangeSet",
        "aws-marketplace:ListEntities",
        "aws-marketplace:DescribeEntity",
        "ec2:DescribeImages",
        "ec2:DescribeSnapshots"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "aws-marketplace:ListChangeSets",
      "aws-marketplace:DescribeChangeSet",
      "aws-marketplace:ListEntities",
      "aws-marketplace:DescribeEntity",
      "ec2:DescribeImages",
      "ec2:DescribeSnapshots"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "iotsitewise:*",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iotanalytics:List*",
        "iotanalytics:Describe*",
        "iotanalytics:Create*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iot:DescribeEndpoint",
        "iot:GetThingShadow"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "greengrass:GetGroup",
        "greengrass:GetGroupVersion",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:ListGroups"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:ListSecrets",
        "secretsmanager:CreateSecret"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "secretsmanager:UpdateSecret"
      ],
      "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "tag:GetResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": "iotsitewise.amazonaws.com"
        }
      }
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
      "Effect": "Allow",
      "Condition": {
        "StringEquals": {
          "iam:PassedToService": "iotsitewise.amazonaws.com"
        }
      }
    }
  ]
}
[
  {
    "Action": "iotsitewise:*",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iotanalytics:List*",
      "iotanalytics:Describe*",
      "iotanalytics:Create*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iot:DescribeEndpoint",
      "iot:GetThingShadow"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "greengrass:GetGroup",
      "greengrass:GetGroupVersion",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:ListGroups"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:ListSecrets",
      "secretsmanager:CreateSecret"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "secretsmanager:UpdateSecret"
    ],
    "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "tag:GetResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:CreateServiceLinkedRole"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:AWSServiceName": "iotsitewise.amazonaws.com"
      }
    }
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
    "Effect": "Allow",
    "Condition": {
      "StringEquals": {
        "iam:PassedToService": "iotsitewise.amazonaws.com"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:UpdateCertificate"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:UpdateCertificate"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:RevokeSecurityGroupIngress",
        "redshift:AuthorizeClusterSecurityGroupIngress",
        "redshift:CreateClusterSecurityGroup",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSecurityGroups",
        "redshift:ModifyCluster",
        "redshift:RevokeClusterSecurityGroupIngress",
        "s3:GetBucketLocation",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:PutBucketPolicy"
      ],
      "Resource": "arn:aws:s3:::amazon-machine-learning*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:CreateSecurityGroup",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeSecurityGroups",
      "ec2:RevokeSecurityGroupIngress",
      "redshift:AuthorizeClusterSecurityGroupIngress",
      "redshift:CreateClusterSecurityGroup",
      "redshift:DescribeClusters",
      "redshift:DescribeClusterSecurityGroups",
      "redshift:ModifyCluster",
      "redshift:RevokeClusterSecurityGroupIngress",
      "s3:GetBucketLocation",
      "s3:GetBucketPolicy",
      "s3:GetObject",
      "s3:PutObject"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:PutBucketPolicy"
    ],
    "Resource": "arn:aws:s3:::amazon-machine-learning*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iot:UpdateCACertificate"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iot:UpdateCACertificate"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "galaxy:DescribeDomains"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:DescribeNetworkInterfaces",
      "galaxy:DescribeDomains"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "config:PutConfigRule",
        "config:DeleteConfigRule"
      ],
      "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-multiaccountsetup.amazonaws.com/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "organizations:ListAccounts",
        "organizations:DescribeOrganization",
        "organizations:ListAWSServiceAccessForOrganization"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "config:PutConfigRule",
      "config:DeleteConfigRule"
    ],
    "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-multiaccountsetup.amazonaws.com/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "organizations:ListAccounts",
      "organizations:DescribeOrganization",
      "organizations:ListAWSServiceAccessForOrganization"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "workspaces:RebootWorkspaces",
        "workspaces:RebuildWorkspaces",
        "workspaces:ModifyWorkspaceProperties"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "workspaces:RebootWorkspaces",
      "workspaces:RebuildWorkspaces",
      "workspaces:ModifyWorkspaceProperties"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:CreateStackInstances",
        "cloudformation:CreateStackSet",
        "cloudformation:DeleteStack",
        "cloudformation:DeleteStackInstances",
        "cloudformation:DeleteStackSet",
        "cloudformation:DescribeStackInstance",
        "cloudformation:DescribeStacks",
        "cloudformation:DescribeStackSet",
        "cloudformation:DescribeStackSetOperation",
        "cloudformation:GetTemplate",
        "cloudformation:ListStackInstances",
        "cloudformation:UpdateStack",
        "cloudformation:UpdateStackInstances",
        "cloudformation:UpdateStackSet"
      ],
      "Resource": [
        "arn:aws:cloudformation:*:*:stack/AWSControlTower*/*",
        "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*",
        "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudtrail:CreateTrail",
        "cloudtrail:DeleteTrail",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:StartLogging",
        "cloudtrail:StopLogging",
        "cloudtrail:UpdateTrail",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:PutRetentionPolicy"
      ],
      "Resource": [
        "arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*",
        "arn:aws:cloudtrail:*:*:trail/aws-controltower*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::aws-controltower*/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "sts:AssumeRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/AWSControlTowerExecution"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudtrail:DescribeTrails",
        "ec2:DescribeAvailabilityZones",
        "iam:ListRoles",
        "logs:CreateLogGroup",
        "logs:DescribeLogGroups",
        "organizations:CreateAccount",
        "organizations:DescribeAccount",
        "organizations:DescribeCreateAccountStatus",
        "organizations:DescribeOrganization",
        "organizations:DescribeOrganizationalUnit",
        "organizations:DescribePolicy",
        "organizations:ListAccounts",
        "organizations:ListAccountsForParent",
        "organizations:ListAWSServiceAccessForOrganization",
        "organizations:ListChildren",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListParents",
        "organizations:ListPoliciesForTarget",
        "organizations:ListTargetsForPolicy",
        "organizations:ListRoots",
        "organizations:MoveAccount",
        "servicecatalog:AssociatePrincipalWithPortfolio"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:GetRole",
        "iam:GetUser",
        "iam:ListAttachedRolePolicies",
        "iam:GetRolePolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:PassRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole",
        "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateStack",
      "cloudformation:CreateStackInstances",
      "cloudformation:CreateStackSet",
      "cloudformation:DeleteStack",
      "cloudformation:DeleteStackInstances",
      "cloudformation:DeleteStackSet",
      "cloudformation:DescribeStackInstance",
      "cloudformation:DescribeStacks",
      "cloudformation:DescribeStackSet",
      "cloudformation:DescribeStackSetOperation",
      "cloudformation:GetTemplate",
      "cloudformation:ListStackInstances",
      "cloudformation:UpdateStack",
      "cloudformation:UpdateStackInstances",
      "cloudformation:UpdateStackSet"
    ],
    "Resource": [
      "arn:aws:cloudformation:*:*:stack/AWSControlTower*/*",
      "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*",
      "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudtrail:CreateTrail",
      "cloudtrail:DeleteTrail",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:StartLogging",
      "cloudtrail:StopLogging",
      "cloudtrail:UpdateTrail",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:PutRetentionPolicy"
    ],
    "Resource": [
      "arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*",
      "arn:aws:cloudtrail:*:*:trail/aws-controltower*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:GetObject"
    ],
    "Resource": [
      "arn:aws:s3:::aws-controltower*/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "sts:AssumeRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/AWSControlTowerExecution"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudtrail:DescribeTrails",
      "ec2:DescribeAvailabilityZones",
      "iam:ListRoles",
      "logs:CreateLogGroup",
      "logs:DescribeLogGroups",
      "organizations:CreateAccount",
      "organizations:DescribeAccount",
      "organizations:DescribeCreateAccountStatus",
      "organizations:DescribeOrganization",
      "organizations:DescribeOrganizationalUnit",
      "organizations:DescribePolicy",
      "organizations:ListAccounts",
      "organizations:ListAccountsForParent",
      "organizations:ListAWSServiceAccessForOrganization",
      "organizations:ListChildren",
      "organizations:ListOrganizationalUnitsForParent",
      "organizations:ListParents",
      "organizations:ListPoliciesForTarget",
      "organizations:ListTargetsForPolicy",
      "organizations:ListRoots",
      "organizations:MoveAccount",
      "servicecatalog:AssociatePrincipalWithPortfolio"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:GetRole",
      "iam:GetUser",
      "iam:ListAttachedRolePolicies",
      "iam:GetRolePolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:PassRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole",
      "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "route53resolver:*",
        "ec2:DescribeSubnets",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeVpcs"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "route53resolver:*",
      "ec2:DescribeSubnets",
      "ec2:CreateNetworkInterface",
      "ec2:DeleteNetworkInterface",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaces",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeVpcs"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "arn:aws:s3:::*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "s3:ListAllMyBuckets"
    ],
    "Resource": [
      "arn:aws:s3:::*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "opsworks:AssignInstance",
        "opsworks:CreateLayer",
        "opsworks:DeregisterInstance",
        "opsworks:DescribeInstances",
        "opsworks:DescribeStackProvisioningParameters",
        "opsworks:DescribeStacks",
        "opsworks:UnassignInstance"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:DescribeInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "opsworks:AssignInstance",
      "opsworks:CreateLayer",
      "opsworks:DeregisterInstance",
      "opsworks:DescribeInstances",
      "opsworks:DescribeStackProvisioningParameters",
      "opsworks:DescribeStacks",
      "opsworks:UnassignInstance"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:DescribeInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appmesh-preview:StreamAggregatedResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appmesh-preview:StreamAggregatedResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "discovery:ListConfigurations",
        "discovery:DescribeConfigurations"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "discovery:ListConfigurations",
      "discovery:DescribeConfigurations"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "managedblockchain:Get*",
        "managedblockchain:List*"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "managedblockchain:Get*",
      "managedblockchain:List*"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "managedblockchain:*",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:CreateVpcEndpoint",
        "kms:ListAliases",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "managedblockchain:*",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeVpcs",
      "ec2:CreateVpcEndpoint",
      "kms:ListAliases",
      "kms:DescribeKey"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "cloudformation:CreateChangeSet",
        "cloudformation:CreateStack",
        "cloudformation:DeleteStack",
        "cloudformation:ExecuteChangeSet"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLikeIfExists": {
          "cloudformation:ResourceTypes": [
            "AWS::EC2::*"
          ]
        }
      }
    },
    {
      "Action": [
        "cloudformation:DeleteChangeSet",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResources",
        "cloudformation:GetTemplate"
      ],
      "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "cloudformation:DescribeStacks",
        "cloudformation:ValidateTemplate",
        "cloudformation:DescribeStackResource",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "s3:CreateBucket",
        "s3:DeleteBucket",
        "s3:DeleteObject",
        "s3:GetBucketAcl",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutLifecycleConfiguration"
      ],
      "Resource": "arn:aws:s3:::sms-app-*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "sms:CreateReplicationJob",
        "sms:DeleteReplicationJob",
        "sms:GetReplicationJobs",
        "sms:GetReplicationRuns",
        "sms:GetServers",
        "sms:ImportServerCatalog",
        "sms:StartOnDemandReplicationRun",
        "sms:UpdateReplicationJob"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:ModifySnapshotAttribute",
        "ec2:CopySnapshot",
        "ec2:CopyImage",
        "ec2:Describe*",
        "ec2:DeleteSnapshot",
        "ec2:DeregisterImage",
        "ec2:RunInstances"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
      ],
      "Resource": "arn:aws:ec2:*:*:instance/*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:GetRole",
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": "iam:PassRole",
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "StringLike": {
          "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        }
      }
    },
    {
      "Action": [
        "ec2:ModifyInstanceAttribute",
        "ec2:StopInstances",
        "ec2:StartInstances",
        "ec2:TerminateInstances"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Condition": {
        "ForAllValues:StringLike": {
          "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        }
      }
    }
  ]
}
[
  {
    "Action": [
      "cloudformation:CreateChangeSet",
      "cloudformation:CreateStack",
      "cloudformation:DeleteStack",
      "cloudformation:ExecuteChangeSet"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLikeIfExists": {
        "cloudformation:ResourceTypes": [
          "AWS::EC2::*"
        ]
      }
    }
  },
  {
    "Action": [
      "cloudformation:DeleteChangeSet",
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResources",
      "cloudformation:GetTemplate"
    ],
    "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "cloudformation:DescribeStacks",
      "cloudformation:ValidateTemplate",
      "cloudformation:DescribeStackResource",
      "s3:ListAllMyBuckets"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteObject",
      "s3:GetBucketAcl",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutLifecycleConfiguration"
    ],
    "Resource": "arn:aws:s3:::sms-app-*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "sms:CreateReplicationJob",
      "sms:DeleteReplicationJob",
      "sms:GetReplicationJobs",
      "sms:GetReplicationRuns",
      "sms:GetServers",
      "sms:ImportServerCatalog",
      "sms:StartOnDemandReplicationRun",
      "sms:UpdateReplicationJob"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:ModifySnapshotAttribute",
      "ec2:CopySnapshot",
      "ec2:CopyImage",
      "ec2:Describe*",
      "ec2:DeleteSnapshot",
      "ec2:DeregisterImage",
      "ec2:RunInstances"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateTags",
      "ec2:DeleteTags"
    ],
    "Resource": "arn:aws:ec2:*:*:instance/*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:GetRole",
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": "iam:PassRole",
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "StringLike": {
        "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
      }
    }
  },
  {
    "Action": [
      "ec2:ModifyInstanceAttribute",
      "ec2:StopInstances",
      "ec2:StartInstances",
      "ec2:TerminateInstances"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Condition": {
      "ForAllValues:StringLike": {
        "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
      }
    }
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sts:AssumeRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "sts:AssumeRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lakeformation:*",
        "cloudtrail:DescribeTrails",
        "cloudtrail:LookupEvents",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:CreateDatabase",
        "glue:UpdateDatabase",
        "glue:DeleteDatabase",
        "glue:GetConnections",
        "glue:SearchTables",
        "glue:GetTable",
        "glue:CreateTable",
        "glue:UpdateTable",
        "glue:DeleteTable",
        "glue:GetTableVersions",
        "glue:GetPartitions",
        "glue:GetTables",
        "glue:GetWorkflow",
        "glue:ListWorkflows",
        "glue:BatchGetWorkflows",
        "glue:DeleteWorkflow",
        "glue:GetWorkflowRuns",
        "glue:StartWorkflowRun",
        "glue:GetWorkflow",
        "s3:ListObjects",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets",
        "s3:GetBucketAcl",
        "iam:ListUsers",
        "iam:ListRoles",
        "iam:GetRole",
        "iam:GetRolePolicy"
      ],
      "Resource": "*",
      "Effect": "Allow"
    },
    {
      "Action": [
        "lakeformation:PutDataLakeSettings"
      ],
      "Resource": "*",
      "Effect": "Deny"
    }
  ]
}
[
  {
    "Action": [
      "lakeformation:*",
      "cloudtrail:DescribeTrails",
      "cloudtrail:LookupEvents",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:CreateDatabase",
      "glue:UpdateDatabase",
      "glue:DeleteDatabase",
      "glue:GetConnections",
      "glue:SearchTables",
      "glue:GetTable",
      "glue:CreateTable",
      "glue:UpdateTable",
      "glue:DeleteTable",
      "glue:GetTableVersions",
      "glue:GetPartitions",
      "glue:GetTables",
      "glue:GetWorkflow",
      "glue:ListWorkflows",
      "glue:BatchGetWorkflows",
      "glue:DeleteWorkflow",
      "glue:GetWorkflowRuns",
      "glue:StartWorkflowRun",
      "glue:GetWorkflow",
      "s3:ListObjects",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListAllMyBuckets",
      "s3:GetBucketAcl",
      "iam:ListUsers",
      "iam:ListRoles",
      "iam:GetRole",
      "iam:GetRolePolicy"
    ],
    "Resource": "*",
    "Effect": "Allow"
  },
  {
    "Action": [
      "lakeformation:PutDataLakeSettings"
    ],
    "Resource": "*",
    "Effect": "Deny"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "*"
      ],
      "Resource": "*",
      "Effect": "Deny"
    }
  ]
}
[
  {
    "Action": [
      "*"
    ],
    "Resource": "*",
    "Effect": "Deny"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "iq:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "iq:*"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances",
        "ec2-instance-connect:SendSSHPublicKey"
      ],
      "Resource": "*",
      "Effect": "Allow",
      "Sid": "EC2InstanceConnect"
    }
  ]
}
[
  {
    "Action": [
      "ec2:DescribeInstances",
      "ec2-instance-connect:SendSSHPublicKey"
    ],
    "Resource": "*",
    "Effect": "Allow",
    "Sid": "EC2InstanceConnect"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "appmesh:StreamAggregatedResources"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "appmesh:StreamAggregatedResources"
    ],
    "Resource": "*",
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "apigateway:GET"
      ],
      "Resource": [
        "arn:aws:apigateway:*::/account",
        "arn:aws:apigateway:*::/clientcertificates",
        "arn:aws:apigateway:*::/clientcertificates/*",
        "arn:aws:apigateway:*::/domainnames",
        "arn:aws:apigateway:*::/domainnames/*",
        "arn:aws:apigateway:*::/domainnames/*/basepathmappings",
        "arn:aws:apigateway:*::/domainnames/*/basepathmappings/*",
        "arn:aws:apigateway:*::/restapis",
        "arn:aws:apigateway:*::/restapis/*",
        "arn:aws:apigateway:*::/restapis/*/authorizers",
        "arn:aws:apigateway:*::/restapis/*/authorizers/*",
        "arn:aws:apigateway:*::/restapis/*/deployments",
        "arn:aws:apigateway:*::/restapis/*/deployments/*",
        "arn:aws:apigateway:*::/restapis/*/models",
        "arn:aws:apigateway:*::/restapis/*/models/*",
        "arn:aws:apigateway:*::/restapis/*/models/*/default_template",
        "arn:aws:apigateway:*::/restapis/*/resources",
        "arn:aws:apigateway:*::/restapis/*/resources/*",
        "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
        "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
        "arn:aws:apigateway:*::/restapis/*/stages/*/sdks/*",
        "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
        "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
        "arn:aws:apigateway:*::/restapis/*/stages",
        "arn:aws:apigateway:*::/restapis/*/stages/*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "iam:DeleteRole"
      ],
      "Resource": [
        "arn:aws:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "a4b:getDevice",
        "a4b:getProfile",
        "a4b:getRoom",
        "a4b:getRoomSkillParameter",
        "a4b:getSkillGroup",
        "a4b:searchDevices",
        "a4b:searchProfiles",
        "a4b:searchRooms",
        "a4b:searchSkillGroups",
        "acm-pca:describeCertificateAuthority",
        "acm-pca:describeCertificateAuthorityAuditReport",
        "acm-pca:getCertificate",
        "acm-pca:getCertificateAuthorityCertificate",
        "acm-pca:getCertificateAuthorityCsr",
        "acm-pca:listCertificateAuthorities",
        "acm-pca:listTags",
        "acm:describeCertificate",
        "acm:getCertificate",
        "acm:listCertificates",
        "acm:listTagsForCertificate",
        "application-autoscaling:describeScalableTargets",
        "application-autoscaling:describeScalingActivities",
        "application-autoscaling:describeScalingPolicies",
        "appstream:describeDirectoryConfigs",
        "appstream:describeFleets",
        "appstream:describeImageBuilders",
        "appstream:describeImages",
        "appstream:describeSessions",
        "appstream:describeStacks",
        "appstream:listAssociatedFleets",
        "appstream:listAssociatedStacks",
        "appstream:listTagsForResource",
        "appsync:getFunction",
        "appsync:getGraphqlApi",
        "appsync:getIntrospectionSchema",
        "appsync:getResolver",
        "appsync:getSchemaCreationStatus",
        "appsync:getType",
        "appsync:listDataSources",
        "appsync:listFunctions",
        "appsync:listGraphqlApis",
        "appsync:listResolvers",
        "appsync:listTypes",
        "athena:batchGetNamedQuery",
        "athena:batchGetQueryExecution",
        "athena:getNamedQuery",
        "athena:getQueryExecution",
        "athena:listNamedQueries",
        "athena:listQueryExecutions",
        "autoscaling-plans:describeScalingPlanResources",
        "autoscaling-plans:describeScalingPlans",
        "autoscaling-plans:getScalingPlanResourceForecastData",
        "autoscaling:describeAccountLimits",
        "autoscaling:describeAdjustmentTypes",
        "autoscaling:describeAutoScalingGroups",
        "autoscaling:describeAutoScalingInstances",
        "autoscaling:describeAutoScalingNotificationTypes",
        "autoscaling:describeLaunchConfigurations",
        "autoscaling:describeLifecycleHooks",
        "autoscaling:describeLifecycleHookTypes",
        "autoscaling:describeLoadBalancers",
        "autoscaling:describeLoadBalancerTargetGroups",
        "autoscaling:describeMetricCollectionTypes",
        "autoscaling:describeNotificationConfigurations",
        "autoscaling:describePolicies",
        "autoscaling:describeScalingActivities",
        "autoscaling:describeScalingProcessTypes",
        "autoscaling:describeScheduledActions",
        "autoscaling:describeTags",
        "autoscaling:describeTerminationPolicyTypes",
        "backup:describeBackupJob",
        "backup:describeBackupVault",
        "backup:describeProtectedResource",
        "backup:describeRecoveryPoint",
        "backup:describeRestoreJob",
        "backup:getBackupPlan",
        "backup:getBackupPlanFromJSON",
        "backup:getBackupPlanFromTemplate",
        "backup:getBackupSelection",
        "backup:getBackupVaultAccessPolicy",
        "backup:getBackupVaultNotifications",
        "backup:getRecoveryPointRestoreMetadata",
        "backup:getSupportedResourceTypes",
        "backup:listBackupJobs",
        "backup:listBackupPlans",
        "backup:listBackupPlanTemplates",
        "backup:listBackupPlanVersions",
        "backup:listBackupSelections",
        "backup:listBackupVaults",
        "backup:listProtectedResources",
        "backup:listRecoveryPointsByBackupVault",
        "backup:listRecoveryPointsByResource",
        "backup:listRestoreJobs",
        "backup:listTags",
        "batch:describeComputeEnvironments",
        "batch:describeJobDefinitions",
        "batch:describeJobQueues",
        "batch:describeJobs",
        "batch:listJobs",
        "budgets:describeBudget",
        "budgets:describeBudgets",
        "budgets:describeNotificationsForBudget",
        "budgets:describeSubscribersForNotification",
        "ce:getCostAndUsage",
        "ce:getDimensionValues",
        "ce:getReservationCoverage",
        "ce:getReservationUtilization",
        "ce:getTags",
        "cloud9:describeEnvironmentMemberships",
        "cloud9:describeEnvironments",
        "cloud9:listEnvironments",
        "clouddirectory:getDirectory",
        "clouddirectory:listDirectories",
        "cloudformation:describeAccountLimits",
        "cloudformation:describeChangeSet",
        "cloudformation:describeStackEvents",
        "cloudformation:describeStackInstance",
        "cloudformation:describeStackResource",
        "cloudformation:describeStackResources",
        "cloudformation:describeStacks",
        "cloudformation:describeStackSet",
        "cloudformation:describeStackSetOperation",
        "cloudformation:estimateTemplateCost",
        "cloudformation:getStackPolicy",
        "cloudformation:getTemplate",
        "cloudformation:getTemplateSummary",
        "cloudformation:listChangeSets",
        "cloudformation:listExports",
        "cloudformation:listImports",
        "cloudformation:listStackInstances",
        "cloudformation:listStackResources",
        "cloudformation:listStacks",
        "cloudformation:listStackSetOperationResults",
        "cloudformation:listStackSetOperations",
        "cloudformation:listStackSets",
        "cloudfront:getCloudFrontOriginAccessIdentity",
        "cloudfront:getCloudFrontOriginAccessIdentityConfig",
        "cloudfront:getDistribution",
        "cloudfront:getDistributionConfig",
        "cloudfront:getInvalidation",
        "cloudfront:getStreamingDistribution",
        "cloudfront:getStreamingDistributionConfig",
        "cloudfront:listCloudFrontOriginAccessIdentities",
        "cloudfront:listDistributions",
        "cloudfront:listDistributionsByWebACLId",
        "cloudfront:listInvalidations",
        "cloudfront:listStreamingDistributions",
        "cloudhsm:describeBackups",
        "cloudhsm:describeClusters",
        "cloudsearch:describeAnalysisSchemes",
        "cloudsearch:describeAvailabilityOptions",
        "cloudsearch:describeDomains",
        "cloudsearch:describeExpressions",
        "cloudsearch:describeIndexFields",
        "cloudsearch:describeScalingParameters",
        "cloudsearch:describeServiceAccessPolicies",
        "cloudsearch:describeSuggesters",
        "cloudsearch:listDomainNames",
        "cloudtrail:describeTrails",
        "cloudtrail:getEventSelectors",
        "cloudtrail:getTrailStatus",
        "cloudtrail:listPublicKeys",
        "cloudtrail:listTags",
        "cloudtrail:lookupEvents",
        "cloudwatch:describeAlarmHistory",
        "cloudwatch:describeAlarms",
        "cloudwatch:describeAlarmsForMetric",
        "cloudwatch:getDashboard",
        "cloudwatch:getMetricData",
        "cloudwatch:getMetricStatistics",
        "cloudwatch:listDashboards",
        "cloudwatch:listMetrics",
        "codebuild:batchGetBuilds",
        "codebuild:batchGetProjects",
        "codebuild:listBuilds",
        "codebuild:listBuildsForProject",
        "codebuild:listCuratedEnvironmentImages",
        "codebuild:listProjects",
        "codebuild:listSourceCredentials",
        "codecommit:batchGetRepositories",
        "codecommit:getBranch",
        "codecommit:getRepository",
        "codecommit:getRepositoryTriggers",
        "codecommit:listBranches",
        "codecommit:listRepositories",
        "codedeploy:batchGetApplications",
        "codedeploy:batchGetDeployments",
        "codedeploy:batchGetOnPremisesInstances",
        "codedeploy:getApplication",
        "codedeploy:getApplicationRevision",
        "codedeploy:getDeployment",
        "codedeploy:getDeploymentConfig",
        "codedeploy:getDeploymentGroup",
        "codedeploy:getDeploymentInstance",
        "codedeploy:getOnPremisesInstance",
        "codedeploy:listApplicationRevisions",
        "codedeploy:listApplications",
        "codedeploy:listDeploymentConfigs",
        "codedeploy:listDeploymentGroups",
        "codedeploy:listDeploymentInstances",
        "codedeploy:listDeployments",
        "codedeploy:listOnPremisesInstances",
        "codepipeline:getJobDetails",
        "codepipeline:getPipeline",
        "codepipeline:getPipelineExecution",
        "codepipeline:getPipelineState",
        "codepipeline:listActionTypes",
        "codepipeline:listPipelines",
        "codestar:describeProject",
        "codestar:listProjects",
        "codestar:listResources",
        "codestar:listTeamMembers",
        "codestar:listUserProfiles",
        "cognito-identity:describeIdentityPool",
        "cognito-identity:getIdentityPoolRoles",
        "cognito-identity:listIdentities",
        "cognito-identity:listIdentityPools",
        "cognito-idp:adminGetUser",
        "cognito-idp:describeIdentityProvider",
        "cognito-idp:describeResourceServer",
        "cognito-idp:describeRiskConfiguration",
        "cognito-idp:describeUserImportJob",
        "cognito-idp:describeUserPool",
        "cognito-idp:describeUserPoolClient",
        "cognito-idp:describeUserPoolDomain",
        "cognito-idp:getGroup",
        "cognito-idp:getUICustomization",
        "cognito-idp:getUser",
        "cognito-idp:getUserPoolMfaConfig",
        "cognito-idp:listGroups",
        "cognito-idp:listIdentityProviders",
        "cognito-idp:listResourceServers",
        "cognito-idp:listUserImportJobs",
        "cognito-idp:listUserPoolClients",
        "cognito-idp:listUserPools",
        "cognito-sync:describeDataset",
        "cognito-sync:describeIdentityPoolUsage",
        "cognito-sync:describeIdentityUsage",
        "cognito-sync:getCognitoEvents",
        "cognito-sync:getIdentityPoolConfiguration",
        "cognito-sync:listDatasets",
        "cognito-sync:listIdentityPoolUsage",
        "config:describeConfigRuleEvaluationStatus",
        "config:describeConfigRules",
        "config:describeConfigurationRecorders",
        "config:describeConfigurationRecorderStatus",
        "config:describeDeliveryChannels",
        "config:describeDeliveryChannelStatus",
        "config:getResourceConfigHistory",
        "config:listDiscoveredResources",
        "datapipeline:describeObjects",
        "datapipeline:describePipelines",
        "datapipeline:getPipelineDefinition",
        "datapipeline:listPipelines",
        "datapipeline:queryObjects",
        "datasync:describeAgent",
        "datasync:describeLocationEfs",
        "datasync:describeLocationNfs",
        "datasync:describeLocationS3",
        "datasync:describeTask",
        "datasync:describeTaskExecution",
        "datasync:listAgents",
        "datasync:listLocations",
        "datasync:listTaskExecutions",
        "datasync:listTasks",
        "dax:describeClusters",
        "dax:describeDefaultParameters",
        "dax:describeEvents",
        "dax:describeParameterGroups",
        "dax:describeParameters",
        "dax:describeSubnetGroups",
        "devicefarm:getAccountSettings",
        "devicefarm:getDevice",
        "devicefarm:getDevicePool",
        "devicefarm:getDevicePoolCompatibility",
        "devicefarm:getJob",
        "devicefarm:getProject",
        "devicefarm:getRemoteAccessSession",
        "devicefarm:getRun",
        "devicefarm:getSuite",
        "devicefarm:getTest",
        "devicefarm:getUpload",
        "devicefarm:listArtifacts",
        "devicefarm:listDevicePools",
        "devicefarm:listDevices",
        "devicefarm:listJobs",
        "devicefarm:listProjects",
        "devicefarm:listRemoteAccessSessions",
        "devicefarm:listRuns",
        "devicefarm:listSamples",
        "devicefarm:listSuites",
        "devicefarm:listTests",
        "devicefarm:listUniqueProblems",
        "devicefarm:listUploads",
        "directconnect:describeConnections",
        "directconnect:describeConnectionsOnInterconnect",
        "directconnect:describeInterconnects",
        "directconnect:describeLocations",
        "directconnect:describeVirtualGateways",
        "directconnect:describeVirtualInterfaces",
        "dlm:getLifecyclePolicies",
        "dlm:getLifecyclePolicy",
        "dms:describeAccountAttributes",
        "dms:describeConnections",
        "dms:describeEndpoints",
        "dms:describeEndpointTypes",
        "dms:describeOrderableReplicationInstances",
        "dms:describeRefreshSchemasStatus",
        "dms:describeReplicationInstances",
        "dms:describeReplicationSubnetGroups",
        "ds:describeConditionalForwarders",
        "ds:describeDirectories",
        "ds:describeEventTopics",
        "ds:describeSnapshots",
        "ds:describeTrusts",
        "ds:getDirectoryLimits",
        "ds:getSnapshotLimits",
        "ds:listIpRoutes",
        "ds:listSchemaExtensions",
        "ds:listTagsForResource",
        "dynamodb:describeBackup",
        "dynamodb:describeContinuousBackups",
        "dynamodb:describeGlobalTable",
        "dynamodb:describeLimits",
        "dynamodb:describeStream",
        "dynamodb:describeTable",
        "dynamodb:describeTimeToLive",
        "dynamodb:listBackups",
        "dynamodb:listGlobalTables",
        "dynamodb:listStreams",
        "dynamodb:listTables",
        "dynamodb:listTagsOfResource",
        "ec2:acceptReservedInstancesExchangeQuote",
        "ec2:cancelReservedInstancesListing",
        "ec2:createReservedInstancesListing",
        "ec2:describeAccountAttributes",
        "ec2:describeAddresses",
        "ec2:describeAvailabilityZones",
        "ec2:describeBundleTasks",
        "ec2:describeByoipCidrs",
        "ec2:describeClassicLinkInstances",
        "ec2:describeConversionTasks",
        "ec2:describeCustomerGateways",
        "ec2:describeDhcpOptions",
        "ec2:describeElasticGpus",
        "ec2:describeExportTasks",
        "ec2:describeFlowLogs",
        "ec2:describeHostReservationOfferings",
        "ec2:describeHostReservations",
        "ec2:describeHosts",
        "ec2:describeIdentityIdFormat",
        "ec2:describeIdFormat",
        "ec2:describeImageAttribute",
        "ec2:describeImages",
        "ec2:describeImportImageTasks",
        "ec2:describeImportSnapshotTasks",
        "ec2:describeInstanceAttribute",
        "ec2:describeInstances",
        "ec2:describeInstanceStatus",
        "ec2:describeInternetGateways",
        "ec2:describeKeyPairs",
        "ec2:describeLaunchTemplates",
        "ec2:describeLaunchTemplateVersions",
        "ec2:describeMovingAddresses",
        "ec2:describeNatGateways",
        "ec2:describeNetworkAcls",
        "ec2:describeNetworkInterfaceAttribute",
        "ec2:describeNetworkInterfaces",
        "ec2:describePlacementGroups",
        "ec2:describePrefixLists",
        "ec2:describePublicIpv4Pools",
        "ec2:describeRegions",
        "ec2:describeReservedInstances",
        "ec2:describeReservedInstancesListings",
        "ec2:describeReservedInstancesModifications",
        "ec2:describeReservedInstancesOfferings",
        "ec2:describeRouteTables",
        "ec2:describeScheduledInstances",
        "ec2:describeSecurityGroups",
        "ec2:describeSnapshotAttribute",
        "ec2:describeSnapshots",
        "ec2:describeSpotDatafeedSubscription",
        "ec2:describeSpotFleetInstances",
        "ec2:describeSpotFleetRequestHistory",
        "ec2:describeSpotFleetRequests",
        "ec2:describeSpotInstanceRequests",
        "ec2:describeSpotPriceHistory",
        "ec2:describeSubnets",
        "ec2:describeTags",
        "ec2:describeTransitGatewayAttachments",
        "ec2:describeTransitGatewayRouteTables",
        "ec2:describeTransitGateways",
        "ec2:describeTransitGatewayVpcAttachments",
        "ec2:describeVolumeAttribute",
        "ec2:describeVolumes",
        "ec2:describeVolumesModifications",
        "ec2:describeVolumeStatus",
        "ec2:describeVpcAttribute",
        "ec2:describeVpcClassicLink",
        "ec2:describeVpcClassicLinkDnsSupport",
        "ec2:describeVpcEndpointConnectionNotifications",
        "ec2:describeVpcEndpointConnections",
        "ec2:describeVpcEndpoints",
        "ec2:describeVpcEndpointServiceConfigurations",
        "ec2:describeVpcEndpointServicePermissions",
        "ec2:describeVpcEndpointServices",
        "ec2:describeVpcPeeringConnections",
        "ec2:describeVpcs",
        "ec2:describeVpnConnections",
        "ec2:describeVpnGateways",
        "ec2:getConsoleScreenshot",
        "ec2:getReservedInstancesExchangeQuote",
        "ec2:getTransitGatewayAttachmentPropagations",
        "ec2:getTransitGatewayRouteTableAssociations",
        "ec2:getTransitGatewayRouteTablePropagations",
        "ec2:modifyReservedInstances",
        "ec2:purchaseReservedInstancesOffering",
        "ecr:batchCheckLayerAvailability",
        "ecr:describeImages",
        "ecr:describeRepositories",
        "ecr:getRepositoryPolicy",
        "ecr:listImages",
        "ecs:describeClusters",
        "ecs:describeContainerInstances",
        "ecs:describeServices",
        "ecs:describeTaskDefinition",
        "ecs:describeTasks",
        "ecs:listClusters",
        "ecs:listContainerInstances",
        "ecs:listServices",
        "ecs:listTaskDefinitions",
        "ecs:listTasks",
        "eks:describeCluster",
        "eks:describeUpdate",
        "eks:listClusters",
        "eks:listUpdates",
        "elasticache:describeCacheClusters",
        "elasticache:describeCacheEngineVersions",
        "elasticache:describeCacheParameterGroups",
        "elasticache:describeCacheParameters",
        "elasticache:describeCacheSecurityGroups",
        "elasticache:describeCacheSubnetGroups",
        "elasticache:describeEngineDefaultParameters",
        "elasticache:describeEvents",
        "elasticache:describeReplicationGroups",
        "elasticache:describeReservedCacheNodes",
        "elasticache:describeReservedCacheNodesOfferings",
        "elasticache:describeSnapshots",
        "elasticache:listAllowedNodeTypeModifications",
        "elasticache:listTagsForResource",
        "elasticbeanstalk:checkDNSAvailability",
        "elasticbeanstalk:describeApplications",
        "elasticbeanstalk:describeApplicationVersions",
        "elasticbeanstalk:describeConfigurationOptions",
        "elasticbeanstalk:describeConfigurationSettings",
        "elasticbeanstalk:describeEnvironmentHealth",
        "elasticbeanstalk:describeEnvironmentManagedActionHistory",
        "elasticbeanstalk:describeEnvironmentManagedActions",
        "elasticbeanstalk:describeEnvironmentResources",
        "elasticbeanstalk:describeEnvironments",
        "elasticbeanstalk:describeEvents",
        "elasticbeanstalk:describeInstancesHealth",
        "elasticbeanstalk:describePlatformVersion",
        "elasticbeanstalk:listAvailableSolutionStacks",
        "elasticbeanstalk:listPlatformVersions",
        "elasticbeanstalk:validateConfigurationSettings",
        "elasticfilesystem:describeFileSystems",
        "elasticfilesystem:describeMountTargets",
        "elasticfilesystem:describeMountTargetSecurityGroups",
        "elasticfilesystem:describeTags",
        "elasticloadbalancing:describeInstanceHealth",
        "elasticloadbalancing:describeListenerCertificates",
        "elasticloadbalancing:describeListeners",
        "elasticloadbalancing:describeLoadBalancerAttributes",
        "elasticloadbalancing:describeLoadBalancerPolicies",
        "elasticloadbalancing:describeLoadBalancerPolicyTypes",
        "elasticloadbalancing:describeLoadBalancers",
        "elasticloadbalancing:describeRules",
        "elasticloadbalancing:describeSSLPolicies",
        "elasticloadbalancing:describeTags",
        "elasticloadbalancing:describeTargetGroupAttributes",
        "elasticloadbalancing:describeTargetGroups",
        "elasticloadbalancing:describeTargetHealth",
        "elasticmapreduce:describeCluster",
        "elasticmapreduce:describeSecurityConfiguration",
        "elasticmapreduce:describeStep",
        "elasticmapreduce:listBootstrapActions",
        "elasticmapreduce:listClusters",
        "elasticmapreduce:listInstanceGroups",
        "elasticmapreduce:listInstances",
        "elasticmapreduce:listSecurityConfigurations",
        "elasticmapreduce:listSteps",
        "elastictranscoder:listJobsByPipeline",
        "elastictranscoder:listJobsByStatus",
        "elastictranscoder:listPipelines",
        "elastictranscoder:listPresets",
        "elastictranscoder:readPipeline",
        "elastictranscoder:readPreset",
        "es:describeElasticsearchDomain",
        "es:describeElasticsearchDomainConfig",
        "es:describeElasticsearchDomains",
        "es:listDomainNames",
        "es:listTags",
        "events:describeEventBus",
        "events:describeRule",
        "events:listRuleNamesByTarget",
        "events:listRules",
        "events:listTargetsByRule",
        "events:testEventPattern",
        "firehose:describeDeliveryStream",
        "firehose:listDeliveryStreams",
        "fsx:describeBackups",
        "fsx:describeFileSystems",
        "fsx:listTagsForResource",
        "glacier:describeJob",
        "glacier:describeVault",
        "glacier:getDataRetrievalPolicy",
        "glacier:getVaultAccessPolicy",
        "glacier:getVaultLock",
        "glacier:getVaultNotifications",
        "glacier:listJobs",
        "glacier:listTagsForVault",
        "glacier:listVaults",
        "globalaccelerator:describeAccelerator",
        "globalaccelerator:describeAcceleratorAttributes",
        "globalaccelerator:describeEndpointGroup",
        "globalaccelerator:describeListener",
        "globalaccelerator:listAccelerators",
        "globalaccelerator:listEndpointGroups",
        "globalaccelerator:listListeners",
        "glue:batchGetPartition",
        "glue:getCatalogImportStatus",
        "glue:getClassifier",
        "glue:getClassifiers",
        "glue:getCrawler",
        "glue:getCrawlerMetrics",
        "glue:getCrawlers",
        "glue:getDatabase",
        "glue:getDatabases",
        "glue:getDataflowGraph",
        "glue:getDevEndpoint",
        "glue:getDevEndpoints",
        "glue:getJob",
        "glue:getJobRun",
        "glue:getJobRuns",
        "glue:getJobs",
        "glue:getMapping",
        "glue:getPartition",
        "glue:getPartitions",
        "glue:getTable",
        "glue:getTables",
        "glue:getTableVersions",
        "glue:getTrigger",
        "glue:getTriggers",
        "glue:getUserDefinedFunction",
        "glue:getUserDefinedFunctions",
        "greengrass:getConnectivityInfo",
        "greengrass:getCoreDefinition",
        "greengrass:getCoreDefinitionVersion",
        "greengrass:getDeploymentStatus",
        "greengrass:getDeviceDefinition",
        "greengrass:getDeviceDefinitionVersion",
        "greengrass:getFunctionDefinition",
        "greengrass:getFunctionDefinitionVersion",
        "greengrass:getGroup",
        "greengrass:getGroupCertificateAuthority",
        "greengrass:getGroupVersion",
        "greengrass:getLoggerDefinition",
        "greengrass:getLoggerDefinitionVersion",
        "greengrass:getResourceDefinitionVersion",
        "greengrass:getServiceRoleForAccount",
        "greengrass:getSubscriptionDefinition",
        "greengrass:getSubscriptionDefinitionVersion",
        "greengrass:listCoreDefinitions",
        "greengrass:listCoreDefinitionVersions",
        "greengrass:listDeployments",
        "greengrass:listDeviceDefinitions",
        "greengrass:listDeviceDefinitionVersions",
        "greengrass:listFunctionDefinitions",
        "greengrass:listFunctionDefinitionVersions",
        "greengrass:listGroups",
        "greengrass:listGroupVersions",
        "greengrass:listLoggerDefinitions",
        "greengrass:listLoggerDefinitionVersions",
        "greengrass:listResourceDefinitions",
        "greengrass:listResourceDefinitionVersions",
        "greengrass:listSubscriptionDefinitions",
        "greengrass:listSubscriptionDefinitionVersions",
        "guardduty:getDetector",
        "guardduty:getFindings",
        "guardduty:getFindingsStatistics",
        "guardduty:getInvitationsCount",
        "guardduty:getIPSet",
        "guardduty:getMasterAccount",
        "guardduty:getMembers",
        "guardduty:getThreatIntelSet",
        "guardduty:listDetectors",
        "guardduty:listFindings",
        "guardduty:listInvitations",
        "guardduty:listIPSets",
        "guardduty:listMembers",
        "guardduty:listThreatIntelSets",
        "health:describeAffectedEntities",
        "health:describeEntityAggregates",
        "health:describeEventAggregates",
        "health:describeEventDetails",
        "health:describeEvents",
        "health:describeEventTypes",
        "iam:getAccessKeyLastUsed",
        "iam:getAccountAuthorizationDetails",
        "iam:getAccountPasswordPolicy",
        "iam:getAccountSummary",
        "iam:getContextKeysForCustomPolicy",
        "iam:getContextKeysForPrincipalPolicy",
        "iam:getCredentialReport",
        "iam:getGroup",
        "iam:getGroupPolicy",
        "iam:getInstanceProfile",
        "iam:getLoginProfile",
        "iam:getOpenIDConnectProvider",
        "iam:getPolicy",
        "iam:getPolicyVersion",
        "iam:getRole",
        "iam:getRolePolicy",
        "iam:getSAMLProvider",
        "iam:getServerCertificate",
        "iam:getSSHPublicKey",
        "iam:getUser",
        "iam:getUserPolicy",
        "iam:listAccessKeys",
        "iam:listAccountAliases",
        "iam:listAttachedGroupPolicies",
        "iam:listAttachedRolePolicies",
        "iam:listAttachedUserPolicies",
        "iam:listEntitiesForPolicy",
        "iam:listGroupPolicies",
        "iam:listGroups",
        "iam:listGroupsForUser",
        "iam:listInstanceProfiles",
        "iam:listInstanceProfilesForRole",
        "iam:listMFADevices",
        "iam:listOpenIDConnectProviders",
        "iam:listPolicies",
        "iam:listPolicyVersions",
        "iam:listRolePolicies",
        "iam:listRoles",
        "iam:listSAMLProviders",
        "iam:listServerCertificates",
        "iam:listSigningCertificates",
        "iam:listSSHPublicKeys",
        "iam:listUserPolicies",
        "iam:listUsers",
        "iam:listVirtualMFADevices",
        "iam:simulateCustomPolicy",
        "iam:simulatePrincipalPolicy",
        "importexport:getStatus",
        "importexport:listJobs",
        "inspector:describeAssessmentRuns",
        "inspector:describeAssessmentTargets",
        "inspector:describeAssessmentTemplates",
        "inspector:describeCrossAccountAccessRole",
        "inspector:describeResourceGroups",
        "inspector:describeRulesPackages",
        "inspector:getTelemetryMetadata",
        "inspector:listAssessmentRunAgents",
        "inspector:listAssessmentRuns",
        "inspector:listAssessmentTargets",
        "inspector:listAssessmentTemplates",
        "inspector:listEventSubscriptions",
        "inspector:listRulesPackages",
        "inspector:listTagsForResource",
        "iot:describeAuthorizer",
        "iot:describeCACertificate",
        "iot:describeCertificate",
        "iot:describeDefaultAuthorizer",
        "iot:describeEndpoint",
        "iot:describeIndex",
        "iot:describeJobExecution",
        "iot:describeThing",
        "iot:describeThingGroup",
        "iot:getEffectivePolicies",
        "iot:getIndexingConfiguration",
        "iot:getLoggingOptions",
        "iot:getPolicy",
        "iot:getPolicyVersion",
        "iot:getTopicRule",
        "iot:getV2LoggingOptions",
        "iot:listAttachedPolicies",
        "iot:listAuthorizers",
        "iot:listCACertificates",
        "iot:listCertificates",
        "iot:listCertificatesByCA",
        "iot:listJobExecutionsForJob",
        "iot:listJobExecutionsForThing",
        "iot:listJobs",
        "iot:listOutgoingCertificates",
        "iot:listPolicies",
        "iot:listPolicyPrincipals",
        "iot:listPolicyVersions",
        "iot:listPrincipalPolicies",
        "iot:listPrincipalThings",
        "iot:listRoleAliases",
        "iot:listTargetsForPolicy",
        "iot:listThingGroups",
        "iot:listThingGroupsForThing",
        "iot:listThingPrincipals",
        "iot:listThingRegistrationTasks",
        "iot:listThings",
        "iot:listThingTypes",
        "iot:listTopicRules",
        "iot:listV2LoggingLevels",
        "iotevents:describeDetector",
        "iotevents:describeDetectorModel",
        "iotevents:describeInput",
        "iotevents:describeLoggingOptions",
        "iotevents:listDetectorModels",
        "iotevents:listDetectorModelVersions",
        "iotevents:listDetectors",
        "iotevents:listInputs",
        "kafka:describeCluster",
        "kafka:getBootstrapBrokers",
        "kafka:listClusters",
        "kafka:listNodes",
        "kinesis:describeStream",
        "kinesis:listStreams",
        "kinesis:listTagsForStream",
        "kinesisanalytics:describeApplication",
        "kinesisanalytics:listApplications",
        "kms:describeKey",
        "kms:getKeyPolicy",
        "kms:getKeyRotationStatus",
        "kms:listAliases",
        "kms:listGrants",
        "kms:listKeyPolicies",
        "kms:listKeys",
        "kms:listResourceTags",
        "kms:listRetirableGrants",
        "lambda:getAccountSettings",
        "lambda:getAlias",
        "lambda:getEventSourceMapping",
        "lambda:getFunction",
        "lambda:getFunctionConfiguration",
        "lambda:getPolicy",
        "lambda:listAliases",
        "lambda:listEventSourceMappings",
        "lambda:listFunctions",
        "lambda:listVersionsByFunction",
        "lex:getBot",
        "lex:getBotAlias",
        "lex:getBotAliases",
        "lex:getBotChannelAssociation",
        "lex:getBotChannelAssociations",
        "lex:getBots",
        "lex:getBotVersions",
        "lex:getBuiltinIntent",
        "lex:getBuiltinIntents",
        "lex:getBuiltinSlotTypes",
        "lex:getIntent",
        "lex:getIntents",
        "lex:getIntentVersions",
        "lex:getSlotType",
        "lex:getSlotTypes",
        "lex:getSlotTypeVersions",
        "lightsail:getActiveNames",
        "lightsail:getBlueprints",
        "lightsail:getBundles",
        "lightsail:getDomain",
        "lightsail:getDomains",
        "lightsail:getInstance",
        "lightsail:getInstanceAccessDetails",
        "lightsail:getInstanceMetricData",
        "lightsail:getInstancePortStates",
        "lightsail:getInstances",
        "lightsail:getInstanceSnapshot",
        "lightsail:getInstanceSnapshots",
        "lightsail:getInstanceState",
        "lightsail:getKeyPair",
        "lightsail:getKeyPairs",
        "lightsail:getOperation",
        "lightsail:getOperations",
        "lightsail:getOperationsForResource",
        "lightsail:getRegions",
        "lightsail:getStaticIp",
        "lightsail:getStaticIps",
        "logs:describeDestinations",
        "logs:describeExportTasks",
        "logs:describeLogGroups",
        "logs:describeLogStreams",
        "logs:describeMetricFilters",
        "logs:describeQueries",
        "logs:describeSubscriptionFilters",
        "logs:testMetricFilter",
        "machinelearning:describeBatchPredictions",
        "machinelearning:describeDataSources",
        "machinelearning:describeEvaluations",
        "machinelearning:describeMLModels",
        "machinelearning:getBatchPrediction",
        "machinelearning:getDataSource",
        "machinelearning:getEvaluation",
        "machinelearning:getMLModel",
        "managedblockchain:getMember",
        "managedblockchain:getNetwork",
        "managedblockchain:getNode",
        "managedblockchain:listMembers",
        "managedblockchain:listNetworks",
        "managedblockchain:listNodes",
        "mediaconvert:describeEndpoints",
        "mediaconvert:getJob",
        "mediaconvert:getJobTemplate",
        "mediaconvert:getPreset",
        "mediaconvert:getQueue",
        "mediaconvert:listJobs",
        "mediaconvert:listJobTemplates",
        "medialive:describeChannel",
        "medialive:describeInput",
        "medialive:describeInputSecurityGroup",
        "medialive:describeOffering",
        "medialive:describeReservation",
        "medialive:describeSchedule",
        "medialive:listChannels",
        "medialive:listInputs",
        "medialive:listInputSecurityGroups",
        "medialive:listOfferings",
        "medialive:listReservations",
        "mediapackage:describeChannel",
        "mediapackage:describeOriginEndpoint",
        "mediapackage:listChannels",
        "mediapackage:listOriginEndpoints",
        "mediastore:describeContainer",
        "mediastore:describeObject",
        "mediastore:getContainerPolicy",
        "mediastore:listContainers",
        "mediastore:listItems",
        "mediatailor:getPlaybackConfiguration",
        "mediatailor:listPlaybackConfigurations",
        "mobiletargeting:getAdmChannel",
        "mobiletargeting:getApnsChannel",
        "mobiletargeting:getApnsSandboxChannel",
        "mobiletargeting:getApnsVoipChannel",
        "mobiletargeting:getApnsVoipSandboxChannel",
        "mobiletargeting:getApp",
        "mobiletargeting:getApplicationSettings",
        "mobiletargeting:getApps",
        "mobiletargeting:getBaiduChannel",
        "mobiletargeting:getCampaign",
        "mobiletargeting:getCampaignActivities",
        "mobiletargeting:getCampaigns",
        "mobiletargeting:getCampaignVersion",
        "mobiletargeting:getCampaignVersions",
        "mobiletargeting:getEmailChannel",
        "mobiletargeting:getEndpoint",
        "mobiletargeting:getEventStream",
        "mobiletargeting:getExportJob",
        "mobiletargeting:getExportJobs",
        "mobiletargeting:getGcmChannel",
        "mobiletargeting:getImportJob",
        "mobiletargeting:getImportJobs",
        "mobiletargeting:getSegment",
        "mobiletargeting:getSegmentImportJobs",
        "mobiletargeting:getSegments",
        "mobiletargeting:getSegmentVersion",
        "mobiletargeting:getSegmentVersions",
        "mobiletargeting:getSmsChannel",
        "mq:describeBroker",
        "mq:describeConfiguration",
        "mq:describeConfigurationRevision",
        "mq:describeUser",
        "mq:listBrokers",
        "mq:listConfigurationRevisions",
        "mq:listConfigurations",
        "mq:listUsers",
        "opsworks-cm:describeAccountAttributes",
        "opsworks-cm:describeBackups",
        "opsworks-cm:describeEvents",
        "opsworks-cm:describeNodeAssociationStatus",
        "opsworks-cm:describeServers",
        "opsworks:describeAgentVersions",
        "opsworks:describeApps",
        "opsworks:describeCommands",
        "opsworks:describeDeployments",
        "opsworks:describeEcsClusters",
        "opsworks:describeElasticIps",
        "opsworks:describeElasticLoadBalancers",
        "opsworks:describeInstances",
        "opsworks:describeLayers",
        "opsworks:describeLoadBasedAutoScaling",
        "opsworks:describeMyUserProfile",
        "opsworks:describePermissions",
        "opsworks:describeRaidArrays",
        "opsworks:describeRdsDbInstances",
        "opsworks:describeServiceErrors",
        "opsworks:describeStackProvisioningParameters",
        "opsworks:describeStacks",
        "opsworks:describeStackSummary",
        "opsworks:describeTimeBasedAutoScaling",
        "opsworks:describeUserProfiles",
        "opsworks:describeVolumes",
        "opsworks:getHostnameSuggestion",
        "polly:describeVoices",
        "polly:getLexicon",
        "polly:listLexicons",
        "pricing:describeServices",
        "pricing:getAttributeValues",
        "pricing:getProducts",
        "rds:describeAccountAttributes",
        "rds:describeCertificates",
        "rds:describeDBClusterParameterGroups",
        "rds:describeDBClusterParameters",
        "rds:describeDBClusters",
        "rds:describeDBClusterSnapshots",
        "rds:describeDBEngineVersions",
        "rds:describeDBInstances",
        "rds:describeDBParameterGroups",
        "rds:describeDBParameters",
        "rds:describeDBSecurityGroups",
        "rds:describeDBSnapshotAttributes",
        "rds:describeDBSnapshots",
        "rds:describeDBSubnetGroups",
        "rds:describeEngineDefaultClusterParameters",
        "rds:describeEngineDefaultParameters",
        "rds:describeEventCategories",
        "rds:describeEvents",
        "rds:describeEventSubscriptions",
        "rds:describeOptionGroupOptions",
        "rds:describeOptionGroups",
        "rds:describeOrderableDBInstanceOptions",
        "rds:describePendingMaintenanceActions",
        "rds:describeReservedDBInstances",
        "rds:describeReservedDBInstancesOfferings",
        "rds:listTagsForResource",
        "redshift:describeClusterParameterGroups",
        "redshift:describeClusterParameters",
        "redshift:describeClusters",
        "redshift:describeClusterSecurityGroups",
        "redshift:describeClusterSnapshots",
        "redshift:describeClusterSubnetGroups",
        "redshift:describeClusterVersions",
        "redshift:describeDefaultClusterParameters",
        "redshift:describeEventCategories",
        "redshift:describeEvents",
        "redshift:describeEventSubscriptions",
        "redshift:describeHsmClientCertificates",
        "redshift:describeHsmConfigurations",
        "redshift:describeLoggingStatus",
        "redshift:describeOrderableClusterOptions",
        "redshift:describeReservedNodeOfferings",
        "redshift:describeReservedNodes",
        "redshift:describeResize",
        "redshift:describeSnapshotCopyGrants",
        "redshift:describeTableRestoreStatus",
        "redshift:describeTags",
        "rekognition:listCollections",
        "rekognition:listFaces",
        "robomaker:batchDescribeSimulationJob",
        "robomaker:describeDeploymentJob",
        "robomaker:describeFleet",
        "robomaker:describeRobot",
        "robomaker:describeRobotApplication",
        "robomaker:describeSimulationApplication",
        "robomaker:describeSimulationJob",
        "robomaker:listDeploymentJobs",
        "robomaker:listFleets",
        "robomaker:listRobotApplications",
        "robomaker:listRobots",
        "robomaker:listSimulationApplications",
        "robomaker:listSimulationJobs",
        "route53:getChange",
        "route53:getCheckerIpRanges",
        "route53:getGeoLocation",
        "route53:getHealthCheck",
        "route53:getHealthCheckCount",
        "route53:getHealthCheckLastFailureReason",
        "route53:getHealthCheckStatus",
        "route53:getHostedZone",
        "route53:getHostedZoneCount",
        "route53:getReusableDelegationSet",
        "route53:getTrafficPolicy",
        "route53:getTrafficPolicyInstance",
        "route53:getTrafficPolicyInstanceCount",
        "route53:listGeoLocations",
        "route53:listHealthChecks",
        "route53:listHostedZones",
        "route53:listHostedZonesByName",
        "route53:listResourceRecordSets",
        "route53:listReusableDelegationSets",
        "route53:listTagsForResource",
        "route53:listTagsForResources",
        "route53:listTrafficPolicies",
        "route53:listTrafficPolicyInstances",
        "route53:listTrafficPolicyInstancesByHostedZone",
        "route53:listTrafficPolicyInstancesByPolicy",
        "route53:listTrafficPolicyVersions",
        "route53domains:checkDomainAvailability",
        "route53domains:getContactReachabilityStatus",
        "route53domains:getDomainDetail",
        "route53domains:getOperationDetail",
        "route53domains:listDomains",
        "route53domains:listOperations",
        "route53domains:listTagsForDomain",
        "route53domains:viewBilling",
        "route53resolver:getResolverRulePolicy",
        "route53resolver:listResolverEndpointIpAddresses",
        "route53resolver:listResolverEndpoints",
        "route53resolver:listResolverRuleAssociations",
        "route53resolver:listResolverRules",
        "route53resolver:listTagsForResource",
        "s3:getAccelerateConfiguration",
        "s3:getAnalyticsConfiguration",
        "s3:getBucketAcl",
        "s3:getBucketCORS",
        "s3:getBucketLocation",
        "s3:getBucketLogging",
        "s3:getBucketNotification",
        "s3:getBucketPolicy",
        "s3:getBucketRequestPayment",
        "s3:getBucketTagging",
        "s3:getBucketVersioning",
        "s3:getBucketWebsite",
        "s3:getEncryptionConfiguration",
        "s3:getInventoryConfiguration",
        "s3:getLifecycleConfiguration",
        "s3:getMetricsConfiguration",
        "s3:getReplicationConfiguration",
        "s3:headBucket",
        "s3:listAllMyBuckets",
        "s3:listBucketMultipartUploads",
        "sagemaker:describeAlgorithm",
        "sagemaker:describeCompilationJob",
        "sagemaker:describeEndpoint",
        "sagemaker:describeEndpointConfig",
        "sagemaker:describeHyperParameterTuningJob",
        "sagemaker:describeLabelingJob",
        "sagemaker:describeModel",
        "sagemaker:describeModelPackage",
        "sagemaker:describeNotebookInstance",
        "sagemaker:describeNotebookInstanceLifecycleConfig",
        "sagemaker:describeTrainingJob",
        "sagemaker:describeTransformJob",
        "sagemaker:describeWorkteam",
        "sagemaker:listAlgorithms",
        "sagemaker:listCompilationJobs",
        "sagemaker:listEndpointConfigs",
        "sagemaker:listEndpoints",
        "sagemaker:listHyperParameterTuningJobs",
        "sagemaker:listLabelingJobs",
        "sagemaker:listLabelingJobsForWorkteam",
        "sagemaker:listModelPackages",
        "sagemaker:listModels",
        "sagemaker:listNotebookInstanceLifecycleConfigs",
        "sagemaker:listNotebookInstances",
        "sagemaker:listTags",
        "sagemaker:listTrainingJobs",
        "sagemaker:listTrainingJobsForHyperParameterTuningJob",
        "sagemaker:listTransformJobs",
        "sagemaker:listWorkteams",
        "sdb:domainMetadata",
        "sdb:listDomains",
        "secretsmanager:describeSecret",
        "secretsmanager:getResourcePolicy",
        "secretsmanager:listSecrets",
        "secretsmanager:listSecretVersionIds",
        "servicecatalog:describeConstraint",
        "servicecatalog:describePortfolio",
        "servicecatalog:describeProduct",
        "servicecatalog:describeProductAsAdmin",
        "servicecatalog:describeProductView",
        "servicecatalog:describeProvisioningArtifact",
        "servicecatalog:describeProvisioningParameters",
        "servicecatalog:describeRecord",
        "servicecatalog:listAcceptedPortfolioShares",
        "servicecatalog:listConstraintsForPortfolio",
        "servicecatalog:listLaunchPaths",
        "servicecatalog:listPortfolioAccess",
        "servicecatalog:listPortfolios",
        "servicecatalog:listPortfoliosForProduct",
        "servicecatalog:listPrincipalsForPortfolio",
        "servicecatalog:listProvisioningArtifacts",
        "servicecatalog:listRecordHistory",
        "servicecatalog:scanProvisionedProducts",
        "servicecatalog:searchProducts",
        "ses:describeActiveReceiptRuleSet",
        "ses:describeReceiptRule",
        "ses:describeReceiptRuleSet",
        "ses:getIdentityDkimAttributes",
        "ses:getIdentityMailFromDomainAttributes",
        "ses:getIdentityNotificationAttributes",
        "ses:getIdentityPolicies",
        "ses:getIdentityVerificationAttributes",
        "ses:getSendQuota",
        "ses:getSendStatistics",
        "ses:listIdentities",
        "ses:listIdentityPolicies",
        "ses:listReceiptFilters",
        "ses:listReceiptRuleSets",
        "ses:listVerifiedEmailAddresses",
        "shield:describeAttack",
        "shield:describeProtection",
        "shield:describeSubscription",
        "shield:listAttacks",
        "shield:listProtections",
        "sms:getConnectors",
        "sms:getReplicationJobs",
        "sms:getReplicationRuns",
        "sms:getServers",
        "snowball:describeAddress",
        "snowball:describeAddresses",
        "snowball:describeJob",
        "snowball:getSnowballUsage",
        "snowball:listJobs",
        "sns:checkIfPhoneNumberIsOptedOut",
        "sns:getEndpointAttributes",
        "sns:getPlatformApplicationAttributes",
        "sns:getSMSAttributes",
        "sns:getSubscriptionAttributes",
        "sns:getTopicAttributes",
        "sns:listEndpointsByPlatformApplication",
        "sns:listPhoneNumbersOptedOut",
        "sns:listPlatformApplications",
        "sns:listSubscriptions",
        "sns:listSubscriptionsByTopic",
        "sns:listTopics",
        "sqs:getQueueAttributes",
        "sqs:getQueueUrl",
        "sqs:listDeadLetterSourceQueues",
        "sqs:listQueues",
        "ssm:describeActivations",
        "ssm:describeAssociation",
        "ssm:describeAutomationExecutions",
        "ssm:describeAvailablePatches",
        "ssm:describeDocument",
        "ssm:describeDocumentPermission",
        "ssm:describeEffectiveInstanceAssociations",
        "ssm:describeEffectivePatchesForPatchBaseline",
        "ssm:describeInstanceAssociationsStatus",
        "ssm:describeInstanceInformation",
        "ssm:describeInstancePatches",
        "ssm:describeInstancePatchStates",
        "ssm:describeInstancePatchStatesForPatchGroup",
        "ssm:describeMaintenanceWindowExecutions",
        "ssm:describeMaintenanceWindowExecutionTaskInvocations",
        "ssm:describeMaintenanceWindowExecutionTasks",
        "ssm:describeMaintenanceWindows",
        "ssm:describeMaintenanceWindowTargets",
        "ssm:describeMaintenanceWindowTasks",
        "ssm:describeParameters",
        "ssm:describePatchBaselines",
        "ssm:describePatchGroups",
        "ssm:describePatchGroupState",
        "ssm:getAutomationExecution",
        "ssm:getCommandInvocation",
        "ssm:getDefaultPatchBaseline",
        "ssm:getDeployablePatchSnapshotForInstance",
        "ssm:getDocument",
        "ssm:getInventory",
        "ssm:getInventorySchema",
        "ssm:getMaintenanceWindow",
        "ssm:getMaintenanceWindowExecution",
        "ssm:getMaintenanceWindowExecutionTask",
        "ssm:getParameterHistory",
        "ssm:getParameters",
        "ssm:getPatchBaseline",
        "ssm:getPatchBaselineForPatchGroup",
        "ssm:listAssociations",
        "ssm:listCommandInvocations",
        "ssm:listCommands",
        "ssm:listDocuments",
        "ssm:listDocumentVersions",
        "ssm:listInventoryEntries",
        "ssm:listTagsForResource",
        "states:describeActivity",
        "states:describeExecution",
        "states:describeStateMachine",
        "states:getExecutionHistory",
        "states:listActivities",
        "states:listExecutions",
        "states:listStateMachines",
        "storagegateway:describeBandwidthRateLimit",
        "storagegateway:describeCache",
        "storagegateway:describeCachediSCSIVolumes",
        "storagegateway:describeGatewayInformation",
        "storagegateway:describeMaintenanceStartTime",
        "storagegateway:describeNFSFileShares",
        "storagegateway:describeSMBFileShares",
        "storagegateway:describeSMBSettings",
        "storagegateway:describeSnapshotSchedule",
        "storagegateway:describeStorediSCSIVolumes",
        "storagegateway:describeTapeArchives",
        "storagegateway:describeTapeRecoveryPoints",
        "storagegateway:describeTapes",
        "storagegateway:describeUploadBuffer",
        "storagegateway:describeVTLDevices",
        "storagegateway:describeWorkingStorage",
        "storagegateway:listFileShares",
        "storagegateway:listGateways",
        "storagegateway:listLocalDisks",
        "storagegateway:listTagsForResource",
        "storagegateway:listTapes",
        "storagegateway:listVolumeInitiators",
        "storagegateway:listVolumeRecoveryPoints",
        "storagegateway:listVolumes",
        "swf:countClosedWorkflowExecutions",
        "swf:countOpenWorkflowExecutions",
        "swf:countPendingActivityTasks",
        "swf:countPendingDecisionTasks",
        "swf:describeActivityType",
        "swf:describeDomain",
        "swf:describeWorkflowExecution",
        "swf:describeWorkflowType",
        "swf:getWorkflowExecutionHistory",
        "swf:listActivityTypes",
        "swf:listClosedWorkflowExecutions",
        "swf:listDomains",
        "swf:listOpenWorkflowExecutions",
        "swf:listWorkflowTypes",
        "transfer:describeServer",
        "transfer:describeUser",
        "transfer:listServers",
        "transfer:listTagsForResource",
        "transfer:listUsers",
        "waf-regional:getByteMatchSet",
        "waf-regional:getChangeTokenStatus",
        "waf-regional:getIPSet",
        "waf-regional:getRule",
        "waf-regional:getSqlInjectionMatchSet",
        "waf-regional:getWebACL",
        "waf-regional:getWebACLForResource",
        "waf-regional:listByteMatchSets",
        "waf-regional:listIPSets",
        "waf-regional:listResourcesForWebACL",
        "waf-regional:listRules",
        "waf-regional:listSqlInjectionMatchSets",
        "waf-regional:listWebACLs",
        "waf:getByteMatchSet",
        "waf:getChangeTokenStatus",
        "waf:getIPSet",
        "waf:getRule",
        "waf:getSampledRequests",
        "waf:getSizeConstraintSet",
        "waf:getSqlInjectionMatchSet",
        "waf:getWebACL",
        "waf:getXssMatchSet",
        "waf:listByteMatchSets",
        "waf:listIPSets",
        "waf:listRules",
        "waf:listSizeConstraintSets",
        "waf:listSqlInjectionMatchSets",
        "waf:listWebACLs",
        "waf:listXssMatchSets",
        "workdocs:checkAlias",
        "workdocs:describeAvailableDirectories",
        "workdocs:describeInstances",
        "workmail:describeGroup",
        "workmail:describeOrganization",
        "workmail:describeResource",
        "workmail:describeUser",
        "workmail:listAliases",
        "workmail:listGroupMembers",
        "workmail:listGroups",
        "workmail:listMailboxPermissions",
        "workmail:listOrganizations",
        "workmail:listResourceDelegates",
        "workmail:listResources",
        "workmail:listUsers",
        "workspaces:describeTags",
        "workspaces:describeWorkspaceBundles",
        "workspaces:describeWorkspaceDirectories",
        "workspaces:describeWorkspaces",
        "workspaces:describeWorkspacesConnectionStatus"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "apigateway:GET"
    ],
    "Resource": [
      "arn:aws:apigateway:*::/account",
      "arn:aws:apigateway:*::/clientcertificates",
      "arn:aws:apigateway:*::/clientcertificates/*",
      "arn:aws:apigateway:*::/domainnames",
      "arn:aws:apigateway:*::/domainnames/*",
      "arn:aws:apigateway:*::/domainnames/*/basepathmappings",
      "arn:aws:apigateway:*::/domainnames/*/basepathmappings/*",
      "arn:aws:apigateway:*::/restapis",
      "arn:aws:apigateway:*::/restapis/*",
      "arn:aws:apigateway:*::/restapis/*/authorizers",
      "arn:aws:apigateway:*::/restapis/*/authorizers/*",
      "arn:aws:apigateway:*::/restapis/*/deployments",
      "arn:aws:apigateway:*::/restapis/*/deployments/*",
      "arn:aws:apigateway:*::/restapis/*/models",
      "arn:aws:apigateway:*::/restapis/*/models/*",
      "arn:aws:apigateway:*::/restapis/*/models/*/default_template",
      "arn:aws:apigateway:*::/restapis/*/resources",
      "arn:aws:apigateway:*::/restapis/*/resources/*",
      "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
      "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
      "arn:aws:apigateway:*::/restapis/*/stages/*/sdks/*",
      "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
      "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
      "arn:aws:apigateway:*::/restapis/*/stages",
      "arn:aws:apigateway:*::/restapis/*/stages/*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "iam:DeleteRole"
    ],
    "Resource": [
      "arn:aws:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "a4b:getDevice",
      "a4b:getProfile",
      "a4b:getRoom",
      "a4b:getRoomSkillParameter",
      "a4b:getSkillGroup",
      "a4b:searchDevices",
      "a4b:searchProfiles",
      "a4b:searchRooms",
      "a4b:searchSkillGroups",
      "acm-pca:describeCertificateAuthority",
      "acm-pca:describeCertificateAuthorityAuditReport",
      "acm-pca:getCertificate",
      "acm-pca:getCertificateAuthorityCertificate",
      "acm-pca:getCertificateAuthorityCsr",
      "acm-pca:listCertificateAuthorities",
      "acm-pca:listTags",
      "acm:describeCertificate",
      "acm:getCertificate",
      "acm:listCertificates",
      "acm:listTagsForCertificate",
      "application-autoscaling:describeScalableTargets",
      "application-autoscaling:describeScalingActivities",
      "application-autoscaling:describeScalingPolicies",
      "appstream:describeDirectoryConfigs",
      "appstream:describeFleets",
      "appstream:describeImageBuilders",
      "appstream:describeImages",
      "appstream:describeSessions",
      "appstream:describeStacks",
      "appstream:listAssociatedFleets",
      "appstream:listAssociatedStacks",
      "appstream:listTagsForResource",
      "appsync:getFunction",
      "appsync:getGraphqlApi",
      "appsync:getIntrospectionSchema",
      "appsync:getResolver",
      "appsync:getSchemaCreationStatus",
      "appsync:getType",
      "appsync:listDataSources",
      "appsync:listFunctions",
      "appsync:listGraphqlApis",
      "appsync:listResolvers",
      "appsync:listTypes",
      "athena:batchGetNamedQuery",
      "athena:batchGetQueryExecution",
      "athena:getNamedQuery",
      "athena:getQueryExecution",
      "athena:listNamedQueries",
      "athena:listQueryExecutions",
      "autoscaling-plans:describeScalingPlanResources",
      "autoscaling-plans:describeScalingPlans",
      "autoscaling-plans:getScalingPlanResourceForecastData",
      "autoscaling:describeAccountLimits",
      "autoscaling:describeAdjustmentTypes",
      "autoscaling:describeAutoScalingGroups",
      "autoscaling:describeAutoScalingInstances",
      "autoscaling:describeAutoScalingNotificationTypes",
      "autoscaling:describeLaunchConfigurations",
      "autoscaling:describeLifecycleHooks",
      "autoscaling:describeLifecycleHookTypes",
      "autoscaling:describeLoadBalancers",
      "autoscaling:describeLoadBalancerTargetGroups",
      "autoscaling:describeMetricCollectionTypes",
      "autoscaling:describeNotificationConfigurations",
      "autoscaling:describePolicies",
      "autoscaling:describeScalingActivities",
      "autoscaling:describeScalingProcessTypes",
      "autoscaling:describeScheduledActions",
      "autoscaling:describeTags",
      "autoscaling:describeTerminationPolicyTypes",
      "backup:describeBackupJob",
      "backup:describeBackupVault",
      "backup:describeProtectedResource",
      "backup:describeRecoveryPoint",
      "backup:describeRestoreJob",
      "backup:getBackupPlan",
      "backup:getBackupPlanFromJSON",
      "backup:getBackupPlanFromTemplate",
      "backup:getBackupSelection",
      "backup:getBackupVaultAccessPolicy",
      "backup:getBackupVaultNotifications",
      "backup:getRecoveryPointRestoreMetadata",
      "backup:getSupportedResourceTypes",
      "backup:listBackupJobs",
      "backup:listBackupPlans",
      "backup:listBackupPlanTemplates",
      "backup:listBackupPlanVersions",
      "backup:listBackupSelections",
      "backup:listBackupVaults",
      "backup:listProtectedResources",
      "backup:listRecoveryPointsByBackupVault",
      "backup:listRecoveryPointsByResource",
      "backup:listRestoreJobs",
      "backup:listTags",
      "batch:describeComputeEnvironments",
      "batch:describeJobDefinitions",
      "batch:describeJobQueues",
      "batch:describeJobs",
      "batch:listJobs",
      "budgets:describeBudget",
      "budgets:describeBudgets",
      "budgets:describeNotificationsForBudget",
      "budgets:describeSubscribersForNotification",
      "ce:getCostAndUsage",
      "ce:getDimensionValues",
      "ce:getReservationCoverage",
      "ce:getReservationUtilization",
      "ce:getTags",
      "cloud9:describeEnvironmentMemberships",
      "cloud9:describeEnvironments",
      "cloud9:listEnvironments",
      "clouddirectory:getDirectory",
      "clouddirectory:listDirectories",
      "cloudformation:describeAccountLimits",
      "cloudformation:describeChangeSet",
      "cloudformation:describeStackEvents",
      "cloudformation:describeStackInstance",
      "cloudformation:describeStackResource",
      "cloudformation:describeStackResources",
      "cloudformation:describeStacks",
      "cloudformation:describeStackSet",
      "cloudformation:describeStackSetOperation",
      "cloudformation:estimateTemplateCost",
      "cloudformation:getStackPolicy",
      "cloudformation:getTemplate",
      "cloudformation:getTemplateSummary",
      "cloudformation:listChangeSets",
      "cloudformation:listExports",
      "cloudformation:listImports",
      "cloudformation:listStackInstances",
      "cloudformation:listStackResources",
      "cloudformation:listStacks",
      "cloudformation:listStackSetOperationResults",
      "cloudformation:listStackSetOperations",
      "cloudformation:listStackSets",
      "cloudfront:getCloudFrontOriginAccessIdentity",
      "cloudfront:getCloudFrontOriginAccessIdentityConfig",
      "cloudfront:getDistribution",
      "cloudfront:getDistributionConfig",
      "cloudfront:getInvalidation",
      "cloudfront:getStreamingDistribution",
      "cloudfront:getStreamingDistributionConfig",
      "cloudfront:listCloudFrontOriginAccessIdentities",
      "cloudfront:listDistributions",
      "cloudfront:listDistributionsByWebACLId",
      "cloudfront:listInvalidations",
      "cloudfront:listStreamingDistributions",
      "cloudhsm:describeBackups",
      "cloudhsm:describeClusters",
      "cloudsearch:describeAnalysisSchemes",
      "cloudsearch:describeAvailabilityOptions",
      "cloudsearch:describeDomains",
      "cloudsearch:describeExpressions",
      "cloudsearch:describeIndexFields",
      "cloudsearch:describeScalingParameters",
      "cloudsearch:describeServiceAccessPolicies",
      "cloudsearch:describeSuggesters",
      "cloudsearch:listDomainNames",
      "cloudtrail:describeTrails",
      "cloudtrail:getEventSelectors",
      "cloudtrail:getTrailStatus",
      "cloudtrail:listPublicKeys",
      "cloudtrail:listTags",
      "cloudtrail:lookupEvents",
      "cloudwatch:describeAlarmHistory",
      "cloudwatch:describeAlarms",
      "cloudwatch:describeAlarmsForMetric",
      "cloudwatch:getDashboard",
      "cloudwatch:getMetricData",
      "cloudwatch:getMetricStatistics",
      "cloudwatch:listDashboards",
      "cloudwatch:listMetrics",
      "codebuild:batchGetBuilds",
      "codebuild:batchGetProjects",
      "codebuild:listBuilds",
      "codebuild:listBuildsForProject",
      "codebuild:listCuratedEnvironmentImages",
      "codebuild:listProjects",
      "codebuild:listSourceCredentials",
      "codecommit:batchGetRepositories",
      "codecommit:getBranch",
      "codecommit:getRepository",
      "codecommit:getRepositoryTriggers",
      "codecommit:listBranches",
      "codecommit:listRepositories",
      "codedeploy:batchGetApplications",
      "codedeploy:batchGetDeployments",
      "codedeploy:batchGetOnPremisesInstances",
      "codedeploy:getApplication",
      "codedeploy:getApplicationRevision",
      "codedeploy:getDeployment",
      "codedeploy:getDeploymentConfig",
      "codedeploy:getDeploymentGroup",
      "codedeploy:getDeploymentInstance",
      "codedeploy:getOnPremisesInstance",
      "codedeploy:listApplicationRevisions",
      "codedeploy:listApplications",
      "codedeploy:listDeploymentConfigs",
      "codedeploy:listDeploymentGroups",
      "codedeploy:listDeploymentInstances",
      "codedeploy:listDeployments",
      "codedeploy:listOnPremisesInstances",
      "codepipeline:getJobDetails",
      "codepipeline:getPipeline",
      "codepipeline:getPipelineExecution",
      "codepipeline:getPipelineState",
      "codepipeline:listActionTypes",
      "codepipeline:listPipelines",
      "codestar:describeProject",
      "codestar:listProjects",
      "codestar:listResources",
      "codestar:listTeamMembers",
      "codestar:listUserProfiles",
      "cognito-identity:describeIdentityPool",
      "cognito-identity:getIdentityPoolRoles",
      "cognito-identity:listIdentities",
      "cognito-identity:listIdentityPools",
      "cognito-idp:adminGetUser",
      "cognito-idp:describeIdentityProvider",
      "cognito-idp:describeResourceServer",
      "cognito-idp:describeRiskConfiguration",
      "cognito-idp:describeUserImportJob",
      "cognito-idp:describeUserPool",
      "cognito-idp:describeUserPoolClient",
      "cognito-idp:describeUserPoolDomain",
      "cognito-idp:getGroup",
      "cognito-idp:getUICustomization",
      "cognito-idp:getUser",
      "cognito-idp:getUserPoolMfaConfig",
      "cognito-idp:listGroups",
      "cognito-idp:listIdentityProviders",
      "cognito-idp:listResourceServers",
      "cognito-idp:listUserImportJobs",
      "cognito-idp:listUserPoolClients",
      "cognito-idp:listUserPools",
      "cognito-sync:describeDataset",
      "cognito-sync:describeIdentityPoolUsage",
      "cognito-sync:describeIdentityUsage",
      "cognito-sync:getCognitoEvents",
      "cognito-sync:getIdentityPoolConfiguration",
      "cognito-sync:listDatasets",
      "cognito-sync:listIdentityPoolUsage",
      "config:describeConfigRuleEvaluationStatus",
      "config:describeConfigRules",
      "config:describeConfigurationRecorders",
      "config:describeConfigurationRecorderStatus",
      "config:describeDeliveryChannels",
      "config:describeDeliveryChannelStatus",
      "config:getResourceConfigHistory",
      "config:listDiscoveredResources",
      "datapipeline:describeObjects",
      "datapipeline:describePipelines",
      "datapipeline:getPipelineDefinition",
      "datapipeline:listPipelines",
      "datapipeline:queryObjects",
      "datasync:describeAgent",
      "datasync:describeLocationEfs",
      "datasync:describeLocationNfs",
      "datasync:describeLocationS3",
      "datasync:describeTask",
      "datasync:describeTaskExecution",
      "datasync:listAgents",
      "datasync:listLocations",
      "datasync:listTaskExecutions",
      "datasync:listTasks",
      "dax:describeClusters",
      "dax:describeDefaultParameters",
      "dax:describeEvents",
      "dax:describeParameterGroups",
      "dax:describeParameters",
      "dax:describeSubnetGroups",
      "devicefarm:getAccountSettings",
      "devicefarm:getDevice",
      "devicefarm:getDevicePool",
      "devicefarm:getDevicePoolCompatibility",
      "devicefarm:getJob",
      "devicefarm:getProject",
      "devicefarm:getRemoteAccessSession",
      "devicefarm:getRun",
      "devicefarm:getSuite",
      "devicefarm:getTest",
      "devicefarm:getUpload",
      "devicefarm:listArtifacts",
      "devicefarm:listDevicePools",
      "devicefarm:listDevices",
      "devicefarm:listJobs",
      "devicefarm:listProjects",
      "devicefarm:listRemoteAccessSessions",
      "devicefarm:listRuns",
      "devicefarm:listSamples",
      "devicefarm:listSuites",
      "devicefarm:listTests",
      "devicefarm:listUniqueProblems",
      "devicefarm:listUploads",
      "directconnect:describeConnections",
      "directconnect:describeConnectionsOnInterconnect",
      "directconnect:describeInterconnects",
      "directconnect:describeLocations",
      "directconnect:describeVirtualGateways",
      "directconnect:describeVirtualInterfaces",
      "dlm:getLifecyclePolicies",
      "dlm:getLifecyclePolicy",
      "dms:describeAccountAttributes",
      "dms:describeConnections",
      "dms:describeEndpoints",
      "dms:describeEndpointTypes",
      "dms:describeOrderableReplicationInstances",
      "dms:describeRefreshSchemasStatus",
      "dms:describeReplicationInstances",
      "dms:describeReplicationSubnetGroups",
      "ds:describeConditionalForwarders",
      "ds:describeDirectories",
      "ds:describeEventTopics",
      "ds:describeSnapshots",
      "ds:describeTrusts",
      "ds:getDirectoryLimits",
      "ds:getSnapshotLimits",
      "ds:listIpRoutes",
      "ds:listSchemaExtensions",
      "ds:listTagsForResource",
      "dynamodb:describeBackup",
      "dynamodb:describeContinuousBackups",
      "dynamodb:describeGlobalTable",
      "dynamodb:describeLimits",
      "dynamodb:describeStream",
      "dynamodb:describeTable",
      "dynamodb:describeTimeToLive",
      "dynamodb:listBackups",
      "dynamodb:listGlobalTables",
      "dynamodb:listStreams",
      "dynamodb:listTables",
      "dynamodb:listTagsOfResource",
      "ec2:acceptReservedInstancesExchangeQuote",
      "ec2:cancelReservedInstancesListing",
      "ec2:createReservedInstancesListing",
      "ec2:describeAccountAttributes",
      "ec2:describeAddresses",
      "ec2:describeAvailabilityZones",
      "ec2:describeBundleTasks",
      "ec2:describeByoipCidrs",
      "ec2:describeClassicLinkInstances",
      "ec2:describeConversionTasks",
      "ec2:describeCustomerGateways",
      "ec2:describeDhcpOptions",
      "ec2:describeElasticGpus",
      "ec2:describeExportTasks",
      "ec2:describeFlowLogs",
      "ec2:describeHostReservationOfferings",
      "ec2:describeHostReservations",
      "ec2:describeHosts",
      "ec2:describeIdentityIdFormat",
      "ec2:describeIdFormat",
      "ec2:describeImageAttribute",
      "ec2:describeImages",
      "ec2:describeImportImageTasks",
      "ec2:describeImportSnapshotTasks",
      "ec2:describeInstanceAttribute",
      "ec2:describeInstances",
      "ec2:describeInstanceStatus",
      "ec2:describeInternetGateways",
      "ec2:describeKeyPairs",
      "ec2:describeLaunchTemplates",
      "ec2:describeLaunchTemplateVersions",
      "ec2:describeMovingAddresses",
      "ec2:describeNatGateways",
      "ec2:describeNetworkAcls",
      "ec2:describeNetworkInterfaceAttribute",
      "ec2:describeNetworkInterfaces",
      "ec2:describePlacementGroups",
      "ec2:describePrefixLists",
      "ec2:describePublicIpv4Pools",
      "ec2:describeRegions",
      "ec2:describeReservedInstances",
      "ec2:describeReservedInstancesListings",
      "ec2:describeReservedInstancesModifications",
      "ec2:describeReservedInstancesOfferings",
      "ec2:describeRouteTables",
      "ec2:describeScheduledInstances",
      "ec2:describeSecurityGroups",
      "ec2:describeSnapshotAttribute",
      "ec2:describeSnapshots",
      "ec2:describeSpotDatafeedSubscription",
      "ec2:describeSpotFleetInstances",
      "ec2:describeSpotFleetRequestHistory",
      "ec2:describeSpotFleetRequests",
      "ec2:describeSpotInstanceRequests",
      "ec2:describeSpotPriceHistory",
      "ec2:describeSubnets",
      "ec2:describeTags",
      "ec2:describeTransitGatewayAttachments",
      "ec2:describeTransitGatewayRouteTables",
      "ec2:describeTransitGateways",
      "ec2:describeTransitGatewayVpcAttachments",
      "ec2:describeVolumeAttribute",
      "ec2:describeVolumes",
      "ec2:describeVolumesModifications",
      "ec2:describeVolumeStatus",
      "ec2:describeVpcAttribute",
      "ec2:describeVpcClassicLink",
      "ec2:describeVpcClassicLinkDnsSupport",
      "ec2:describeVpcEndpointConnectionNotifications",
      "ec2:describeVpcEndpointConnections",
      "ec2:describeVpcEndpoints",
      "ec2:describeVpcEndpointServiceConfigurations",
      "ec2:describeVpcEndpointServicePermissions",
      "ec2:describeVpcEndpointServices",
      "ec2:describeVpcPeeringConnections",
      "ec2:describeVpcs",
      "ec2:describeVpnConnections",
      "ec2:describeVpnGateways",
      "ec2:getConsoleScreenshot",
      "ec2:getReservedInstancesExchangeQuote",
      "ec2:getTransitGatewayAttachmentPropagations",
      "ec2:getTransitGatewayRouteTableAssociations",
      "ec2:getTransitGatewayRouteTablePropagations",
      "ec2:modifyReservedInstances",
      "ec2:purchaseReservedInstancesOffering",
      "ecr:batchCheckLayerAvailability",
      "ecr:describeImages",
      "ecr:describeRepositories",
      "ecr:getRepositoryPolicy",
      "ecr:listImages",
      "ecs:describeClusters",
      "ecs:describeContainerInstances",
      "ecs:describeServices",
      "ecs:describeTaskDefinition",
      "ecs:describeTasks",
      "ecs:listClusters",
      "ecs:listContainerInstances",
      "ecs:listServices",
      "ecs:listTaskDefinitions",
      "ecs:listTasks",
      "eks:describeCluster",
      "eks:describeUpdate",
      "eks:listClusters",
      "eks:listUpdates",
      "elasticache:describeCacheClusters",
      "elasticache:describeCacheEngineVersions",
      "elasticache:describeCacheParameterGroups",
      "elasticache:describeCacheParameters",
      "elasticache:describeCacheSecurityGroups",
      "elasticache:describeCacheSubnetGroups",
      "elasticache:describeEngineDefaultParameters",
      "elasticache:describeEvents",
      "elasticache:describeReplicationGroups",
      "elasticache:describeReservedCacheNodes",
      "elasticache:describeReservedCacheNodesOfferings",
      "elasticache:describeSnapshots",
      "elasticache:listAllowedNodeTypeModifications",
      "elasticache:listTagsForResource",
      "elasticbeanstalk:checkDNSAvailability",
      "elasticbeanstalk:describeApplications",
      "elasticbeanstalk:describeApplicationVersions",
      "elasticbeanstalk:describeConfigurationOptions",
      "elasticbeanstalk:describeConfigurationSettings",
      "elasticbeanstalk:describeEnvironmentHealth",
      "elasticbeanstalk:describeEnvironmentManagedActionHistory",
      "elasticbeanstalk:describeEnvironmentManagedActions",
      "elasticbeanstalk:describeEnvironmentResources",
      "elasticbeanstalk:describeEnvironments",
      "elasticbeanstalk:describeEvents",
      "elasticbeanstalk:describeInstancesHealth",
      "elasticbeanstalk:describePlatformVersion",
      "elasticbeanstalk:listAvailableSolutionStacks",
      "elasticbeanstalk:listPlatformVersions",
      "elasticbeanstalk:validateConfigurationSettings",
      "elasticfilesystem:describeFileSystems",
      "elasticfilesystem:describeMountTargets",
      "elasticfilesystem:describeMountTargetSecurityGroups",
      "elasticfilesystem:describeTags",
      "elasticloadbalancing:describeInstanceHealth",
      "elasticloadbalancing:describeListenerCertificates",
      "elasticloadbalancing:describeListeners",
      "elasticloadbalancing:describeLoadBalancerAttributes",
      "elasticloadbalancing:describeLoadBalancerPolicies",
      "elasticloadbalancing:describeLoadBalancerPolicyTypes",
      "elasticloadbalancing:describeLoadBalancers",
      "elasticloadbalancing:describeRules",
      "elasticloadbalancing:describeSSLPolicies",
      "elasticloadbalancing:describeTags",
      "elasticloadbalancing:describeTargetGroupAttributes",
      "elasticloadbalancing:describeTargetGroups",
      "elasticloadbalancing:describeTargetHealth",
      "elasticmapreduce:describeCluster",
      "elasticmapreduce:describeSecurityConfiguration",
      "elasticmapreduce:describeStep",
      "elasticmapreduce:listBootstrapActions",
      "elasticmapreduce:listClusters",
      "elasticmapreduce:listInstanceGroups",
      "elasticmapreduce:listInstances",
      "elasticmapreduce:listSecurityConfigurations",
      "elasticmapreduce:listSteps",
      "elastictranscoder:listJobsByPipeline",
      "elastictranscoder:listJobsByStatus",
      "elastictranscoder:listPipelines",
      "elastictranscoder:listPresets",
      "elastictranscoder:readPipeline",
      "elastictranscoder:readPreset",
      "es:describeElasticsearchDomain",
      "es:describeElasticsearchDomainConfig",
      "es:describeElasticsearchDomains",
      "es:listDomainNames",
      "es:listTags",
      "events:describeEventBus",
      "events:describeRule",
      "events:listRuleNamesByTarget",
      "events:listRules",
      "events:listTargetsByRule",
      "events:testEventPattern",
      "firehose:describeDeliveryStream",
      "firehose:listDeliveryStreams",
      "fsx:describeBackups",
      "fsx:describeFileSystems",
      "fsx:listTagsForResource",
      "glacier:describeJob",
      "glacier:describeVault",
      "glacier:getDataRetrievalPolicy",
      "glacier:getVaultAccessPolicy",
      "glacier:getVaultLock",
      "glacier:getVaultNotifications",
      "glacier:listJobs",
      "glacier:listTagsForVault",
      "glacier:listVaults",
      "globalaccelerator:describeAccelerator",
      "globalaccelerator:describeAcceleratorAttributes",
      "globalaccelerator:describeEndpointGroup",
      "globalaccelerator:describeListener",
      "globalaccelerator:listAccelerators",
      "globalaccelerator:listEndpointGroups",
      "globalaccelerator:listListeners",
      "glue:batchGetPartition",
      "glue:getCatalogImportStatus",
      "glue:getClassifier",
      "glue:getClassifiers",
      "glue:getCrawler",
      "glue:getCrawlerMetrics",
      "glue:getCrawlers",
      "glue:getDatabase",
      "glue:getDatabases",
      "glue:getDataflowGraph",
      "glue:getDevEndpoint",
      "glue:getDevEndpoints",
      "glue:getJob",
      "glue:getJobRun",
      "glue:getJobRuns",
      "glue:getJobs",
      "glue:getMapping",
      "glue:getPartition",
      "glue:getPartitions",
      "glue:getTable",
      "glue:getTables",
      "glue:getTableVersions",
      "glue:getTrigger",
      "glue:getTriggers",
      "glue:getUserDefinedFunction",
      "glue:getUserDefinedFunctions",
      "greengrass:getConnectivityInfo",
      "greengrass:getCoreDefinition",
      "greengrass:getCoreDefinitionVersion",
      "greengrass:getDeploymentStatus",
      "greengrass:getDeviceDefinition",
      "greengrass:getDeviceDefinitionVersion",
      "greengrass:getFunctionDefinition",
      "greengrass:getFunctionDefinitionVersion",
      "greengrass:getGroup",
      "greengrass:getGroupCertificateAuthority",
      "greengrass:getGroupVersion",
      "greengrass:getLoggerDefinition",
      "greengrass:getLoggerDefinitionVersion",
      "greengrass:getResourceDefinitionVersion",
      "greengrass:getServiceRoleForAccount",
      "greengrass:getSubscriptionDefinition",
      "greengrass:getSubscriptionDefinitionVersion",
      "greengrass:listCoreDefinitions",
      "greengrass:listCoreDefinitionVersions",
      "greengrass:listDeployments",
      "greengrass:listDeviceDefinitions",
      "greengrass:listDeviceDefinitionVersions",
      "greengrass:listFunctionDefinitions",
      "greengrass:listFunctionDefinitionVersions",
      "greengrass:listGroups",
      "greengrass:listGroupVersions",
      "greengrass:listLoggerDefinitions",
      "greengrass:listLoggerDefinitionVersions",
      "greengrass:listResourceDefinitions",
      "greengrass:listResourceDefinitionVersions",
      "greengrass:listSubscriptionDefinitions",
      "greengrass:listSubscriptionDefinitionVersions",
      "guardduty:getDetector",
      "guardduty:getFindings",
      "guardduty:getFindingsStatistics",
      "guardduty:getInvitationsCount",
      "guardduty:getIPSet",
      "guardduty:getMasterAccount",
      "guardduty:getMembers",
      "guardduty:getThreatIntelSet",
      "guardduty:listDetectors",
      "guardduty:listFindings",
      "guardduty:listInvitations",
      "guardduty:listIPSets",
      "guardduty:listMembers",
      "guardduty:listThreatIntelSets",
      "health:describeAffectedEntities",
      "health:describeEntityAggregates",
      "health:describeEventAggregates",
      "health:describeEventDetails",
      "health:describeEvents",
      "health:describeEventTypes",
      "iam:getAccessKeyLastUsed",
      "iam:getAccountAuthorizationDetails",
      "iam:getAccountPasswordPolicy",
      "iam:getAccountSummary",
      "iam:getContextKeysForCustomPolicy",
      "iam:getContextKeysForPrincipalPolicy",
      "iam:getCredentialReport",
      "iam:getGroup",
      "iam:getGroupPolicy",
      "iam:getInstanceProfile",
      "iam:getLoginProfile",
      "iam:getOpenIDConnectProvider",
      "iam:getPolicy",
      "iam:getPolicyVersion",
      "iam:getRole",
      "iam:getRolePolicy",
      "iam:getSAMLProvider",
      "iam:getServerCertificate",
      "iam:getSSHPublicKey",
      "iam:getUser",
      "iam:getUserPolicy",
      "iam:listAccessKeys",
      "iam:listAccountAliases",
      "iam:listAttachedGroupPolicies",
      "iam:listAttachedRolePolicies",
      "iam:listAttachedUserPolicies",
      "iam:listEntitiesForPolicy",
      "iam:listGroupPolicies",
      "iam:listGroups",
      "iam:listGroupsForUser",
      "iam:listInstanceProfiles",
      "iam:listInstanceProfilesForRole",
      "iam:listMFADevices",
      "iam:listOpenIDConnectProviders",
      "iam:listPolicies",
      "iam:listPolicyVersions",
      "iam:listRolePolicies",
      "iam:listRoles",
      "iam:listSAMLProviders",
      "iam:listServerCertificates",
      "iam:listSigningCertificates",
      "iam:listSSHPublicKeys",
      "iam:listUserPolicies",
      "iam:listUsers",
      "iam:listVirtualMFADevices",
      "iam:simulateCustomPolicy",
      "iam:simulatePrincipalPolicy",
      "importexport:getStatus",
      "importexport:listJobs",
      "inspector:describeAssessmentRuns",
      "inspector:describeAssessmentTargets",
      "inspector:describeAssessmentTemplates",
      "inspector:describeCrossAccountAccessRole",
      "inspector:describeResourceGroups",
      "inspector:describeRulesPackages",
      "inspector:getTelemetryMetadata",
      "inspector:listAssessmentRunAgents",
      "inspector:listAssessmentRuns",
      "inspector:listAssessmentTargets",
      "inspector:listAssessmentTemplates",
      "inspector:listEventSubscriptions",
      "inspector:listRulesPackages",
      "inspector:listTagsForResource",
      "iot:describeAuthorizer",
      "iot:describeCACertificate",
      "iot:describeCertificate",
      "iot:describeDefaultAuthorizer",
      "iot:describeEndpoint",
      "iot:describeIndex",
      "iot:describeJobExecution",
      "iot:describeThing",
      "iot:describeThingGroup",
      "iot:getEffectivePolicies",
      "iot:getIndexingConfiguration",
      "iot:getLoggingOptions",
      "iot:getPolicy",
      "iot:getPolicyVersion",
      "iot:getTopicRule",
      "iot:getV2LoggingOptions",
      "iot:listAttachedPolicies",
      "iot:listAuthorizers",
      "iot:listCACertificates",
      "iot:listCertificates",
      "iot:listCertificatesByCA",
      "iot:listJobExecutionsForJob",
      "iot:listJobExecutionsForThing",
      "iot:listJobs",
      "iot:listOutgoingCertificates",
      "iot:listPolicies",
      "iot:listPolicyPrincipals",
      "iot:listPolicyVersions",
      "iot:listPrincipalPolicies",
      "iot:listPrincipalThings",
      "iot:listRoleAliases",
      "iot:listTargetsForPolicy",
      "iot:listThingGroups",
      "iot:listThingGroupsForThing",
      "iot:listThingPrincipals",
      "iot:listThingRegistrationTasks",
      "iot:listThings",
      "iot:listThingTypes",
      "iot:listTopicRules",
      "iot:listV2LoggingLevels",
      "iotevents:describeDetector",
      "iotevents:describeDetectorModel",
      "iotevents:describeInput",
      "iotevents:describeLoggingOptions",
      "iotevents:listDetectorModels",
      "iotevents:listDetectorModelVersions",
      "iotevents:listDetectors",
      "iotevents:listInputs",
      "kafka:describeCluster",
      "kafka:getBootstrapBrokers",
      "kafka:listClusters",
      "kafka:listNodes",
      "kinesis:describeStream",
      "kinesis:listStreams",
      "kinesis:listTagsForStream",
      "kinesisanalytics:describeApplication",
      "kinesisanalytics:listApplications",
      "kms:describeKey",
      "kms:getKeyPolicy",
      "kms:getKeyRotationStatus",
      "kms:listAliases",
      "kms:listGrants",
      "kms:listKeyPolicies",
      "kms:listKeys",
      "kms:listResourceTags",
      "kms:listRetirableGrants",
      "lambda:getAccountSettings",
      "lambda:getAlias",
      "lambda:getEventSourceMapping",
      "lambda:getFunction",
      "lambda:getFunctionConfiguration",
      "lambda:getPolicy",
      "lambda:listAliases",
      "lambda:listEventSourceMappings",
      "lambda:listFunctions",
      "lambda:listVersionsByFunction",
      "lex:getBot",
      "lex:getBotAlias",
      "lex:getBotAliases",
      "lex:getBotChannelAssociation",
      "lex:getBotChannelAssociations",
      "lex:getBots",
      "lex:getBotVersions",
      "lex:getBuiltinIntent",
      "lex:getBuiltinIntents",
      "lex:getBuiltinSlotTypes",
      "lex:getIntent",
      "lex:getIntents",
      "lex:getIntentVersions",
      "lex:getSlotType",
      "lex:getSlotTypes",
      "lex:getSlotTypeVersions",
      "lightsail:getActiveNames",
      "lightsail:getBlueprints",
      "lightsail:getBundles",
      "lightsail:getDomain",
      "lightsail:getDomains",
      "lightsail:getInstance",
      "lightsail:getInstanceAccessDetails",
      "lightsail:getInstanceMetricData",
      "lightsail:getInstancePortStates",
      "lightsail:getInstances",
      "lightsail:getInstanceSnapshot",
      "lightsail:getInstanceSnapshots",
      "lightsail:getInstanceState",
      "lightsail:getKeyPair",
      "lightsail:getKeyPairs",
      "lightsail:getOperation",
      "lightsail:getOperations",
      "lightsail:getOperationsForResource",
      "lightsail:getRegions",
      "lightsail:getStaticIp",
      "lightsail:getStaticIps",
      "logs:describeDestinations",
      "logs:describeExportTasks",
      "logs:describeLogGroups",
      "logs:describeLogStreams",
      "logs:describeMetricFilters",
      "logs:describeQueries",
      "logs:describeSubscriptionFilters",
      "logs:testMetricFilter",
      "machinelearning:describeBatchPredictions",
      "machinelearning:describeDataSources",
      "machinelearning:describeEvaluations",
      "machinelearning:describeMLModels",
      "machinelearning:getBatchPrediction",
      "machinelearning:getDataSource",
      "machinelearning:getEvaluation",
      "machinelearning:getMLModel",
      "managedblockchain:getMember",
      "managedblockchain:getNetwork",
      "managedblockchain:getNode",
      "managedblockchain:listMembers",
      "managedblockchain:listNetworks",
      "managedblockchain:listNodes",
      "mediaconvert:describeEndpoints",
      "mediaconvert:getJob",
      "mediaconvert:getJobTemplate",
      "mediaconvert:getPreset",
      "mediaconvert:getQueue",
      "mediaconvert:listJobs",
      "mediaconvert:listJobTemplates",
      "medialive:describeChannel",
      "medialive:describeInput",
      "medialive:describeInputSecurityGroup",
      "medialive:describeOffering",
      "medialive:describeReservation",
      "medialive:describeSchedule",
      "medialive:listChannels",
      "medialive:listInputs",
      "medialive:listInputSecurityGroups",
      "medialive:listOfferings",
      "medialive:listReservations",
      "mediapackage:describeChannel",
      "mediapackage:describeOriginEndpoint",
      "mediapackage:listChannels",
      "mediapackage:listOriginEndpoints",
      "mediastore:describeContainer",
      "mediastore:describeObject",
      "mediastore:getContainerPolicy",
      "mediastore:listContainers",
      "mediastore:listItems",
      "mediatailor:getPlaybackConfiguration",
      "mediatailor:listPlaybackConfigurations",
      "mobiletargeting:getAdmChannel",
      "mobiletargeting:getApnsChannel",
      "mobiletargeting:getApnsSandboxChannel",
      "mobiletargeting:getApnsVoipChannel",
      "mobiletargeting:getApnsVoipSandboxChannel",
      "mobiletargeting:getApp",
      "mobiletargeting:getApplicationSettings",
      "mobiletargeting:getApps",
      "mobiletargeting:getBaiduChannel",
      "mobiletargeting:getCampaign",
      "mobiletargeting:getCampaignActivities",
      "mobiletargeting:getCampaigns",
      "mobiletargeting:getCampaignVersion",
      "mobiletargeting:getCampaignVersions",
      "mobiletargeting:getEmailChannel",
      "mobiletargeting:getEndpoint",
      "mobiletargeting:getEventStream",
      "mobiletargeting:getExportJob",
      "mobiletargeting:getExportJobs",
      "mobiletargeting:getGcmChannel",
      "mobiletargeting:getImportJob",
      "mobiletargeting:getImportJobs",
      "mobiletargeting:getSegment",
      "mobiletargeting:getSegmentImportJobs",
      "mobiletargeting:getSegments",
      "mobiletargeting:getSegmentVersion",
      "mobiletargeting:getSegmentVersions",
      "mobiletargeting:getSmsChannel",
      "mq:describeBroker",
      "mq:describeConfiguration",
      "mq:describeConfigurationRevision",
      "mq:describeUser",
      "mq:listBrokers",
      "mq:listConfigurationRevisions",
      "mq:listConfigurations",
      "mq:listUsers",
      "opsworks-cm:describeAccountAttributes",
      "opsworks-cm:describeBackups",
      "opsworks-cm:describeEvents",
      "opsworks-cm:describeNodeAssociationStatus",
      "opsworks-cm:describeServers",
      "opsworks:describeAgentVersions",
      "opsworks:describeApps",
      "opsworks:describeCommands",
      "opsworks:describeDeployments",
      "opsworks:describeEcsClusters",
      "opsworks:describeElasticIps",
      "opsworks:describeElasticLoadBalancers",
      "opsworks:describeInstances",
      "opsworks:describeLayers",
      "opsworks:describeLoadBasedAutoScaling",
      "opsworks:describeMyUserProfile",
      "opsworks:describePermissions",
      "opsworks:describeRaidArrays",
      "opsworks:describeRdsDbInstances",
      "opsworks:describeServiceErrors",
      "opsworks:describeStackProvisioningParameters",
      "opsworks:describeStacks",
      "opsworks:describeStackSummary",
      "opsworks:describeTimeBasedAutoScaling",
      "opsworks:describeUserProfiles",
      "opsworks:describeVolumes",
      "opsworks:getHostnameSuggestion",
      "polly:describeVoices",
      "polly:getLexicon",
      "polly:listLexicons",
      "pricing:describeServices",
      "pricing:getAttributeValues",
      "pricing:getProducts",
      "rds:describeAccountAttributes",
      "rds:describeCertificates",
      "rds:describeDBClusterParameterGroups",
      "rds:describeDBClusterParameters",
      "rds:describeDBClusters",
      "rds:describeDBClusterSnapshots",
      "rds:describeDBEngineVersions",
      "rds:describeDBInstances",
      "rds:describeDBParameterGroups",
      "rds:describeDBParameters",
      "rds:describeDBSecurityGroups",
      "rds:describeDBSnapshotAttributes",
      "rds:describeDBSnapshots",
      "rds:describeDBSubnetGroups",
      "rds:describeEngineDefaultClusterParameters",
      "rds:describeEngineDefaultParameters",
      "rds:describeEventCategories",
      "rds:describeEvents",
      "rds:describeEventSubscriptions",
      "rds:describeOptionGroupOptions",
      "rds:describeOptionGroups",
      "rds:describeOrderableDBInstanceOptions",
      "rds:describePendingMaintenanceActions",
      "rds:describeReservedDBInstances",
      "rds:describeReservedDBInstancesOfferings",
      "rds:listTagsForResource",
      "redshift:describeClusterParameterGroups",
      "redshift:describeClusterParameters",
      "redshift:describeClusters",
      "redshift:describeClusterSecurityGroups",
      "redshift:describeClusterSnapshots",
      "redshift:describeClusterSubnetGroups",
      "redshift:describeClusterVersions",
      "redshift:describeDefaultClusterParameters",
      "redshift:describeEventCategories",
      "redshift:describeEvents",
      "redshift:describeEventSubscriptions",
      "redshift:describeHsmClientCertificates",
      "redshift:describeHsmConfigurations",
      "redshift:describeLoggingStatus",
      "redshift:describeOrderableClusterOptions",
      "redshift:describeReservedNodeOfferings",
      "redshift:describeReservedNodes",
      "redshift:describeResize",
      "redshift:describeSnapshotCopyGrants",
      "redshift:describeTableRestoreStatus",
      "redshift:describeTags",
      "rekognition:listCollections",
      "rekognition:listFaces",
      "robomaker:batchDescribeSimulationJob",
      "robomaker:describeDeploymentJob",
      "robomaker:describeFleet",
      "robomaker:describeRobot",
      "robomaker:describeRobotApplication",
      "robomaker:describeSimulationApplication",
      "robomaker:describeSimulationJob",
      "robomaker:listDeploymentJobs",
      "robomaker:listFleets",
      "robomaker:listRobotApplications",
      "robomaker:listRobots",
      "robomaker:listSimulationApplications",
      "robomaker:listSimulationJobs",
      "route53:getChange",
      "route53:getCheckerIpRanges",
      "route53:getGeoLocation",
      "route53:getHealthCheck",
      "route53:getHealthCheckCount",
      "route53:getHealthCheckLastFailureReason",
      "route53:getHealthCheckStatus",
      "route53:getHostedZone",
      "route53:getHostedZoneCount",
      "route53:getReusableDelegationSet",
      "route53:getTrafficPolicy",
      "route53:getTrafficPolicyInstance",
      "route53:getTrafficPolicyInstanceCount",
      "route53:listGeoLocations",
      "route53:listHealthChecks",
      "route53:listHostedZones",
      "route53:listHostedZonesByName",
      "route53:listResourceRecordSets",
      "route53:listReusableDelegationSets",
      "route53:listTagsForResource",
      "route53:listTagsForResources",
      "route53:listTrafficPolicies",
      "route53:listTrafficPolicyInstances",
      "route53:listTrafficPolicyInstancesByHostedZone",
      "route53:listTrafficPolicyInstancesByPolicy",
      "route53:listTrafficPolicyVersions",
      "route53domains:checkDomainAvailability",
      "route53domains:getContactReachabilityStatus",
      "route53domains:getDomainDetail",
      "route53domains:getOperationDetail",
      "route53domains:listDomains",
      "route53domains:listOperations",
      "route53domains:listTagsForDomain",
      "route53domains:viewBilling",
      "route53resolver:getResolverRulePolicy",
      "route53resolver:listResolverEndpointIpAddresses",
      "route53resolver:listResolverEndpoints",
      "route53resolver:listResolverRuleAssociations",
      "route53resolver:listResolverRules",
      "route53resolver:listTagsForResource",
      "s3:getAccelerateConfiguration",
      "s3:getAnalyticsConfiguration",
      "s3:getBucketAcl",
      "s3:getBucketCORS",
      "s3:getBucketLocation",
      "s3:getBucketLogging",
      "s3:getBucketNotification",
      "s3:getBucketPolicy",
      "s3:getBucketRequestPayment",
      "s3:getBucketTagging",
      "s3:getBucketVersioning",
      "s3:getBucketWebsite",
      "s3:getEncryptionConfiguration",
      "s3:getInventoryConfiguration",
      "s3:getLifecycleConfiguration",
      "s3:getMetricsConfiguration",
      "s3:getReplicationConfiguration",
      "s3:headBucket",
      "s3:listAllMyBuckets",
      "s3:listBucketMultipartUploads",
      "sagemaker:describeAlgorithm",
      "sagemaker:describeCompilationJob",
      "sagemaker:describeEndpoint",
      "sagemaker:describeEndpointConfig",
      "sagemaker:describeHyperParameterTuningJob",
      "sagemaker:describeLabelingJob",
      "sagemaker:describeModel",
      "sagemaker:describeModelPackage",
      "sagemaker:describeNotebookInstance",
      "sagemaker:describeNotebookInstanceLifecycleConfig",
      "sagemaker:describeTrainingJob",
      "sagemaker:describeTransformJob",
      "sagemaker:describeWorkteam",
      "sagemaker:listAlgorithms",
      "sagemaker:listCompilationJobs",
      "sagemaker:listEndpointConfigs",
      "sagemaker:listEndpoints",
      "sagemaker:listHyperParameterTuningJobs",
      "sagemaker:listLabelingJobs",
      "sagemaker:listLabelingJobsForWorkteam",
      "sagemaker:listModelPackages",
      "sagemaker:listModels",
      "sagemaker:listNotebookInstanceLifecycleConfigs",
      "sagemaker:listNotebookInstances",
      "sagemaker:listTags",
      "sagemaker:listTrainingJobs",
      "sagemaker:listTrainingJobsForHyperParameterTuningJob",
      "sagemaker:listTransformJobs",
      "sagemaker:listWorkteams",
      "sdb:domainMetadata",
      "sdb:listDomains",
      "secretsmanager:describeSecret",
      "secretsmanager:getResourcePolicy",
      "secretsmanager:listSecrets",
      "secretsmanager:listSecretVersionIds",
      "servicecatalog:describeConstraint",
      "servicecatalog:describePortfolio",
      "servicecatalog:describeProduct",
      "servicecatalog:describeProductAsAdmin",
      "servicecatalog:describeProductView",
      "servicecatalog:describeProvisioningArtifact",
      "servicecatalog:describeProvisioningParameters",
      "servicecatalog:describeRecord",
      "servicecatalog:listAcceptedPortfolioShares",
      "servicecatalog:listConstraintsForPortfolio",
      "servicecatalog:listLaunchPaths",
      "servicecatalog:listPortfolioAccess",
      "servicecatalog:listPortfolios",
      "servicecatalog:listPortfoliosForProduct",
      "servicecatalog:listPrincipalsForPortfolio",
      "servicecatalog:listProvisioningArtifacts",
      "servicecatalog:listRecordHistory",
      "servicecatalog:scanProvisionedProducts",
      "servicecatalog:searchProducts",
      "ses:describeActiveReceiptRuleSet",
      "ses:describeReceiptRule",
      "ses:describeReceiptRuleSet",
      "ses:getIdentityDkimAttributes",
      "ses:getIdentityMailFromDomainAttributes",
      "ses:getIdentityNotificationAttributes",
      "ses:getIdentityPolicies",
      "ses:getIdentityVerificationAttributes",
      "ses:getSendQuota",
      "ses:getSendStatistics",
      "ses:listIdentities",
      "ses:listIdentityPolicies",
      "ses:listReceiptFilters",
      "ses:listReceiptRuleSets",
      "ses:listVerifiedEmailAddresses",
      "shield:describeAttack",
      "shield:describeProtection",
      "shield:describeSubscription",
      "shield:listAttacks",
      "shield:listProtections",
      "sms:getConnectors",
      "sms:getReplicationJobs",
      "sms:getReplicationRuns",
      "sms:getServers",
      "snowball:describeAddress",
      "snowball:describeAddresses",
      "snowball:describeJob",
      "snowball:getSnowballUsage",
      "snowball:listJobs",
      "sns:checkIfPhoneNumberIsOptedOut",
      "sns:getEndpointAttributes",
      "sns:getPlatformApplicationAttributes",
      "sns:getSMSAttributes",
      "sns:getSubscriptionAttributes",
      "sns:getTopicAttributes",
      "sns:listEndpointsByPlatformApplication",
      "sns:listPhoneNumbersOptedOut",
      "sns:listPlatformApplications",
      "sns:listSubscriptions",
      "sns:listSubscriptionsByTopic",
      "sns:listTopics",
      "sqs:getQueueAttributes",
      "sqs:getQueueUrl",
      "sqs:listDeadLetterSourceQueues",
      "sqs:listQueues",
      "ssm:describeActivations",
      "ssm:describeAssociation",
      "ssm:describeAutomationExecutions",
      "ssm:describeAvailablePatches",
      "ssm:describeDocument",
      "ssm:describeDocumentPermission",
      "ssm:describeEffectiveInstanceAssociations",
      "ssm:describeEffectivePatchesForPatchBaseline",
      "ssm:describeInstanceAssociationsStatus",
      "ssm:describeInstanceInformation",
      "ssm:describeInstancePatches",
      "ssm:describeInstancePatchStates",
      "ssm:describeInstancePatchStatesForPatchGroup",
      "ssm:describeMaintenanceWindowExecutions",
      "ssm:describeMaintenanceWindowExecutionTaskInvocations",
      "ssm:describeMaintenanceWindowExecutionTasks",
      "ssm:describeMaintenanceWindows",
      "ssm:describeMaintenanceWindowTargets",
      "ssm:describeMaintenanceWindowTasks",
      "ssm:describeParameters",
      "ssm:describePatchBaselines",
      "ssm:describePatchGroups",
      "ssm:describePatchGroupState",
      "ssm:getAutomationExecution",
      "ssm:getCommandInvocation",
      "ssm:getDefaultPatchBaseline",
      "ssm:getDeployablePatchSnapshotForInstance",
      "ssm:getDocument",
      "ssm:getInventory",
      "ssm:getInventorySchema",
      "ssm:getMaintenanceWindow",
      "ssm:getMaintenanceWindowExecution",
      "ssm:getMaintenanceWindowExecutionTask",
      "ssm:getParameterHistory",
      "ssm:getParameters",
      "ssm:getPatchBaseline",
      "ssm:getPatchBaselineForPatchGroup",
      "ssm:listAssociations",
      "ssm:listCommandInvocations",
      "ssm:listCommands",
      "ssm:listDocuments",
      "ssm:listDocumentVersions",
      "ssm:listInventoryEntries",
      "ssm:listTagsForResource",
      "states:describeActivity",
      "states:describeExecution",
      "states:describeStateMachine",
      "states:getExecutionHistory",
      "states:listActivities",
      "states:listExecutions",
      "states:listStateMachines",
      "storagegateway:describeBandwidthRateLimit",
      "storagegateway:describeCache",
      "storagegateway:describeCachediSCSIVolumes",
      "storagegateway:describeGatewayInformation",
      "storagegateway:describeMaintenanceStartTime",
      "storagegateway:describeNFSFileShares",
      "storagegateway:describeSMBFileShares",
      "storagegateway:describeSMBSettings",
      "storagegateway:describeSnapshotSchedule",
      "storagegateway:describeStorediSCSIVolumes",
      "storagegateway:describeTapeArchives",
      "storagegateway:describeTapeRecoveryPoints",
      "storagegateway:describeTapes",
      "storagegateway:describeUploadBuffer",
      "storagegateway:describeVTLDevices",
      "storagegateway:describeWorkingStorage",
      "storagegateway:listFileShares",
      "storagegateway:listGateways",
      "storagegateway:listLocalDisks",
      "storagegateway:listTagsForResource",
      "storagegateway:listTapes",
      "storagegateway:listVolumeInitiators",
      "storagegateway:listVolumeRecoveryPoints",
      "storagegateway:listVolumes",
      "swf:countClosedWorkflowExecutions",
      "swf:countOpenWorkflowExecutions",
      "swf:countPendingActivityTasks",
      "swf:countPendingDecisionTasks",
      "swf:describeActivityType",
      "swf:describeDomain",
      "swf:describeWorkflowExecution",
      "swf:describeWorkflowType",
      "swf:getWorkflowExecutionHistory",
      "swf:listActivityTypes",
      "swf:listClosedWorkflowExecutions",
      "swf:listDomains",
      "swf:listOpenWorkflowExecutions",
      "swf:listWorkflowTypes",
      "transfer:describeServer",
      "transfer:describeUser",
      "transfer:listServers",
      "transfer:listTagsForResource",
      "transfer:listUsers",
      "waf-regional:getByteMatchSet",
      "waf-regional:getChangeTokenStatus",
      "waf-regional:getIPSet",
      "waf-regional:getRule",
      "waf-regional:getSqlInjectionMatchSet",
      "waf-regional:getWebACL",
      "waf-regional:getWebACLForResource",
      "waf-regional:listByteMatchSets",
      "waf-regional:listIPSets",
      "waf-regional:listResourcesForWebACL",
      "waf-regional:listRules",
      "waf-regional:listSqlInjectionMatchSets",
      "waf-regional:listWebACLs",
      "waf:getByteMatchSet",
      "waf:getChangeTokenStatus",
      "waf:getIPSet",
      "waf:getRule",
      "waf:getSampledRequests",
      "waf:getSizeConstraintSet",
      "waf:getSqlInjectionMatchSet",
      "waf:getWebACL",
      "waf:getXssMatchSet",
      "waf:listByteMatchSets",
      "waf:listIPSets",
      "waf:listRules",
      "waf:listSizeConstraintSets",
      "waf:listSqlInjectionMatchSets",
      "waf:listWebACLs",
      "waf:listXssMatchSets",
      "workdocs:checkAlias",
      "workdocs:describeAvailableDirectories",
      "workdocs:describeInstances",
      "workmail:describeGroup",
      "workmail:describeOrganization",
      "workmail:describeResource",
      "workmail:describeUser",
      "workmail:listAliases",
      "workmail:listGroupMembers",
      "workmail:listGroups",
      "workmail:listMailboxPermissions",
      "workmail:listOrganizations",
      "workmail:listResourceDelegates",
      "workmail:listResources",
      "workmail:listUsers",
      "workspaces:describeTags",
      "workspaces:describeWorkspaceBundles",
      "workspaces:describeWorkspaceDirectories",
      "workspaces:describeWorkspaces",
      "workspaces:describeWorkspacesConnectionStatus"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Resource": [
        "arn:aws:lambda:*:*:function:Automation*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ec2:CreateImage",
        "ec2:DeleteSnapshot",
        "ec2:DeregisterImage",
        "ec2:DescribeImages",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:RunInstances"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    },
    {
      "Action": [
        "ssm:ListCommandInvocations",
        "ssm:ListCommands",
        "ssm:SendCommand"
      ],
      "Resource": [
        "*"
      ],
      "Effect": "Allow"
    }
  ]
}
[
  {
    "Action": [
      "lambda:InvokeFunction"
    ],
    "Resource": [
      "arn:aws:lambda:*:*:function:Automation*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ec2:CreateImage",
      "ec2:DeleteSnapshot",
      "ec2:DeregisterImage",
      "ec2:DescribeImages",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:DescribeInstanceStatus",
      "ec2:RunInstances"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  },
  {
    "Action": [
      "ssm:ListCommandInvocations",
      "ssm:ListCommands",
      "ssm:SendCommand"
    ],
    "Resource": [
      "*"
    ],
    "Effect": "Allow"
  }
]
